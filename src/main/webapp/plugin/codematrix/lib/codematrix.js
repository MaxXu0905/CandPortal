//window.CodeMatrix = (function() {	"use strict";	// from outter mode to inner mode	// key: outtermode value.mode:innermode value.path:dependencyfilepath	CodeMatrix.modemapping = {		java : {			mode : 'text/x-java',			path : [ 'clike' ],			opt : {				intent : true			},			help : {				type : 'interface'			}		},		javascript : {			mode : 'text/javascript',			path : [ 'javascript' ],			opt : {				intent : true			}		},		sql : {			mode : 'text/x-sql',			path : [ 'sql' ],			opt : {				intent : true			}		},		shell : {			mode : 'shell',			path : [ 'shell' ],			opt : {				intent : true			}		},		html : {			mode : 'htmlmixed',			path : [ 'htmlmixed' ],			opt : {				intent : true			}		},		'c++' : {			mode : 'text/x-c++src',			path : [ 'clike' ],			opt : {				intent : true			},			help : {				type : 'file'			}		},		c : {			mode : 'text/x-csrc',			path : [ 'clike' ],			opt : {				intent : true			}		},		php : {			mode : 'text/x-php',			path : [ 'php', 'clike' ],			opt : {				intent : false			},			help : {				type : 'interface'			}		},		python : {			mode : 'text/x-python',			path : [ 'python' ],			opt : {				intent : false			}		}	};	CodeMatrix.meta = {		minWidth : 500,		toolbarHeight : 41,		consoleHeihgt : 200,		testBtnTemplate : '<span class="glyphicon glyphicon-play-circle"></span> 运行'	}	CodeMirror.modeURL = root + "/plugin/codematrix/lib/codemirror-3.21/mode/%N/%N.js";	/**	 * 构造器	 * <p>	 * place: [页面元素]代码编辑区域，通常是一个DIV [对象]功能按钮key:[页面元素] value:要实现的功能	 * </p>	 */	function CodeMatrix(wrapper, options) {		if (!(this instanceof CodeMatrix)) {			return new CodeMatrix(wrapper, options);		}		if (typeof options != 'object') {			return new CodeMatrix(wrapper, {});		}		var _this = this;		this.wrapper = wrapper;		this.$wrapper = $(wrapper).addClass('CodeMatrix').css({			minWidth : CodeMatrix.meta.minWidth,			overflow : 'hidden',			position : 'relative',			borderLeft : '1px solid #DDD',			borderBottom : '1px solid #DDD',			borderRadius : '4px'		});		this.$place = $('<div>').css({			position : 'absolute',			width : '100%',			borderRight : '1px solid #DDD',			top : CodeMatrix.meta.toolbarHeight,			zIndex : 11		});		this.$wrapper.append(this.$place);		// 初始化基本配置		this.options = options = Utils.merge(options || {}, {			lineNumbers : true, // 显示行号			lineWrapping : false, // 不折行（会产生横向滚动条）			styleActiveLine : true,			tabSize : 4,			indentUnit : 4,			extraKeys : {				"Cmd-/" : "autocomplete"			},			autoCloseBrackets : true,			matchBrackets : false,			themes : [ 'default', 'monokai' ],			theme : 'default'		});		this.init();	}	/**	 * 动态加载模式	 */	function autoLoadMode(path, callback) {		var js = CodeMirror.modeURL.replace(/%N/g, path);		$LAB.script(js).script(function() {			if (callback) {				callback();			}		});	}	/**	 * 创建console展现区	 */	function generateConsole($place) {		var _mirror = CodeMirror($place.get(0), {			lineNumbers : false,			lineWrapping : false,			readOnly : true		});		_mirror.setSize(null, 0);		return _mirror;	}	function createConsole($console, matrix) {		var console = {};		var items = [];		items.push('<ul style="height:25px;background:#fff;" class="nav nav-tabs">');		items				.push('<li style="margin:-1px 0 0 -1px;" class="active"><a style="padding: 2px 15px;outline: none;" href="#code_matrix_console_out" data-toggle="tab">console');		items.push('</a></li>');		items.push('<span class="btn-toolbar pull-left" style="padding-left:10px;">');		items				.push('<button class="btn btn-link btn-xs console-clear" type="button" title="清空控制台" style="outline: none;" >');		items.push('<span class="glyphicon glyphicon-trash"></span> ');		items.push('</button>');		items.push('</span>');		items.push('<span class="btn-toolbar pull-right" style="padding-right:10px;">');		items				.push('<button class="btn btn-link btn-xs console-toggle" type="button" title="打开控制台窗口" style="outline: none;" >');		items.push('<span class="glyphicon glyphicon-chevron-up"></span> ');		items.push('</button>');		items.push('</span>');		items.push('</ul>');		items.push('<div style="border-top: none;" class="tab-content">');		items.push('<div class="tab-pane active in fade" id="code_matrix_console_out"></div>');		items.push('</div>');		$console.html(items.join(''));		console.$out = $console.find('#code_matrix_console_out');		console.out = matrix.currConsole = generateConsole(console.$out);		$console.find('.console-clear').click(function(e) {			e.stopPropagation();			matrix.clearCurrConsole();		});		$console.find('a[data-toggle="tab"]').on('shown.bs.tab', function(e) {			matrix.currConsole = console.out;			matrix.currConsole.refresh();		});		return console;	}	/**	 * 收起/打开控制台窗口 action强制动作（1：打开 2：收起）	 */	function toggleConsole(matrix, action) {		var $btn = matrix.$console.find('.console-toggle');		var finalAction;		if ((action == 2) || matrix.$consoleOut.height() >= CodeMatrix.meta.consoleHeihgt) {			finalAction = 2;		}		if ((action == 1) || matrix.$consoleOut.height() < CodeMatrix.meta.consoleHeihgt) {			finalAction = 1;		}		if (finalAction == 2) {			matrix.currConsole.setSize(null, 0);			matrix.$consoleOut.css({				height : 0			});			$btn.attr('data-original-title', '打开控制台窗口');			$btn.children('span').removeClass('glyphicon-chevron-down').addClass('glyphicon-chevron-up')		} else {			matrix.currConsole.setSize(null, CodeMatrix.meta.consoleHeihgt);			matrix.$consoleOut.css({				height : CodeMatrix.meta.consoleHeihgt			});			$btn.attr('data-original-title', '收起控制台窗口');			$btn.children('span').removeClass('glyphicon-chevron-up').addClass('glyphicon-chevron-down');		}		matrix.onResize();	}	/**	 * 显示/隐藏模板	 */	function toggleTemplate(matrix, hideOnPurpose, funct) {		var mirror = matrix.mirrors[matrix.getCurrMirrorId()];		if (!mirror.tmp) {			if (funct) {				funct();			}			return;		}		var $templateDiv = matrix.mirrors[matrix.getCurrMirrorId()].$templateDiv;		var targetMarginRight;		var isExpand = isTemplateExpand($templateDiv);		var isExecuted = false;		if (hideOnPurpose) {			if (!isExpand) {				if (funct) {					funct();				}				return;			}			targetMarginRight = -$templateDiv.width();		} else {			if (!isExpand) {				if (funct) {					funct();					isExecuted = true;					return;				}			}			targetMarginRight = $templateDiv.css('marginRight').slice(0, -2) * 1 < 0 ? 0 : -$templateDiv.width();			if (targetMarginRight == 0 && isAPIPaneExpand(matrix)) {				toggleAPIPane(matrix, true);			}		}		$templateDiv.stop().animate({			marginRight : targetMarginRight		}, 200, function() {			setShadow($templateDiv, targetMarginRight == 0);			if (funct && !isExecuted) {				funct();			}		});	}	/**	 * 模板是否展开	 */	function isTemplateExpand($templateDiv) {		return $templateDiv.css('marginRight').slice(0, -2) * 1 == 0;	}	/**	 * 显示/隐藏API帮助	 */	function toggleAPIPane(matrix, hideOnPurpose) {		var $api = matrix.$api || matrix.$pane;		var $toggleBtn = matrix.$apiToggleBtn || matrix.$toggleBtn;		var targetMarginRight;		if (hideOnPurpose) {			targetMarginRight = -CodeMatrix.meta.minWidth;		} else {			targetMarginRight = $api.css('marginRight').slice(0, -2) * 1 < 0 ? 0 : -CodeMatrix.meta.minWidth;		}		$api.stop().animate({			marginRight : targetMarginRight		}, 200, function() {			setShadow($api, targetMarginRight == 0);			if (targetMarginRight == 0) {				$toggleBtn.removeClass('glyphicon-chevron-left').addClass('glyphicon-chevron-right').css({					left : '-40px'				});			} else {				$toggleBtn.removeClass('glyphicon-chevron-right').addClass('glyphicon-chevron-left').css({					left : '-30px'				});			}		});	}	/**	 * API是否展开	 */	function isAPIPaneExpand(matrix) {		var $api = matrix.$api || matrix.$pane;		return $api.css('marginRight').slice(0, -2) * 1 == 0;	}	/**	 * 创建主题按钮	 */	function createThemeBtns(matrix, titles, themes) {		var items = [];		items.push('<div class="btn-group" data-toggle="buttons">');		for ( var i = 0; i < titles.length; i++) {			items.push('<label class="btn btn-default' + (i == 0 ? ' active' : '') + '" title="' + titles[i]					+ '" data-theme="' + themes[i] + '">');			items.push('<input type="radio" name="themes"> ' + themes[i]);			items.push('</label>')		}		var $btns = $(items.join(''));		$btns.on('click', 'label', function() {			var theme = $(this).data('theme');			matrix.options.theme = theme;			for ( var i = 0; i < matrix.mirrors.length; i++) {				var mirror = matrix.mirrors[i];				mirror.cm.setOption('theme', theme);				if (mirror.tmp) {					mirror.tmp.setOption('theme', theme);				}			}			matrix.console.out.setOption('theme', theme);		});		return $btns;	}	/**	 * 创建工具栏通用按钮	 */	function createGlyphiconBtn(matrix, icon, action, title) {		var $btn = $('<button>').attr({			type : 'button',			title : title,			'data-action' : action		}).addClass('btn btn-default').append($('<span>').addClass('glyphicon glyphicon-' + icon));		if (icon == 'play-circle') {			$btn.removeAttr('title').removeClass('btn-default').addClass('btn-success').html(					CodeMatrix.meta.testBtnTemplate);		}		return $btn;	}	/**	 * 创建工具栏	 */	function createToolBar(matrix) {		var $toolbar = $('<span>').addClass('btn-toolbar pull-right').css({});		// var $themeBtns = createThemeBtns(matrix, [ '默认主题', 'monokai主题' ], [		// 'default', 'monokai' ]);		var $helpBtns = $('<div>').addClass('btn-group help-wrapper');		$helpBtns.append(createGlyphiconBtn(matrix, 'indent-left', 'format', '格式化')) //		.append(createGlyphiconBtn(matrix, 'eye-open', 'template', '查看文件初始内容')) //		.append(createGlyphiconBtn(matrix, 'fullscreen', 'fullscreen', '全屏(Esc恢复)')) //		.append(createGlyphiconBtn(matrix, 'search', 'apisearch', '常用API查找')) //		;//		var $runBtns = $('<div>').addClass('btn-group run-wrapper');		$runBtns.append(createGlyphiconBtn(matrix, 'play-circle', 'runtest', '运行')) //		;//		$toolbar.append($runBtns).append($helpBtns);		return $toolbar;	}	/**	 * 设置阴影	 */	function setShadow($tmp, force) {		if (force) {			$tmp.css('boxShadow', '0 0 12px rgba(0, 0, 0, 0.5)');		} else {			$tmp.css('boxShadow', 'none');		}	}	/**	 * 格式化	 */	function formatContent(mirror) {		var doc = mirror.getDoc();		mirror.operation(function() {			for ( var i = 0; i < doc.lineCount(); i++) {				mirror.indentLine(i);			}		});	}	/**	 * 全屏	 */	function fullScreen(matrix) {		matrix._fullscreen = true;		matrix.$wrapper.addClass('CodeMirror-fullscreen');		matrix.onResize();	}	/**	 * 退出全屏	 */	function cancelFullscreen(matrix) {		matrix._fullscreen = false;		matrix.$wrapper.removeClass('CodeMirror-fullscreen');		matrix.onResize();		matrix.onResize(); // reisze twice to make each eles calculate correct	}	/**	 * 运行模态	 */	function createRunModal(matrix) {		var $modalBackground = $('<div>').addClass('back-modal').css({			width : '100%',			height : '100%'		});		var $modalContent = $('<div>').addClass('inner-modal');		var items = [];		items.push('<div class="test-suit"></div>');		items.push('<div class="customize-suit">');		items				.push('<textarea id="cm-arguments" class="form-control cm-arguments" rows="3" placeholder="请按题干中【输入格式】的说明自定义输入，也可参考【输入样例】"></textarea>');		items.push('<button class="btn btn-info cm-run-customize-btn" disabled="disabled">运行自定义</button>')		items.push('</div>');		$modalContent.html(items.join(''));		matrix.$wrapper.append($modalBackground).append($modalContent);		return $modalContent;	}	// PROTOTYPE	CodeMatrix.prototype = {		constructor : CodeMatrix,		init : function() { // 初始化			this._mode = null; // 当前试题的语言模式，对应CodeMatrix.modemapping的键			this._maskLock = false; // 遮罩锁，为true时点击遮罩不消失			this._abortTimeoutId = null; // 取消请求按钮出现的定时器			this._fullscreen = false; // 是否处于全屏模式			// this.$wrapper = this.$place.parent();			this.$tab = $("<ul>").addClass('nav nav-tabs nav-tabs-sm').css({ // header:toolbar				height : CodeMatrix.meta.toolbarHeight			});			this.$mirror = $('<div>').addClass('tab-content'); // body			this.$wrapper.append(this.$tab);			this.$place.append(this.$mirror);			this.currMirrorId = -1;			this.mirrors = [];			this.$toolbar = createToolBar(this);			this.$testBtn = this.$toolbar.find('button[data-action="runtest"]'); // 测试			this.$abortBtn = $('<button>').attr({ // 停止请求按钮，游离态，需要时加入dom，不需要时移除				type : 'button',				title : '停止当前运行请求'			}).addClass('btn btn-danger run-abort-btn').append($('<span>').addClass('glyphicon glyphicon-off'));			this.$helpBtnGroup = this.$toolbar.children('.help-wrapper'); // 功能按钮组			this.$templateBtn = this.$toolbar.find('button[data-action="template"]'); // 模板			this.$intentBtn = this.$toolbar.find('button[data-action="format"]'); // 格式化			this.$apiBtn = this.$toolbar.find('button[data-action="apisearch"]'); // API帮助			this.$fullBtn = this.$toolbar.find('button[data-action="fullscreen"]'); // 全屏			this.$tab.append(this.$toolbar);			this.$console = $('<div>'); // footer: console			this.$place.append(this.$console);			this.console = createConsole(this.$console, this);			this.$consoleOut = this.$console.find('#code_matrix_console_out');			// API帮助			this.api = new CodeAPI(this);			this.$api = this.api.$pane;			this.$apiToggleBtn = this.api.$toggleBtn;			this.$wrapper.append(this.$api);			this.$wrapper.find('button, label').tooltip({				container : 'body'			});			// 运行测试样例模态层初始化			this.$runModal = createRunModal(this);			this.$mask = this.$runModal.prev('.back-modal');			this.bindEvent();			// 计算编码区以外的高度，是一个固定值			CodeMatrix.meta.fixedHeight = this.$tab.height() + this.$console.height();			this.onResize();			// this.hide();		},		bindEvent : function() {			var _this = this;			$(window).bind('resize', function() {				_this.onResize();			});			/** 请求运行样例 */			this.$runModal.on('click', '.run-sample-btn', function() {				var index = $(this).data('index');				_this.runTestBySampleId(index);			});			/** 请求运行自定义 */			this.$runModal.on('click', '.cm-run-customize-btn', function() {				var input = $.trim(_this.$runModal.find('.cm-arguments').val());				_this.runTestByArg(input);			});			/** 取消运行测试请求 */			this.$toolbar.children('.run-wrapper').on('click', '.run-abort-btn', function() {				if (_this.runTestReq) {					_this.runTestReq.abort();				}				_this.$testBtn.html(CodeMatrix.meta.testBtnTemplate).removeAttr('disabled');				_this.delAbortBtn();			});			this.$runModal.on('keyup blur', '.cm-arguments', function() {				var $this = $(this);				var input = $.trim($this.val());				if (input) {					_this.$runModal.find('.cm-run-customize-btn').removeAttr('disabled', 'disabled');				} else {					_this.$runModal.find('.cm-run-customize-btn').attr('disabled', 'disabled');				}			});			/** 触发模态消失 */			this.$runModal.prev('.back-modal').bind('click', function() {				if (!_this._maskLock) {					_this.hideRunModal();				}			});			/** 收起打开控制台 */			this.$console.children('.nav').bind('click', function() {				toggleConsole(_this);			});			/** 工具栏按钮 */			this.$toolbar.on('click', '.btn', function(e) {				var $btn = $(this);				var action = $btn.data('action');				switch (action) {				case 'template': // 查看模板					toggleTemplate(_this);					break;				case 'format': // 格式化					var mirror = _this.mirrors[_this.getCurrMirrorId()];					formatContent(mirror.cm);					break;				case 'fullscreen': // 全屏					if (_this._fullscreen) {						$btn.children('span').removeClass('glyphicon-resize-small').addClass('glyphicon-fullscreen');						cancelFullscreen(_this);					} else {						$btn.children('span').removeClass('glyphicon-fullscreen').addClass('glyphicon-resize-small');						toggleTemplate(_this, true, function() {							fullScreen(_this);						});					}					break;				case 'runtest': // 测试					_this.showRunModal();					break;				case 'apisearch': // api					toggleAPIPane(_this);					break;				}			});		},		addAbortBtn : function() {			var _this = this;			clearTimeout(this._abortTimeoutId);			_this._abortTimeoutId = setTimeout(function() {				_this.$toolbar.children('.run-wrapper').append(_this.$abortBtn);				_this.$abortBtn.tooltip({					container : 'body'				});			}, 2000);		},		delAbortBtn : function() {			clearTimeout(this._abortTimeoutId);			this.$abortBtn.tooltip('hide');			this.$abortBtn.remove();		},		getCurrMirrorId : function() { // 获取当前编码窗口主键			return this.currMirrorId;		},		parseItems : function() {			var _this = this;			this.options.items = this.options.items || [];			for ( var i = 0; i < this.options.items.length; i++) {				var data = this.options.items[i];				var mode = (data.mode || '').toLowerCase();				this.addMirror(data, mode, i == 0);				if (i == 0) {					_this._mode = mode; // 以试题中第一个文件的mode作为当前题目的主mode					_this.api.setMode(mode);					var Mode = CodeMatrix.modemapping[mode];					var intent = false;					if(Mode){						intent = Mode.opt.intent || false;					}					_this.toggleIntentBtn(intent);				}			}			this.onResize();			this.$tab.find('a[data-toggle="tab"]').on('show.bs.tab', function(e) {				$(e.target).css({					background : '#FFF'				});				$(e.relatedTarget).css({					background : '#DDDDDD'				});			});			this.$tab.find('a[data-toggle="tab"]').on('shown.bs.tab', function(e) {				_this.currMirrorId = $(e.target).data('id');				var mirror = _this.mirrors[_this.currMirrorId];				mirror.cm.refresh();				if (mirror.tmp) {					mirror.tmp.refresh();				}				_this.toggleTemplateBtn(mirror);			});			this.toggleTemplateBtn();		},		toggleIntentBtn : function(intent) {			if (intent) {				this.$intentBtn.show();			} else {				this.$intentBtn.hide();			}		},		toggleTemplateBtn : function(mirror) {			mirror = mirror || this.mirrors[this.currMirrorId];			if (mirror.tmp && (this.options.console == true)) {				this.$templateBtn.show();//				this.$templateBtn.stop().animate({//					marginRight : 0//				}, 100);			} else {				this.$templateBtn.hide();//				this.$templateBtn.stop().animate({//					marginRight : '-40px'//				}, 100);			}		},		generateTemplate : function($place, data) {			var _this = this;			var _mirror = CodeMirror($place.get(0), {				value : data.template || '',				// mode : data.mode,				lineNumbers : true,				lineWrapping : false,				readOnly : true,				styleActiveLine : _this.options.styleActiveLine,				tabSize : _this.options.tabSize,				indentUnit : _this.options.indentUnit,				theme : _this.options.theme			});			_mirror.$place = $place;			return _mirror;		},		generateMirror : function($place, data) {			var _this = this;			var _mirror = CodeMirror($place.get(0), {				value : data.content || data.template || '',				// mode : data.mode,				lineNumbers : _this.options.lineNumbers,				lineWrapping : _this.options.lineWrapping,				styleActiveLine : _this.options.styleActiveLine,				tabSize : _this.options.tabSize,				indentUnit : _this.options.indentUnit,				extraKeys : _this.options.extraKeys,				autoCloseBrackets : _this.options.autoCloseBrackets,				matchBrackets : _this.options.matchBrackets,				theme : _this.options.theme			});			_mirror.on('focus', function() {				toggleTemplate(_this, true);			});			return _mirror;		},		addMirror : function(data, mode, active) {			var _this = this;			var id = (this.currMirrorId + 1);			var mirror = {};			// 添加头			var $li = $('<li>').css({				margin : '0 0 0 -1px'			});			this.$tab.append($li);			$li.append($('<a>').css({				outline : 'none'			}).attr({				href : '#' + id,				'data-toggle' : 'tab',				'data-id' : id			}).append(data.filename.substring(data.filename.lastIndexOf('/') + 1, data.filename.length)));			// 添加内容			var $div = $('<div>').css({				overflowX : 'hidden',				borderBottom : '1px solid #DDD',				borderTop : 'none'			});			this.$mirror.append($div);			var $mirrorDiv = mirror.$mirrorDiv = $('<div>');			var $templateDiv = mirror.$templateDiv = $('<div>');			$div.append($mirrorDiv).append($templateDiv); // 先装载到页面中			mirror.cm = this.generateMirror($mirrorDiv, data); // 再构造编辑器			mirror.tmp = this.generateTemplate($templateDiv, data); // 再构造编辑器			if (!data.template) { // 即使不存在template也创建tmp，目的是为了保证页面结构不变形				mirror.tmp = null;			}			$mirrorDiv.css({				borderRight : '1px solid #DDD',				position : 'absolute',				zIndex : 10			});			$templateDiv.css({				position : 'relative',				float : 'right',				zIndex : 10			});			$div.addClass('tab-pane').attr('id', id);			if (active) {				$li.addClass('active');				$div.addClass('active');				this.currMirrorId = id;			}			this.mirrors.push(mirror);			$mirrorDiv = null;			$templateDiv = null;			// 动态添加mode			if (mode) {				var Mode = CodeMatrix.modemapping[mode];				if (Mode) {					var intent = Mode.opt.intent || false;					// 默认已加载JS					mirror.cm.setOption('mode', Mode.mode);					var hasContent = data.hasOwnProperty('content');					if (!hasContent && intent) { // 如果没有用户答案，那么装载的是模板，需要格式化						formatContent(mirror.cm);					}					if (mirror.tmp) {						mirror.tmp.setOption('mode', Mode.mode);						if (intent) {							formatContent(mirror.tmp);						}					}					var jses = [];					for ( var i = 0; i < Mode.path.length; i++) {						jses.push(CodeMirror.modeURL.replace(/%N/g, Mode.path[i]));					}					$LAB.script(jses).wait(function() {						mirror.cm.setOption('mode', Mode.mode);						var hasContent = data.hasOwnProperty('content');						if (!hasContent && intent) { // 如果没有用户答案，那么装载的是模板，需要格式化							formatContent(mirror.cm);						}						if (mirror.tmp) {							mirror.tmp.setOption('mode', Mode.mode);							if (intent) {								formatContent(mirror.tmp);							}						}					});				} else {				}			} else {				answerMirror.setOption('lineWrapping', true);			}		},		onResize : function() {			var fixedHeight = this.$tab.height();			if (this.options.console) {				fixedHeight += this.$console.height();			}			var refWidth = this.$wrapper.width();			var refHeight = $(window).height();			if (!this._fullscreen) {				refHeight -= 50;			}			if (refHeight < 400) {				refHeight = 400;			}			var refHeight2 = refHeight - fixedHeight - 2;			for ( var i = 0; i < this.mirrors.length; i++) {				var mirror = this.mirrors[i];				mirror.cm.setSize(null, refHeight2);				if (mirror.tmp) {					mirror.tmp.setSize(null, refHeight2);				}				mirror.$mirrorDiv.css({					width : refWidth,					height : refHeight2				});				mirror.$templateDiv.css({					width : refWidth - 160,					height : refHeight2,					marginRight : -refWidth + 160				});				setShadow(mirror.$templateDiv);			}			this.$place.parent().css({				height : refHeight			});			this.$api.css({				height : refHeight - CodeMatrix.meta.toolbarHeight			});			var left = (refWidth - this.$runModal.width()) / 2;			this.$runModal.css({				left : left			});			this.api.onResize();		},		hideConsoleRelative : function() {			this.$console.hide();			this.$templateBtn.hide();			this.$testBtn.hide();		},		showConsoleRelative : function() {			this.$console.show();			this.$templateBtn.show();			this.$testBtn.show();		},		setMatrix : function(matrixData, questionId) { // 对外API：设置题目			this.hideMask();			this.toggleIntentBtn();			this.questionId = questionId;			this.currMirrorId = -1;			this.mirrors.length = 0;			this.$tab.children('li').remove();			this.$mirror.empty();			this.options.items = matrixData.items = matrixData.items || [];			this.clearConsole();			var console = this.options.console = matrixData.console || false;			if (console) {				this.showConsoleRelative();			} else {				this.hideConsoleRelative();			}			this.generateTestSuit(matrixData.samples || 0); // 创建运行模板			this.parseItems();			this.mirrors[this.getCurrMirrorId()].cm.focus();		},		generateTestSuit : function(samples) {			var $testSuit = this.$runModal.children('.test-suit');			$testSuit.empty();			if (samples) {				$testSuit.show();				var items = [];				if (samples == 1) {					items							.push('<button class="btn btn-default run-sample-btn" data-index=0><span class="glyphicon glyphicon-play-circle"></span> 运行样例 </button>')				} else {					for ( var i = 0; i < samples; i++) {						items.push('<button class="btn btn-default run-sample-btn" data-index=' + i								+ '><span class="glyphicon glyphicon-play-circle"></span> 运行样例 ' + (i + 1)								+ '</button>')					}				}				$testSuit.html(items.join(''));			} else {				$testSuit.hide();			}		},		hide : function() {			this.$wrapper.hide();		},		show : function() {			this.$wrapper.show();		},		getEles : function() {			var eles = {};			eles.$toolbar = this.$toolbar;			eles.$templateBtn = this.$templateBtn;			eles.$testBtn = this.$testBtn;			eles.$intentBtn = this.$intentBtn;			eles.$apiBtn = this.$apiBtn;			eles.$mirror = this.$mirror;			eles.$fullBtn = this.$fullBtn;			eles.$helpBtnGroup = this.$helpBtnGroup;			eles.desc = {				'toolbar' : '工具栏',				'templateBtn' : '查看文件初始内容',				'intentBtn' : '格式化',				'apiBtn' : '常用API查找',				'testBtn' : '运行样例',				'fullBtn' : '全屏',				'helpBtnGroup' : '功能按钮组'			};			return eles;		},		getAnswer : function() {// 对外API：获取答案			var _this = this;			var ans = [];			var items = this.options.items;			for ( var i = 0; i < items.length; i++) {				ans.push({					filename : items[i].filename,					content : _this.mirrors[i].cm.getDoc().getValue()				});			}			return ans;		},		hasAnswer : function() {			var hasAnswer = false;			for ( var i = 0; i < this.mirrors.length; i++) {				var mirror = this.mirrors[i];				if (!mirror.tmp) {					if ($.trim(mirror.cm.getValue()) != '') {						return true;					}				} else if ($.trim(mirror.cm.getValue()) != $.trim(mirror.tmp.getValue())) {					return true;				}			}			return false;		},		clearConsole : function() {			this.console.out.setValue('');		},		clearCurrConsole : function() {			this.currConsole.getDoc().setValue('');		},		setConsoleOut : function(content) {			this.console.out.getDoc().setValue(content);		},		addMask : function() {			this._maskLock = true;			this.$mask.removeClass('back-modal-black').addClass('back-modal-white');			if (this.$mask.is(':visible')) {				this.$runModal.hide();			} else {				this.$mask.fadeIn();			}		},		hideMask : function() {			this._maskLock = false;			this.hideRunModal();		},		showRunModal : function() {			this.$mask.removeClass('back-modal-white').addClass('back-modal-black').fadeIn();			this.$runModal.show();			if ($.placeholder && $.placeholder.shim) {				$.placeholder.shim({					selector : '#cm-arguments'				});			}		},		hideRunModal : function() {			this.$mask.fadeOut();			this.$runModal.hide();		},		runTestBySampleId : function(sampleId) {			var _this = this;			var result = false;			this.runTestReq = $.examAjax({				url : root + '/exam/runTestBySampleId/' + _this.questionId + '/' + sampleId,				type : 'post',				data : JSON.stringify(_this.getAnswer()),				contentType : 'application/json',				beforeSend : function() {					_this.hideRunModal();					_this.addAbortBtn();					_this.setConsoleOut('请求中');					_this.$testBtn.html('请求中').attr('disabled', 'disabled');				},				success : function(data) {					if (data.code == 0) {						var info = data.data;						result = true;						toggleConsole(_this, 1);						if (info && info.errorCode == 0) {							_this.setConsoleOut((info.out || '') + (info.err || ''));						} else {							_this.setConsoleOut(info.errorDesc);						}					}				},				error : function(e) {				},				complete : function() {					_this.runTestReq = null;					_this.delAbortBtn();					_this.$testBtn.html(CodeMatrix.meta.testBtnTemplate).removeAttr('disabled');					if (!result) {						toggleConsole(_this, 1);						_this.setConsoleOut('请求失败');					}				}			}, true);		},		runTestByArg : function(args) {			var _this = this;			var result = false;			this.runTestReq = $.examAjax({				url : root + '/exam/runTestByArg/' + _this.questionId + '?arg=' + encodeURIComponent(args),				type : 'post',				data : JSON.stringify(_this.getAnswer()),				contentType : 'application/json',				beforeSend : function() {					_this.hideRunModal();					_this.addAbortBtn();					_this.setConsoleOut('请求中');					_this.$testBtn.html('请求中').attr('disabled', 'disabled');				},				success : function(data) {					if (data.code == 0) {						var info = data.data;						result = true;						toggleConsole(_this, 1);						if (info && info.errorCode == 0) {							_this.setConsoleOut((info.out || '') + (info.err || ''));						} else {							_this.setConsoleOut(info.errorDesc);						}					}				},				error : function(e) {				},				complete : function() {					_this.runTestReq = null;					_this.delAbortBtn();					_this.$testBtn.html(CodeMatrix.meta.testBtnTemplate).removeAttr('disabled');					if (!result) {						toggleConsole(_this, 1);						_this.setConsoleOut('请求失败');					}				}			}, true);		}	};	function CodeAPI(belongCodeMatrix) {		this.init(belongCodeMatrix);	}	CodeAPI.prototype = {		constructor : CodeAPI,		$pane : null, // 整个区域		$toggleBtn : null, // 展开，收起		$actionBar : null, // 导航栏		$navBtn : null, // 返回按钮		_navBtnAction : null, // 返回按钮点击触发点		$navTitle : null,		$tabContent : null, // 内容显示区域		_$tabHost : {},		_data_class_list : [],		_mode : null,		_meta : {			actionbarHeight : 46		},		_belongCodeMatrix : null,		init : function(belongCodeMatrix) {			var _this = this;			this._belongCodeMatrix = belongCodeMatrix;			this.createPane();			this.bindEvent();		},		reset : function() {			if (isAPIPaneExpand(this)) {				this._$tabHost['clazz_list'].$btn.trigger('click');			}			this._navBtnAction = null;			this.$searchInput.val('');			this._data_class_list.length = 0;		},		setMode : function(mode) {			this._mode = mode;			var MODE = CodeMatrix.modemapping[mode];			if (MODE) {				this.reset();				this._belongCodeMatrix.$apiBtn.show();				this.$toggleBtn.show();				this.getClassNames();				// this.getClassNames();			} else {				this._belongCodeMatrix.$apiBtn.hide();				this.$toggleBtn.hide();			}		},		bindEvent : function() {			var _this = this;			/** 展开 */			this.$toggleBtn.on({				click : function() {					toggleAPIPane(_this);				},				mouseenter : function() {					if (!isAPIPaneExpand(_this)) {						$(this).stop().animate({							left : '-40px'						}, 100);					}				},				mouseout : function() {					if (!isAPIPaneExpand(_this)) {						$(this).stop().animate({							left : '-30px'						}, 100);					}				}			});			/** 点击class */			this.$tabContent.on('click', '.item-class', function() {				var _class = $(this).text();				_this.getByClassName(_class);				_this._$tabHost['clazz_desc'].$btn.trigger('click');			});			/** 点击搜索结果列表 */			this.$tabContent.on('click', '.item-result a', function() {				var $item = $(this).closest('.item-result');				var reqData = $item.data('req');				_this.getDescription(reqData, $item, _this._$tabHost['search_result'].$btn);			});			/** 点击类概述列表 */			this.$tabContent.on('click', '.item-property a', function() {				var $item = $(this).closest('.item-property');				var reqData = $item.data('req');				_this.getDescription(reqData, $item, _this._$tabHost['clazz_desc'].$btn);			});			this.$actionBar.find('a[data-toggle="tab"]').on('shown.bs.tab', function(e) {				var $target = $(e.target);				var relatedTarget = $(e.relatedTarger);				if ($(this).attr('href') == '#codematrix_api_clazz_list') {					_this.$navBtn.hide();					_this.$navTitle.fadeIn();				} else {					_this.$navTitle.hide();					_this.$navBtn.fadeIn();				}				switch ($target.attr('href')) {				case '#codematrix_api_clazz_desc':				case '#codematrix_api_search_result':					_this._navBtnAction = _this._$tabHost['clazz_list'].$btn;					break;				}			});			this.$navBtn.click(function() {				if (_this._navBtnAction) {					_this._navBtnAction.trigger('click');				}			});			this.$actionBar.on('click', 'button.api-search-btn', function() {				var $this = $(this);				var key = $.trim(_this.$searchInput.val());				if (key && key != '') {					if (key.length < 2) {						$this.attr('disabled', 'disabled');						_this.$searchInput.css({							color : '#BD3B3E'						});						_this.$searchInput.val('关键字至少有2位');						setTimeout(function() {							_this.$searchInput.val(key);							$this.removeAttr('disabled');							_this.$searchInput.css({								color : '#FFF'							});						}, 500);					} else {						_this.getByName(key, $this);					}				}				return false;			});		},		onResize : function() { // 对外API			var _this = this;			this.$tabContent.children('.tab-pane').css({				height : this.$pane.height() - _this._meta.actionbarHeight - 2			});		},		createPane : function() {			this.$pane = $('<div>').css({				borderRight : '1px solid #DDD',				boxShadow : 'inset 0 0 32px 16px rgba(0, 0, 0, 0.15)',				width : CodeMatrix.meta.minWidth,				marginRight : -CodeMatrix.meta.minWidth,				position : 'absolute',				right : 0,				zIndex : 11			});			var items = [];			items.push('<div class="actionbar" style="background:#252428; border-bottom: 1px solid #000;height:'					+ this._meta.actionbarHeight + 'px;padding:5px">');			items.push('<span class="title" style="color:#428BCA;line-height:36px;margin-left:20px;">常用类列表</span>');			items.push('<button type="button" class="btn btn-link nav-btn">');			items.push('<span class="glyphicon glyphicon-chevron-left"></span> 返回');			items.push('</button>');			items.push('<a href="#codematrix_api_clazz_list" data-toggle="tab"></a>')			items.push('<a href="#codematrix_api_search_result" data-toggle="tab"></a>')			items.push('<a href="#codematrix_api_clazz_desc" data-toggle="tab"></a>')			items.push('<a href="#codematrix_api_detail" data-toggle="tab"></a>')			items.push('<form class="pull-right" style="width:280px;height:40px;" >');			items					.push('<input type="text" class="form-control pull-left api-search-input" style="width:180px;background:#2E2E33;color:#fff;" placeholder="常用类的方法、属性">');			items.push('<button class="btn btn-default api-search-btn" style="margin-left:10px;">搜索</button>');			items.push('</form>');			items.push('</div>'); // end of actionbar			items.push('<div class="tab-content" style="background:#3E3D45;">');			items.push('<div class="tab-pane active" id="codematrix_api_clazz_list"></div>');			items.push('<div class="tab-pane" id="codematrix_api_search_result"></div>');			items.push('<div class="tab-pane" id="codematrix_api_clazz_desc"></div>');			items.push('<div class="tab-pane" id="codematrix_api_detail"></div>');			items.push('</div>'); // end of content			items					.push('<div class="btn btn-link btn-lg toggle-btn glyphicon glyphicon-chevron-left" style="text-decoration:none;position:absolute;left:-30px;top:100px;z-index:10;">');			items.push('</div>'); // end of togglebtn			this.$pane.html(items.join(''));			this.$toggleBtn = this.$pane.children('.toggle-btn');			this.$actionBar = this.$pane.children('.actionbar');			this.$navBtn = this.$actionBar.children('.nav-btn').hide();			this.$navTitle = this.$actionBar.children('.title');			this.$tabContent = this.$pane.children('.tab-content');			this.$tabContent.css({				overflow : 'scroll'			});			this.$searchInput = this.$actionBar.find('.api-search-input');			this.$searchBtn = this.$actionBar.find('.api-search-btn');			this._$tabHost['clazz_list'] = {				$btn : this.$actionBar.children('a[href="#codematrix_api_clazz_list"]'),				$content : this.$tabContent.children('div#codematrix_api_clazz_list')			};			this._$tabHost['search_result'] = {				$btn : this.$actionBar.children('a[href="#codematrix_api_search_result"]'),				$content : this.$tabContent.children('div#codematrix_api_search_result')			};			this._$tabHost['clazz_desc'] = {				$btn : this.$actionBar.children('a[href="#codematrix_api_clazz_desc"]'),				$content : this.$tabContent.children('div#codematrix_api_clazz_desc')			};			this._$tabHost['detail'] = {				$btn : this.$actionBar.children('a[href="#codematrix_api_detail"]'),				$content : this.$tabContent.children('div#codematrix_api_detail')			};		},		renderClasses : function() {			var $content = this._$tabHost['clazz_list'].$content;			var items = [];			for ( var i = 0; i < this._data_class_list.length; i++) {				var data = this._data_class_list[i];				items.push('<div class="item-class">')				items.push(data.replace(/</g, '&lt;').replace(/>/g, '&gt;'));				items.push('</div>');			}			$content.html(items.join(''));		},		wrapHighlight : function(str, key) {			var items = [];			var index1 = str.toUpperCase().indexOf(key.toUpperCase());			items.push(str.substring(0, index1));			items.push('<span class="highlight">');			items.push(str.substring(index1, index1 + key.length));			items.push('</span>');			items.push(str.substring(index1 + key.length));			return items.join('');		},		getResultTmpl : function(reqData, key) {			var items = [];			var sig = reqData.signature;			items.push('<div class="item-result" data-req=\'');			items.push(JSON.stringify(reqData));			items.push('\'>')			items.push('<span class="belong-class" style="padding: 5px; margin-right:5px;">')			items.push(reqData.className);			items.push('</span>')			if (reqData.type == 0) {				var sigPart1 = sig.substring(0, sig.lastIndexOf(' '));				var sigPart2 = sig.substring(sig.lastIndexOf(' '));				items.push(sigPart1);				items.push('<a>');				items.push(this.wrapHighlight(sigPart2, key));				items.push('</a>');			} else {				var index2 = sig.indexOf('(');				var index1 = this.getLastLetterBeforeBrace(sig, index2);				var index0 = sig.lastIndexOf(' ', index1);				var sigPart1 = sig.substring(0, index0);				var sigPart2 = sig.substring(index0, index1 + 1);				var sigPart3 = sig.substring(index1 + 1);				items.push(sigPart1);				items.push('<a>');				items.push(this.wrapHighlight(sigPart2, key));				items.push('</a>');				items.push(sigPart3);			}			items.push('</div>');			return items.join('');		},		getLastLetterBeforeBrace : function(str, braceIndex) {			while (/\s/.test(str.charAt(--braceIndex)) && braceIndex > 0);			return braceIndex;		},		getPropertyTmpl : function(reqData) {			var items = [];			var sig = reqData.signature;			items.push('<div class="item-property" data-req=\'');			items.push(JSON.stringify(reqData));			items.push('\'>')			if (reqData.type == 0) {				var sigPart1 = sig.substring(0, sig.lastIndexOf(' '));				var sigPart2 = sig.substring(sig.lastIndexOf(' '));				items.push(sigPart1);				items.push('<a>');				items.push(sigPart2);				items.push('</a>');			} else {				var index2 = sig.indexOf('(');				var index1 = this.getLastLetterBeforeBrace(sig, index2);				var index0 = sig.lastIndexOf(' ', index1);				var sigPart1 = sig.substring(0, index0);				var sigPart2 = sig.substring(index0, index1 + 1);				var sigPart3 = sig.substring(index1 + 1);				items.push(sigPart1);				items.push('<a>');				items.push(sigPart2);				items.push('</a>');				items.push(sigPart3);			}			items.push('</div>');			return items.join('');		},		emptyContent : function(name) {			this._$tabHost[name].$content.empty();		},		renderClassDesc : function(className, data, alert) {			var $content = this._$tabHost['clazz_desc'].$content;			var items = [];			items.push('<div class="class-name">');			items.push(className);			if (typeof data == 'object') {				items.push('</div>');				if (data.fields && data.fields.length > 0) {					items.push('<div class="block-list">')					items.push('<p class="item-title">属性（Field）概览</p>');					for ( var i = 0; i < data.fields.length; i++) {						var _data = data.fields[i];						_data.type = 0; // 属性						items.push(this.getPropertyTmpl(_data));					}					items.push('</div>');				}				if (data.constructors && data.constructors.length > 0) {					items.push('<div class="block-list">')					items.push('<p class="item-title">构造器（Constructor）概览</p>');					for ( var i = 0; i < data.constructors.length; i++) {						var _data = data.constructors[i];						_data.type = 1; // 构造器						items.push(this.getPropertyTmpl(_data));					}					items.push('</div>');				}				if (data.methods && data.methods.length > 0) {					items.push('<div class="block-list">')					items.push('<p class="item-title">方法（Method）概览</p>');					for ( var i = 0; i < data.methods.length; i++) {						var _data = data.methods[i];						_data.type = 2; // 方法						items.push(this.getPropertyTmpl(_data));					}					items.push('</div>');				}			} else {				if (alert) {					items.push('<span style="padding-left:20px; color:#BD3B3E;font-size:12px;">' + data + '<span>');				} else {					items.push('<span style="padding-left:20px; color:#ACACAE;font-size:12px;">' + data + '<span>');				}				items.push('</div>');			}			$content.html(items.join(''));		},		renderSearchResult : function(key, data) {			var fields = data.fields || [];			var cons = data.constructors || [];			var methods = data.methods || [];			var resultCount = fields.length + cons.length + methods.length;			var $content = this._$tabHost['search_result'].$content;			this._$tabHost['search_result'].$btn.trigger('click');			$content.html('');			var items = [];			items.push('<div class="class-name">');			items.push(key + ' 的搜索结果（ ' + resultCount + '个 ）： ');			items.push('</div>')			if (fields.length > 0) {				items.push('<div class="block-list">')				items.push('<p class="item-title">属性（Field）概览</p>');				for ( var i = 0; i < fields.length; i++) {					var _data = data.fields[i];					_data.type = 0;					items.push(this.getResultTmpl(_data, key));				}				items.push('</div>');			}			if (cons.length > 0) {				items.push('<div class="block-list">')				items.push('<p class="item-title">构造器（Constructor）概览</p>');				for ( var i = 0; i < cons.length; i++) {					var _data = cons[i];					_data.type = 1;					items.push(this.getResultTmpl(_data, key));				}				items.push('</div>');			}			if (methods.length > 0) {				items.push('<div class="block-list">')				items.push('<p class="item-title">方法（Method）概览</p>');				for ( var i = 0; i < methods.length; i++) {					var _data = methods[i];					_data.type = 2;					items.push(this.getResultTmpl(_data, key));				}				items.push('</div>');			}			$content.html(items.join(''));		},		renderDetail : function(data, navBtnAction) {			var $content = this._$tabHost['detail'].$content;			this._$tabHost['detail'].$btn.trigger('click');			this._navBtnAction = navBtnAction;			var items = [];			items.push('<div style="text-align:right;padding:10px;">');			items.push('<span class="belong-class">')			items.push(data.className);			items.push('</span>')			items.push('</div>');			items.push('<div class="item-title">');			items.push(data.name);			items.push('</div>');			items.push('<div class="item-desc">');			items.push('<p>');			items.push(data.signature);			items.push('</p>');			items.push(data.desc);			items.push('</div>');			$content.html(items.join(''));		},		getByName : function(key, $btn) {			var _this = this;			var success = false;			$.ajax({				url : root + '/document/' + _this._mode + '/getByName',				type : 'get',				data : {					name : key				},				beforeSend : function() {					if ($btn) {						$btn.attr('disabled', 'disabled').text('搜索中...');					}				},				success : function(data) {					if (data && data.code == 0) {						if (data.data) {							success = true;							_this.renderSearchResult(key, data.data);						}					}				},				complete : function() {					if (!success) {						if ($btn) {							$btn.text('查无结果')							setTimeout(function() {								$btn.removeAttr('disabled').text('搜索');							}, 1000);						}					} else {						$btn.removeAttr('disabled').text('搜索');					}				}			});		},		getByClassName : function(className) {			var _this = this;			var success = false;			$.ajax({				url : root + '/document/' + _this._mode + '/getByClassName',				type : 'get',				data : {					className : className				},				beforeSend : function() {					_this.renderClassDesc(className, '加载中...');				},				success : function(data) {					if (data && data.code == 0) {						if (data.data) {							success = true;							_this.renderClassDesc(className, data.data);						}					}				},				complete : function() {					if (!success) {						_this.renderClassDesc(className, '获取信息失败', true);					}				}			});		},		getClassNames : function() {			var _this = this;			var success = false;			$.ajax({				url : root + '/document/' + _this._mode + '/getClassNames',				type : 'get',				beforeSend : function() {				},				success : function(data) {					if (data && data.code == 0) {						if (data.data) {							success = true;							_this._data_class_list = data.data || [];							_this.renderClasses();						}					}				},				complete : function() {					if (!success) {					}				}			});		},		getDescription : function(_data, $item, navBtnAction) {			var _this = this;			var success = false;			$.ajax({				url : root + '/document/' + _this._mode + '/getDescription',				type : 'post',				data : {					className : _data.className,					type : _data.type,					signature : _data.signature				},				beforeSend : function() {				},				success : function(data) {					if (data && data.code == 0) {						if (data.data) {							success = true;							_data.desc = data.data							_this.renderDetail(_data, navBtnAction);						}					}				},				complete : function() {					if (!success) {						var pre = $item.html();						$item.css({							color : '#BD3B3E'						}).html('获取信息失败');						setTimeout(function() {							$item.css({								color : '#ACACAE'							}).html(pre);						}, 500);					}				}			});		}	};	CodeMatrix.version = "0.1";	return CodeMatrix;})();
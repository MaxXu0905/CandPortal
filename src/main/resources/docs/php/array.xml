<?xml version="1.0" encoding="UTF-8"?>
<Root name="array">
    <methods>
        <method>
            <name>array_change_key_case</name>
            <signature><![CDATA[array array_change_key_case ( array input [, int case])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8065" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_change_key_case</B
> ( array input [, int case])<BR  ></BR
><P  >     <B  CLASS="function" >array_change_key_case()</B
> 将 <TT  CLASS="parameter" ><I  >input</I
></TT
>
     数组中的所有键名改为全小写或大写。改变是根据后一个选项 <TT  CLASS="parameter" ><I  >case</I
></TT
>
     参数来进行的。可以在这里用两个常量，<TT  CLASS="constant" ><B  >CASE_UPPER</B
></TT
> 和
     <TT  CLASS="constant" ><B  >CASE_LOWER</B
></TT
>。默认值是
     <TT  CLASS="constant" ><B  >CASE_LOWER</B
></TT
>。本函数不改变数字索引。
    </P
><TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8083" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_change_key_case()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$input_array </font><font  color="#007700">= array(</font><font  color="#DD0000">"FirSt" </font><font  color="#007700">=> </font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#DD0000">"SecOnd" </font><font  color="#007700">=> </font><font  color="#0000BB">4</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">array_change_key_case</font><font  color="#007700">(</font><font  color="#0000BB">$input_array</font><font  color="#007700">, </font><font  color="#0000BB">CASE_UPPER</font><font  color="#007700">));<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >      以上程序显示结果为：
     </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
(
    [FIRST] => 1
    [SECOND] => 4
)</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
><P  >     如果一个数组中的多个键名经过本函数后变成一样的话（例如
     "keY" 和 "kEY"），最后一个值将覆盖其它的值。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_chunk</name>
            <signature><![CDATA[array array_chunk ( array input, int size [, bool preserve_keys])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8094" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_chunk</B
> ( array input, int size [, bool preserve_keys])<BR  ></BR
><P  >     <B  CLASS="function" >array_chunk()</B
> 将一个数组分割成多个数组，其中每个数组的单元数目由
     <TT  CLASS="parameter" ><I  >size</I
></TT
> 决定。最后一个数组的单元数目可能会少几个。得到的数组是一个多维数组中的单元，其索引从零开始。
    </P
><P  >     将可选参数 <TT  CLASS="parameter" ><I  >preserve_keys</I
></TT
> 设为 <TT  CLASS="constant" ><B  >TRUE</B
></TT
>，可以使 PHP
     保留输入数组中原来的键名。如果你指定了 <TT  CLASS="constant" ><B  >FALSE</B
></TT
>，那每个结果数组将用从零开始的新数字索引。默认值是 <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。
    </P
><TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8116" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_chunk()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$input_array </font><font  color="#007700">= array(</font><font  color="#DD0000">'a'</font><font  color="#007700">, </font><font  color="#DD0000">'b'</font><font  color="#007700">, </font><font  color="#DD0000">'c'</font><font  color="#007700">, </font><font  color="#DD0000">'d'</font><font  color="#007700">, </font><font  color="#DD0000">'e'</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">array_chunk</font><font  color="#007700">(</font><font  color="#0000BB">$input_array</font><font  color="#007700">, </font><font  color="#0000BB">2</font><font  color="#007700">));<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">array_chunk</font><font  color="#007700">(</font><font  color="#0000BB">$input_array</font><font  color="#007700">, </font><font  color="#0000BB">2</font><font  color="#007700">, </font><font  color="#0000BB">TRUE</font><font  color="#007700">));<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >      以上程序输出为：
     </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
(
    [0] => Array
        (
            [0] => a
            [1] => b
        )

    [1] => Array
        (
            [0] => c
            [1] => d
        )

    [2] => Array
        (
            [0] => e
        )

)
Array
(
    [0] => Array
        (
            [0] => a
            [1] => b
        )

    [1] => Array
        (
            [2] => c
            [3] => d
        )

    [2] => Array
        (
            [4] => e
        )

)</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
></DIV
>]]></description>
        </method>
        <method>
            <name>array_combine</name>
            <signature><![CDATA[array array_combine ( array keys, array values)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8126" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_combine</B
> ( array keys, array values)<BR  ></BR
><P  >     返回一个 <SPAN HREF="#"><B  CLASS="type" >array</B
></A
>，用来自
     <TT  CLASS="parameter" ><I  >keys</I
></TT
> 数组的值作为键名，来自
     <TT  CLASS="parameter" ><I  >values</I
></TT
> 数组的值作为相应的值。
    </P
><P  >     如果两个数组的单元数不同或者数组为空时返回 <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8144" ></A
><P  ><B  >例子 1. 简单的 <B  CLASS="function" >array_combine()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$a </font><font  color="#007700">= array(</font><font  color="#DD0000">'green'</font><font  color="#007700">,</font><font  color="#DD0000">'red'</font><font  color="#007700">,</font><font  color="#DD0000">'yellow'</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$b </font><font  color="#007700">= array(</font><font  color="#DD0000">'avocado'</font><font  color="#007700">,</font><font  color="#DD0000">'apple'</font><font  color="#007700">,</font><font  color="#DD0000">'banana'</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$c </font><font  color="#007700">= </font><font  color="#0000BB">array_combine</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">);<br  /><br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$c</font><font  color="#007700">);<br  /><br  /></font><font  color="#FF8000">/* Outputs:<br  />Array<br  />(<br  />    [green]  => avocado<br  />    [red]    => apple<br  />    [yellow] => banana<br  />)<br  />*/<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_merge()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_walk()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >array_values()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_count_values</name>
            <signature><![CDATA[array array_count_values ( array input)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8156" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_count_values</B
> ( array input)<BR  ></BR
><P  >     <B  CLASS="function" >array_count_values()</B
> 返回一个数组，该数组用 <TT  CLASS="parameter" ><I  >input</I
></TT
>
     数组中的值作为键名，该值在 <TT  CLASS="parameter" ><I  >input</I
></TT
> 数组中出现的次数作为值。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8169" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_count_values()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$array </font><font  color="#007700">= array (</font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#DD0000">"hello"</font><font  color="#007700">, </font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#DD0000">"world"</font><font  color="#007700">, </font><font  color="#DD0000">"hello"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">array_count_values </font><font  color="#007700">(</font><font  color="#0000BB">$array</font><font  color="#007700">));<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       以上程序输出为：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
(
    [1] => 2
    [hello] => 2
    [world] => 1
)</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >count()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_unique()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_values()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >count_chars()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_diff_assoc</name>
            <signature><![CDATA[array array_diff_assoc ( array array1, array array2 [, array ...])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8184" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_diff_assoc</B
> ( array array1, array array2 [, array ...])<BR  ></BR
><P  >     <B  CLASS="function" >array_diff_assoc()</B
> 返回一个
     <SPAN HREF="#"><B  CLASS="type" >array</B
></A
>，返回一个数组，该数组包括了所有在
     <TT  CLASS="parameter" ><I  >array1</I
></TT
> 中但是不在任何其它参数数组中的值。注意和
     <SPAN HREF="#"><B  CLASS="function" >array_diff()</B
></A
> 不同的是键名也用于比较。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8204" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_diff_assoc()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$array1 </font><font  color="#007700">= array (</font><font  color="#DD0000">"a" </font><font  color="#007700">=> </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"b" </font><font  color="#007700">=> </font><font  color="#DD0000">"brown"</font><font  color="#007700">, </font><font  color="#DD0000">"c" </font><font  color="#007700">=> </font><font  color="#DD0000">"blue"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$array2 </font><font  color="#007700">= array (</font><font  color="#DD0000">"a" </font><font  color="#007700">=> </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"yellow"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_diff_assoc</font><font  color="#007700">(</font><font  color="#0000BB">$array1</font><font  color="#007700">, </font><font  color="#0000BB">$array2</font><font  color="#007700">);<br  /><br  /></font><font  color="#FF8000">/* The result is:<br  />Array<br  />(<br  />    [b] => brown<br  />    [c] => blue<br  />    [0] => red<br  />)<br  />*/<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     上面的例子中可以看到键值对 <TT  CLASS="literal" >"a" => "green"</TT
>
     在两个数组中都有，因此不在本函数的输出中。与此不同，键值对
     <TT  CLASS="literal" >0 => "red"</TT
> 出现在输出中是因为第二个参数中的
     <TT  CLASS="literal" >"red"</TT
> 的键名是 <TT  CLASS="literal" >1</TT
>。
    </P
><P  >     键值对 <SPAN  CLASS="emphasis" ><I  CLASS="emphasis" >key => value</I
></SPAN
>
     中的两个值仅在 <TT  CLASS="literal" >(string) $elem1 === (string)
     $elem2 </TT
> 时被认为相等。也就是说使用了严格检查，字符串的表达必须相同。
     
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      注意此函数仅检查多维数组中的一维。当然你可以用
      <TT  CLASS="literal" >array_diff_assoc($array1[0], $array2[0]);</TT
>
      检查更深的维度。
     </P
></BLOCKQUOTE
></DIV
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_diff()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_intersect()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >array_intersect_assoc()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_diff_uassoc</name>
            <signature><![CDATA[array array_diff_assoc ( array array1, array array2 [, array ..., callback key_compare_func])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8227" ></A
><H2  >Description</H2
>array <B  CLASS="methodname" >array_diff_assoc</B
> ( array array1, array array2 [, array ..., callback key_compare_func])<BR  ></BR
><P  >     <B  CLASS="function" >array_diff_uassoc()</B
> returns an <SPAN HREF="#"><B  CLASS="type" >array</B
></A
>
     containing all the values from <TT  CLASS="parameter" ><I  >array1</I
></TT
>
     that are not present in any of the other arguments.
     Note that the keys are used in the comparison unlike
     <SPAN HREF="#"><B  CLASS="function" >array_diff()</B
></A
>. This comparison is done by a user supplied callback function.
     It must return an integer less than, equal
     to, or greater than zero if the first argument is considered to
     be respectively less than, equal to, or greater than the
     second. This is unlike <SPAN HREF="#"><B  CLASS="function" >array_diff_assoc()</B
></A
> where an
     internal function for comparing the indices is used.
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8251" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_diff_uassoc()</B
> example</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /></font><font  color="#007700">function </font><font  color="#0000BB">key_compare_func</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">) <br  />{<br  />    if (</font><font  color="#0000BB">$a </font><font  color="#007700">=== </font><font  color="#0000BB">$b</font><font  color="#007700">) {<br  />        return </font><font  color="#0000BB">0</font><font  color="#007700">;<br  />    }<br  />    return (</font><font  color="#0000BB">$a </font><font  color="#007700">> </font><font  color="#0000BB">$b</font><font  color="#007700">)? </font><font  color="#0000BB">1</font><font  color="#007700">:-</font><font  color="#0000BB">1</font><font  color="#007700">;<br  />}<br  /><br  /></font><font  color="#0000BB">$array1 </font><font  color="#007700">= array(</font><font  color="#DD0000">"a" </font><font  color="#007700">=> </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"b" </font><font  color="#007700">=> </font><font  color="#DD0000">"brown"</font><font  color="#007700">, </font><font  color="#DD0000">"c" </font><font  color="#007700">=> </font><font  color="#DD0000">"blue"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$array2 </font><font  color="#007700">= array(</font><font  color="#DD0000">"a" </font><font  color="#007700">=> </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"yellow"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_diff_uassoc</font><font  color="#007700">(</font><font  color="#0000BB">$array1</font><font  color="#007700">, </font><font  color="#0000BB">$array2</font><font  color="#007700">, </font><font  color="#DD0000">"key_compare_func"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       The result is:
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
(
    [b] => brown
    [c] => blue
    [0] => red
)</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     In our example above you see the <TT  CLASS="literal" >"a" => "green"</TT
>
     pair is present in both arrays and thus it is not in the ouput from the
     function. Unlike this, the pair <TT  CLASS="literal" >0 => "red"</TT
>
     is in the ouput because in the second argument <TT  CLASS="literal" >"red"</TT
>
     has key which is <TT  CLASS="literal" >1</TT
>.
    </P
><P  >     The equality of 2 indices is checked by the user supplied callback function.
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      Please note that this function only checks one dimension of a n-dimensional
      array. Of course you can check deeper dimensions by using, for example,
      <TT  CLASS="literal" >array_diff_uassoc($array1[0], $array2[0], "key_compare_func");</TT
>.
     </P
></BLOCKQUOTE
></DIV
><P  >     See also
     <SPAN HREF="#"><B  CLASS="function" >array_diff()</B
></A
>,
     <SPAN HREF="#"><B  CLASS="function" >array_diff_assoc()</B
></A
>,
     <SPAN HREF="#"><B  CLASS="function" >array_udiff()</B
></A
>,
     <SPAN HREF="#"><B  CLASS="function" >array_udiff_assoc()</B
></A
>, 
     <SPAN HREF="#"><B  CLASS="function" >array_udiff_uassoc()</B
></A
>, 
     <SPAN HREF="#"><B  CLASS="function" >array_intersect()</B
></A
>,  
     <SPAN HREF="#"><B  CLASS="function" >array_intersect_assoc()</B
></A
>,
     <B  CLASS="function" >array_uintersect()</B
>,  
     <B  CLASS="function" >array_uintersect_assoc()</B
> and 
     <B  CLASS="function" >array_uintersect_uassoc()</B
>.
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_diff</name>
            <signature><![CDATA[array array_diff ( array array1, array array2 [, array ...])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8281" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_diff</B
> ( array array1, array array2 [, array ...])<BR  ></BR
><P  >     <B  CLASS="function" >array_diff()</B
> 返回一个数组，该数组包括了所有在
     <TT  CLASS="parameter" ><I  >array1</I
></TT
> 中但是不在任何其它参数数组中的值。注意键名保留不变。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8299" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_diff()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$array1 </font><font  color="#007700">= array (</font><font  color="#DD0000">"a" </font><font  color="#007700">=> </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">, </font><font  color="#DD0000">"blue"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$array2 </font><font  color="#007700">= array (</font><font  color="#DD0000">"b" </font><font  color="#007700">=> </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"yellow"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_diff </font><font  color="#007700">(</font><font  color="#0000BB">$array1</font><font  color="#007700">, </font><font  color="#0000BB">$array2</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     这使得 <TT  CLASS="varname" >$result</TT
> 成为
     <TT  CLASS="literal" >array (1 => "blue");</TT
>。在 $array1 中多次出现的值同样对待。
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      两个单元仅在 <TT  CLASS="literal" >(string) $elem1 === (string) $elem2</TT
>
      时被认为是相同的。也就是说，当字符串的表达是一样的时候。
      
     </P
></BLOCKQUOTE
></DIV
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      注意此函数仅检查多维数组中的一维。当然你可以用
      <TT  CLASS="literal" >array_diff($array1[0], $array2[0]);</TT
>
      检查更深的维度。
     </P
></BLOCKQUOTE
></DIV
><DIV  CLASS="warning" ><P  ></P
><TABLE  CLASS="warning" BORDER="1" WIDTH="100%" ><TR  ><TD  ALIGN="CENTER" ><B  >警告</B
></TD
></TR
><TR  ><TD  ALIGN="LEFT" ><P  >      本函数在 PHP 4.0.4 中是坏的！
      
     </P
></TD
></TR
></TABLE
></DIV
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_diff_assoc()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_intersect()</B
></A
> 和
     <SPAN HREF="#"><B  CLASS="function" >array_intersect_assoc()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_fill</name>
            <signature><![CDATA[array array_fill ( int start_index, int num, mixed value)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8322" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_fill</B
> ( int start_index, int num, mixed value)<BR  ></BR
><P  >     <B  CLASS="function" >array_fill()</B
> 用 <TT  CLASS="parameter" ><I  >value</I
></TT
>
     参数的值将一个数组填充 <TT  CLASS="parameter" ><I  >num</I
></TT
> 个条目，键名由
     <TT  CLASS="parameter" ><I  >start_index</I
></TT
> 参数指定的开始。注意
     <TT  CLASS="parameter" ><I  >num</I
></TT
> 必须是一个大于零的数值，否则
     PHP 会发出一条警告。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8343" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_fill()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$a </font><font  color="#007700">= </font><font  color="#0000BB">array_fill</font><font  color="#007700">(</font><font  color="#0000BB">5</font><font  color="#007700">, </font><font  color="#0000BB">6</font><font  color="#007700">, </font><font  color="#DD0000">'banana'</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       <TT  CLASS="varname" >$a</TT
> 现在是：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
(
    [5]  => banana
    [6]  => banana
    [7]  => banana
    [8]  => banana
    [9]  => banana
    [10] => banana
)</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >str_repeat()</B
></A
> 和 <SPAN HREF="#"><B  CLASS="function" >range()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_filter</name>
            <signature><![CDATA[array array_filter ( array input [, callback function])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8357" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_filter</B
> ( array input [, callback function])<BR  ></BR
><P  >     <B  CLASS="function" >array_filter()</B
> 依次将
     <TT  CLASS="parameter" ><I  >input</I
></TT
> 数组中的每个值传递到
     <TT  CLASS="parameter" ><I  >callback</I
></TT
> 函数。如果
     <TT  CLASS="parameter" ><I  >callback</I
></TT
> 函数返回 <TT  CLASS="constant" ><B  >TRUE</B
></TT
>，则
     <TT  CLASS="parameter" ><I  >input</I
></TT
>
     数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8376" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_filter()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /></font><font  color="#007700">function </font><font  color="#0000BB">odd</font><font  color="#007700">(</font><font  color="#0000BB">$var</font><font  color="#007700">) {<br  />    return (</font><font  color="#0000BB">$var </font><font  color="#007700">% </font><font  color="#0000BB">2 </font><font  color="#007700">== </font><font  color="#0000BB">1</font><font  color="#007700">);<br  />}<br  /><br  />function </font><font  color="#0000BB">even</font><font  color="#007700">(</font><font  color="#0000BB">$var</font><font  color="#007700">) {<br  />    return (</font><font  color="#0000BB">$var </font><font  color="#007700">% </font><font  color="#0000BB">2 </font><font  color="#007700">== </font><font  color="#0000BB">0</font><font  color="#007700">);<br  />}<br  /><br  /></font><font  color="#0000BB">$array1 </font><font  color="#007700">= array (</font><font  color="#DD0000">"a"</font><font  color="#007700">=></font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#DD0000">"b"</font><font  color="#007700">=></font><font  color="#0000BB">2</font><font  color="#007700">, </font><font  color="#DD0000">"c"</font><font  color="#007700">=></font><font  color="#0000BB">3</font><font  color="#007700">, </font><font  color="#DD0000">"d"</font><font  color="#007700">=></font><font  color="#0000BB">4</font><font  color="#007700">, </font><font  color="#DD0000">"e"</font><font  color="#007700">=></font><font  color="#0000BB">5</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$array2 </font><font  color="#007700">= array (</font><font  color="#0000BB">6</font><font  color="#007700">, </font><font  color="#0000BB">7</font><font  color="#007700">, </font><font  color="#0000BB">8</font><font  color="#007700">, </font><font  color="#0000BB">9</font><font  color="#007700">, </font><font  color="#0000BB">10</font><font  color="#007700">, </font><font  color="#0000BB">11</font><font  color="#007700">, </font><font  color="#0000BB">12</font><font  color="#007700">);<br  /><br  />echo </font><font  color="#DD0000">"Odd :\n"</font><font  color="#007700">;<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">array_filter</font><font  color="#007700">(</font><font  color="#0000BB">$array1</font><font  color="#007700">, </font><font  color="#DD0000">"odd"</font><font  color="#007700">));<br  />echo </font><font  color="#DD0000">"Even:\n"</font><font  color="#007700">;<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">array_filter</font><font  color="#007700">(</font><font  color="#0000BB">$array2</font><font  color="#007700">, </font><font  color="#DD0000">"even"</font><font  color="#007700">));<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       以上程序的输出为：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Odd :<br  />Array<br  />(<br  />    [a] => 1<br  />    [c] => 3<br  />    [e] => 5<br  />)<br  />Even:<br  />Array<br  />(<br  />    [0] => 6<br  />    [2] => 8<br  />    [4] => 10<br  />    [6] => 12<br  />)</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     用户不应在回调函数中修改数组本身。例如增加／删除单元或者对
     <B  CLASS="function" >array_filter()</B
> 正在作用的数组进行
     unset。如果数组改变了，此函数的行为没有定义。
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_map()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_reduce()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >array_walk()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_flip</name>
            <signature><![CDATA[array array_flip ( array trans)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8392" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_flip</B
> ( array trans)<BR  ></BR
><P  >     <B  CLASS="function" >array_flip()</B
> 返回一个反转后的 <SPAN HREF="#"><B  CLASS="type" >array</B
></A
>，例如
     <TT  CLASS="parameter" ><I  >trans</I
></TT
> 中的键名变成了值，而
     <TT  CLASS="parameter" ><I  >trans</I
></TT
> 中的值成了键名。
    </P
><P  >     注意 <TT  CLASS="parameter" ><I  >trans</I
></TT
> 中的值需要能够作为合法的键名，例如需要是
     <SPAN HREF="#"><B  CLASS="type" >integer</B
></A
> 或者 <SPAN HREF="#"><B  CLASS="type" >string</B
></A
>。如果值的类型不对将发出一个警告，并且有问题的键／值对<SPAN  CLASS="emphasis" ><I  CLASS="emphasis" >将不会反转</I
></SPAN
>。
    </P
><P  >     如果同一个值出现了多次，则最后一个键名将作为它的值，所有其它的都丢失了。
    </P
><P  >     <B  CLASS="function" >array_flip()</B
> 如果失败返回 <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8415" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_flip()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$trans </font><font  color="#007700">= </font><font  color="#0000BB">array_flip </font><font  color="#007700">(</font><font  color="#0000BB">$trans</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$original </font><font  color="#007700">= </font><font  color="#0000BB">strtr </font><font  color="#007700">(</font><font  color="#0000BB">$str</font><font  color="#007700">, </font><font  color="#0000BB">$trans</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8420" ></A
><P  ><B  >例子 2. <B  CLASS="function" >array_flip()</B
> 例子：冲突</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$trans </font><font  color="#007700">= array (</font><font  color="#DD0000">"a" </font><font  color="#007700">=> </font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#DD0000">"b" </font><font  color="#007700">=> </font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#DD0000">"c" </font><font  color="#007700">=> </font><font  color="#0000BB">2</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$trans </font><font  color="#007700">= </font><font  color="#0000BB">array_flip </font><font  color="#007700">(</font><font  color="#0000BB">$trans</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$trans</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       现在 <TT  CLASS="varname" >$trans</TT
> 变成了：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
(
    [1] => b
    [2] => c
)</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_values()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_keys()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >array_reverse()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_intersect_assoc</name>
            <signature><![CDATA[array array_intersect_assoc ( array array1, array array2 [, array ...])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8435" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_intersect_assoc</B
> ( array array1, array array2 [, array ...])<BR  ></BR
><P  >     <B  CLASS="function" >array_intersect_assoc()</B
> 返回一个数组，该数组包含了所有在
     <TT  CLASS="parameter" ><I  >array1</I
></TT
> 中也同时出现在所有其它参数数组中的值。注意和
     <B  CLASS="function" >array__intersect()</B
> 不同的是键名也用于比较。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8454" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_intersect_assoc()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$array1 </font><font  color="#007700">= array (</font><font  color="#DD0000">"a" </font><font  color="#007700">=> </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"b" </font><font  color="#007700">=> </font><font  color="#DD0000">"brown"</font><font  color="#007700">, </font><font  color="#DD0000">"c" </font><font  color="#007700">=> </font><font  color="#DD0000">"blue"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$array2 </font><font  color="#007700">= array (</font><font  color="#DD0000">"a" </font><font  color="#007700">=> </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"yellow"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$result_array </font><font  color="#007700">= </font><font  color="#0000BB">array_intersect_assoc</font><font  color="#007700">(</font><font  color="#0000BB">$array1</font><font  color="#007700">, </font><font  color="#0000BB">$array2</font><font  color="#007700">);<br  /><br  /></font><font  color="#FF8000">/* $result_array will look like:<br  /><br  />Array<br  />(<br  />    [a] => green<br  />)<br  /><br  />*/<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     上面例子中可以看到只有键值对 <TT  CLASS="literal" >"a" =>
     "green"</TT
> 在两个数组中都存在从而被返回。值
     <TT  CLASS="literal" >"red"</TT
> 没有被返回是因为在
     <TT  CLASS="varname" >$array1</TT
> 中它的键名是 <TT  CLASS="literal" >0</TT
>
     而在 <TT  CLASS="varname" >$array2</TT
> 中 <TT  CLASS="literal" >"red"</TT
>
     的键名是 <TT  CLASS="literal" >1</TT
>。
    </P
><P  >     键值对 <SPAN  CLASS="emphasis" ><I  CLASS="emphasis" >key => value</I
></SPAN
>
     中的两个值仅在 <TT  CLASS="literal" >(string) $elem1 === (string)
     $elem2 </TT
> 时被认为相等。也就是说使用了严格检查，字符串的表达必须相同。
     
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_intersect()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_diff()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >array_diff_assoc()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_intersect</name>
            <signature><![CDATA[array array_intersect ( array array1, array array2 [, array ...])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8477" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_intersect</B
> ( array array1, array array2 [, array ...])<BR  ></BR
><P  >     <B  CLASS="function" >array_intersect()</B
> 返回一个数组，该数组包含了所有在
     <TT  CLASS="parameter" ><I  >array1</I
></TT
> 中也同时出现在所有其它参数数组中的值。注意键名保留不变。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8495" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_intersect()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$array1 </font><font  color="#007700">= array (</font><font  color="#DD0000">"a" </font><font  color="#007700">=> </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">, </font><font  color="#DD0000">"blue"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$array2 </font><font  color="#007700">= array (</font><font  color="#DD0000">"b" </font><font  color="#007700">=> </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"yellow"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_intersect </font><font  color="#007700">(</font><font  color="#0000BB">$array1</font><font  color="#007700">, </font><font  color="#0000BB">$array2</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       这使得 <TT  CLASS="varname" >$result</TT
> 成为：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Array<br  />(<br  />    [a] => green<br  />    [0] => red<br  />)</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      两个单元仅在 <TT  CLASS="literal" >(string) $elem1 === (string) $elem2</TT
>
      时被认为是相同的。也就是说，当字符串的表达是一样的时候。
      
     </P
></BLOCKQUOTE
></DIV
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_intersect_assoc()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_diff()</B
></A
> 和
     <SPAN HREF="#"><B  CLASS="function" >array_diff_assoc()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_key_exists</name>
            <signature><![CDATA[bool array_key_exists ( mixed key, array search)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8513" ></A
><H2  >说明</H2
>bool <B  CLASS="methodname" >array_key_exists</B
> ( mixed key, array search)<BR  ></BR
><P  >     <B  CLASS="function" >array_key_exists()</B
> 在给定的 <TT  CLASS="parameter" ><I  >key</I
></TT
>
     存在于数组中时返回 <TT  CLASS="constant" ><B  >TRUE</B
></TT
>。<TT  CLASS="parameter" ><I  >key</I
></TT
>
     可以是任何能作为数组索引的值。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8530" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_key_exists()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$search_array </font><font  color="#007700">= array(</font><font  color="#DD0000">"first" </font><font  color="#007700">=> </font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#DD0000">"second" </font><font  color="#007700">=> </font><font  color="#0000BB">4</font><font  color="#007700">);<br  />if (</font><font  color="#0000BB">array_key_exists</font><font  color="#007700">(</font><font  color="#DD0000">"first"</font><font  color="#007700">, </font><font  color="#0000BB">$search_array</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"The 'first' element is in the array"</font><font  color="#007700">;<br  />}<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      在 PHP 4.0.6 中本函数名为 <B  CLASS="function" >key_exists()</B
>。
     </P
></BLOCKQUOTE
></DIV
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >isset()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_keys()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >in_array()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_keys</name>
            <signature><![CDATA[array array_keys ( array input [, mixed search_value])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8545" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_keys</B
> ( array input [, mixed search_value])<BR  ></BR
><P  >     <B  CLASS="function" >array_keys()</B
> 返回 <TT  CLASS="parameter" ><I  >input</I
></TT
>
     数组中的数字或者字符串的键名。
    </P
><P  >     如果指定了可选参数 <TT  CLASS="parameter" ><I  >search_value</I
></TT
>，则只返回该值的键名。否则
     <TT  CLASS="parameter" ><I  >input</I
></TT
> 数组中的所有键名都会被返回。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8563" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_keys()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$array </font><font  color="#007700">= array (</font><font  color="#0000BB">0 </font><font  color="#007700">=> </font><font  color="#0000BB">100</font><font  color="#007700">, </font><font  color="#DD0000">"color" </font><font  color="#007700">=> </font><font  color="#DD0000">"red"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">array_keys </font><font  color="#007700">(</font><font  color="#0000BB">$array</font><font  color="#007700">));<br  /><br  /></font><font  color="#0000BB">$array </font><font  color="#007700">= array (</font><font  color="#DD0000">"blue"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">, </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"blue"</font><font  color="#007700">, </font><font  color="#DD0000">"blue"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">array_keys </font><font  color="#007700">(</font><font  color="#0000BB">$array</font><font  color="#007700">, </font><font  color="#DD0000">"blue"</font><font  color="#007700">));<br  /><br  /></font><font  color="#0000BB">$array </font><font  color="#007700">= array (</font><font  color="#DD0000">"color" </font><font  color="#007700">=> array(</font><font  color="#DD0000">"blue"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">, </font><font  color="#DD0000">"green"</font><font  color="#007700">),<br  />                </font><font  color="#DD0000">"size" </font><font  color="#007700">=> array(</font><font  color="#DD0000">"small"</font><font  color="#007700">, </font><font  color="#DD0000">"medium"</font><font  color="#007700">, </font><font  color="#DD0000">"large"</font><font  color="#007700">));<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">array_keys </font><font  color="#007700">(</font><font  color="#0000BB">$array</font><font  color="#007700">));<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       以上程序输出为：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
(
    [0] => 0
    [1] => color
)
Array
(
    [0] => 0
    [1] => 3
    [2] => 4
)
Array
(
    [0] => color
    [1] => size
)</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_values()</B
></A
> 和 <SPAN HREF="#"><B  CLASS="function" >array_key_exists()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_map</name>
            <signature><![CDATA[array array_map ( mixed callback, array arr1 [, array ...])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8576" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_map</B
> ( mixed callback, array arr1 [, array ...])<BR  ></BR
><P  >     <B  CLASS="function" >array_map()</B
> 返回一个数组，该数组包含了
     <TT  CLASS="parameter" ><I  >arr1</I
></TT
> 中的所有单元经过
     <TT  CLASS="parameter" ><I  >callback</I
></TT
> 作用过之后的单元。<TT  CLASS="parameter" ><I  >callback</I
></TT
>
     接受的参数数目应该和传递给
     <B  CLASS="function" >array_map()</B
> 函数的数组数目一致。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8597" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_map()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /></font><font  color="#007700">function </font><font  color="#0000BB">cube</font><font  color="#007700">(</font><font  color="#0000BB">$n</font><font  color="#007700">) {<br  />    return </font><font  color="#0000BB">$n</font><font  color="#007700">*</font><font  color="#0000BB">$n</font><font  color="#007700">*</font><font  color="#0000BB">$n</font><font  color="#007700">;<br  />}<br  /><br  /></font><font  color="#0000BB">$a </font><font  color="#007700">= array(</font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#0000BB">2</font><font  color="#007700">, </font><font  color="#0000BB">3</font><font  color="#007700">, </font><font  color="#0000BB">4</font><font  color="#007700">, </font><font  color="#0000BB">5</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$b </font><font  color="#007700">= </font><font  color="#0000BB">array_map</font><font  color="#007700">(</font><font  color="#DD0000">"cube"</font><font  color="#007700">, </font><font  color="#0000BB">$a</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$b</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       这使得 <TT  CLASS="varname" >$b</TT
> 成为：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
(
    [0] => 1
    [1] => 8
    [2] => 27
    [3] => 64
    [4] => 125
)</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8605" ></A
><P  ><B  >例子 2. <B  CLASS="function" >array_map()</B
> - 使用更多的数组</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /></font><font  color="#007700">function </font><font  color="#0000BB">show_Spanish</font><font  color="#007700">(</font><font  color="#0000BB">$n</font><font  color="#007700">, </font><font  color="#0000BB">$m</font><font  color="#007700">) {<br  />    return </font><font  color="#DD0000">"The number $n is called $m in Spanish"</font><font  color="#007700">;<br  />}<br  /><br  />function </font><font  color="#0000BB">map_Spanish</font><font  color="#007700">(</font><font  color="#0000BB">$n</font><font  color="#007700">, </font><font  color="#0000BB">$m</font><font  color="#007700">) {<br  />    return array (</font><font  color="#0000BB">$n </font><font  color="#007700">=> </font><font  color="#0000BB">$m</font><font  color="#007700">);<br  />}<br  /><br  /></font><font  color="#0000BB">$a </font><font  color="#007700">= array(</font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#0000BB">2</font><font  color="#007700">, </font><font  color="#0000BB">3</font><font  color="#007700">, </font><font  color="#0000BB">4</font><font  color="#007700">, </font><font  color="#0000BB">5</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$b </font><font  color="#007700">= array(</font><font  color="#DD0000">"uno"</font><font  color="#007700">, </font><font  color="#DD0000">"dos"</font><font  color="#007700">, </font><font  color="#DD0000">"tres"</font><font  color="#007700">, </font><font  color="#DD0000">"cuatro"</font><font  color="#007700">, </font><font  color="#DD0000">"cinco"</font><font  color="#007700">);<br  /><br  /></font><font  color="#0000BB">$c </font><font  color="#007700">= </font><font  color="#0000BB">array_map</font><font  color="#007700">(</font><font  color="#DD0000">"show_Spanish"</font><font  color="#007700">, </font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$c</font><font  color="#007700">);<br  /><br  /></font><font  color="#0000BB">$d </font><font  color="#007700">= </font><font  color="#0000BB">array_map</font><font  color="#007700">(</font><font  color="#DD0000">"map_Spanish"</font><font  color="#007700">, </font><font  color="#0000BB">$a </font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$d</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       结果为：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >// printout of $c
Array
(
    [0] => The number 1 is called uno in Spanish
    [1] => The number 2 is called dos in Spanish
    [2] => The number 3 is called tres in Spanish
    [3] => The number 4 is called cuatro in Spanish
    [4] => The number 5 is called cinco in Spanish
)

// printout of $d
Array
(
    [0] => Array
        (
            [1] => uno
        )

    [1] => Array
        (
            [2] => dos
        )

    [2] => Array
        (
            [3] => tres
        )

    [3] => Array
        (
            [4] => cuatro
        )

    [4] => Array
        (
            [5] => cinco
        )

)</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     通常使用了两个或更多数组时，它们的长度应该相同，因为回调函数是平行作用于相应的单元上的。如果数组的长度不同，则最短的一个将被用空的单元扩充。
    </P
><P  >     本函数一个有趣的用法是构造一个数组的数组，这可以很容易的通过用 <TT  CLASS="constant" ><B  >NULL</B
></TT
> 作为回调函数名来实现。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8615" ></A
><P  ><B  >例子 3. 建立一个数组的数组</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$a </font><font  color="#007700">= array(</font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#0000BB">2</font><font  color="#007700">, </font><font  color="#0000BB">3</font><font  color="#007700">, </font><font  color="#0000BB">4</font><font  color="#007700">, </font><font  color="#0000BB">5</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$b </font><font  color="#007700">= array(</font><font  color="#DD0000">"one"</font><font  color="#007700">, </font><font  color="#DD0000">"two"</font><font  color="#007700">, </font><font  color="#DD0000">"three"</font><font  color="#007700">, </font><font  color="#DD0000">"four"</font><font  color="#007700">, </font><font  color="#DD0000">"five"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$c </font><font  color="#007700">= array(</font><font  color="#DD0000">"uno"</font><font  color="#007700">, </font><font  color="#DD0000">"dos"</font><font  color="#007700">, </font><font  color="#DD0000">"tres"</font><font  color="#007700">, </font><font  color="#DD0000">"cuatro"</font><font  color="#007700">, </font><font  color="#DD0000">"cinco"</font><font  color="#007700">);<br  /><br  /></font><font  color="#0000BB">$d </font><font  color="#007700">= </font><font  color="#0000BB">array_map</font><font  color="#007700">(</font><font  color="#0000BB">null</font><font  color="#007700">, </font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">, </font><font  color="#0000BB">$c</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$d</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     以上程序输出为：
    </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
(
    [0] => Array
        (
            [0] => 1
            [1] => one
            [2] => uno
        )

    [1] => Array
        (
            [0] => 2
            [1] => two
            [2] => dos
        )

    [2] => Array
        (
            [0] => 3
            [1] => three
            [2] => tres
        )

    [3] => Array
        (
            [0] => 4
            [1] => four
            [2] => cuatro
        )

    [4] => Array
        (
            [0] => 5
            [1] => five
            [2] => cinco
        )

)</PRE
></TD
></TR
></TABLE
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_filter()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_reduce()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >array_walk()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_merge_recursive</name>
            <signature><![CDATA[array array_merge_recursive ( array array1, array array2 [, array ...])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8628" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_merge_recursive</B
> ( array array1, array array2 [, array ...])<BR  ></BR
><P  >     <B  CLASS="function" >array_merge_recursive()</B
> 将两个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。
    </P
><P  >     如果输入的数组中有相同的字符串键名，则这些值会被合并到一个数组中去，这将递归下去，因此如果一个值本身是一个数组，本函数将按照相应的条目把它合并为另一个数组。然而，如果数组具有相同的数组键名，后一个值将不会覆盖原来的值，而是附加到后面。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8646" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_merge_recursive()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$ar1 </font><font  color="#007700">= array (</font><font  color="#DD0000">"color" </font><font  color="#007700">=> array (</font><font  color="#DD0000">"favorite" </font><font  color="#007700">=> </font><font  color="#DD0000">"red"</font><font  color="#007700">), </font><font  color="#0000BB">5</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$ar2 </font><font  color="#007700">= array (</font><font  color="#0000BB">10</font><font  color="#007700">, </font><font  color="#DD0000">"color" </font><font  color="#007700">=> array (</font><font  color="#DD0000">"favorite" </font><font  color="#007700">=> </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"blue"</font><font  color="#007700">));<br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_merge_recursive </font><font  color="#007700">(</font><font  color="#0000BB">$ar1</font><font  color="#007700">, </font><font  color="#0000BB">$ar2</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       <TT  CLASS="literal" >$result</TT
> 成为：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Array<br  />(<br  />    [color] => Array<br  />        (<br  />            [favorite] => Array<br  />                (<br  />                    [0] => red<br  />                    [1] => green<br  />                )<br  /><br  />            [0] => blue<br  />        )<br  /><br  />    [0] => 5<br  />    [1] => 10<br  />)</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_merge()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_merge</name>
            <signature><![CDATA[array array_merge ( array array1, array array2 [, array ...])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8659" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_merge</B
> ( array array1, array array2 [, array ...])<BR  ></BR
><P  >     <B  CLASS="function" >array_merge()</B
> 将两个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。
    </P
><P  >     如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值。然而，如果数组包含数字键名，后面的值将<SPAN  CLASS="strong" ><B  CLASS="emphasis" >不会</B
></SPAN
>覆盖原来的值，而是附加到后面。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8678" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_merge()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$array1 </font><font  color="#007700">= array (</font><font  color="#DD0000">"color" </font><font  color="#007700">=> </font><font  color="#DD0000">"red"</font><font  color="#007700">, </font><font  color="#0000BB">2</font><font  color="#007700">, </font><font  color="#0000BB">4</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$array2 </font><font  color="#007700">= array (</font><font  color="#DD0000">"a"</font><font  color="#007700">, </font><font  color="#DD0000">"b"</font><font  color="#007700">, </font><font  color="#DD0000">"color" </font><font  color="#007700">=> </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"shape" </font><font  color="#007700">=> </font><font  color="#DD0000">"trapezoid"</font><font  color="#007700">, </font><font  color="#0000BB">4</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_merge </font><font  color="#007700">(</font><font  color="#0000BB">$array1</font><font  color="#007700">, </font><font  color="#0000BB">$array2</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$result</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       <TT  CLASS="varname" >$result</TT
> 成为：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Array<br  />(<br  />    [color] => green<br  />    [0] => 2<br  />    [1] => 4<br  />    [2] => a<br  />    [3] => b<br  />    [shape] => trapezoid<br  />    [4] => 4<br  />)</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8686" ></A
><P  ><B  >例子 2. 简单的 <B  CLASS="function" >array_merge()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$array1 </font><font  color="#007700">= array();<br  /></font><font  color="#0000BB">$array2 </font><font  color="#007700">= array(</font><font  color="#0000BB">1 </font><font  color="#007700">=> </font><font  color="#DD0000">"data"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_merge</font><font  color="#007700">(</font><font  color="#0000BB">$array1</font><font  color="#007700">, </font><font  color="#0000BB">$array2</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       别忘了数字键名将会被重新编号！
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Array<br  />(<br  />    [0] => data<br  />)</font>
</code></TD
></TR
></TABLE
><P  >       如果你想完全保留原有数组并只想新的数组附加到后面，用 <TT  CLASS="literal" >+</TT
> 运算符：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$array1 </font><font  color="#007700">= array();<br  /></font><font  color="#0000BB">$array2 </font><font  color="#007700">= array(</font><font  color="#0000BB">1 </font><font  color="#007700">=> </font><font  color="#DD0000">"data"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">$array1 </font><font  color="#007700">+ </font><font  color="#0000BB">$array2</font><font  color="#007700">;<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       数字键名将被保留从而原来的关联保持不变。
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Array<br  />(<br  />    [1] => data<br  />)</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      共有的键名将根据先来先服务的原则被覆盖掉。
     </P
></BLOCKQUOTE
></DIV
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_merge_recursive()</B
></A
> 和 <SPAN HREF="#"><B  CLASS="function" >array_combine()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_multisort</name>
            <signature><![CDATA[bool array_multisort ( array ar1 [, mixed arg [, mixed ... [, array ...]]])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8706" ></A
><H2  >说明</H2
>bool <B  CLASS="methodname" >array_multisort</B
> ( array ar1 [, mixed arg [, mixed ... [, array ...]]])<BR  ></BR
><P  >     <B  CLASS="function" >array_multisort()</B
> 可以用来一次对多个数组进行排序或者根据某一维对多维数组进行排序。排序时保留原有的键名关联。
    </P
><P  >     输入数组被当成一个表的列并以行来排序 － 这类似于 SQL 的 ORDER BY
     子句的功能。第一个数组是要排序的主要数组。数组中的行（值）比较为相同的话就按照下一个输入数组中相应值的大小来排序，依此类推。
    </P
><P  >     本函数的参数结构有些不同寻常，但是非常灵活。第一个参数必须是一个数组。接下来的每个参数可以是数组或者是下面列出的排序标志。
    </P
><P  >     排序顺序标志：
     </P><P  ></P
><UL  ><LI  ><P  >SORT_ASC - 按照上升顺序排序</P
></LI
><LI  ><P  >SORT_DESC - 按照下降顺序排序</P
></LI
></UL
>
    </P
><P  >     排序类型标志：
     </P><P  ></P
><UL  ><LI  ><P  >SORT_REGULAR - 将项目按照通常方法比较</P
></LI
><LI  ><P  >SORT_NUMERIC - 将项目按照数值比较</P
></LI
><LI  ><P  >SORT_STRING - 将项目按照字符串比较</P
></LI
></UL
>
    </P
><P  >     每个数组之后不能指定两个同类的排序标志。每个数组后指定的排序标志仅对该数组有效 - 在此之前为默认值
     SORT_ASC 和 SORT_REGULAR。
    </P
><P  >     如果成功则返回 <TT  CLASS="constant" ><B  >TRUE</B
></TT
>，失败则返回 <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8746" ></A
><P  ><B  >例子 1. 对多个数组排序</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$ar1 </font><font  color="#007700">= array (</font><font  color="#DD0000">"10"</font><font  color="#007700">, </font><font  color="#0000BB">100</font><font  color="#007700">, </font><font  color="#0000BB">100</font><font  color="#007700">, </font><font  color="#DD0000">"a"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$ar2 </font><font  color="#007700">= array (</font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#0000BB">3</font><font  color="#007700">, </font><font  color="#DD0000">"2"</font><font  color="#007700">, </font><font  color="#0000BB">1</font><font  color="#007700">);<br  /></font><font  color="#0000BB">array_multisort </font><font  color="#007700">(</font><font  color="#0000BB">$ar1</font><font  color="#007700">, </font><font  color="#0000BB">$ar2</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     本例中经过排序后，第一个数组将包含
     10，"a"，100，100。第二个数组将包含
     1，1，"2"，3。第二个数组中的项目顺序完全和第一个数组中相应的项目（100 和 100）顺序一致。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8751" ></A
><P  ><B  >例子 2. 对多维数组排序</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$ar </font><font  color="#007700">= array (array (</font><font  color="#DD0000">"10"</font><font  color="#007700">, </font><font  color="#0000BB">100</font><font  color="#007700">, </font><font  color="#0000BB">100</font><font  color="#007700">, </font><font  color="#DD0000">"a"</font><font  color="#007700">), array (</font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#0000BB">3</font><font  color="#007700">, </font><font  color="#DD0000">"2"</font><font  color="#007700">, </font><font  color="#0000BB">1</font><font  color="#007700">));<br  /></font><font  color="#0000BB">array_multisort </font><font  color="#007700">(</font><font  color="#0000BB">$ar</font><font  color="#007700">[</font><font  color="#0000BB">0</font><font  color="#007700">], </font><font  color="#0000BB">SORT_ASC</font><font  color="#007700">, </font><font  color="#0000BB">SORT_STRING</font><font  color="#007700">,<br  />                 </font><font  color="#0000BB">$ar</font><font  color="#007700">[</font><font  color="#0000BB">1</font><font  color="#007700">], </font><font  color="#0000BB">SORT_NUMERIC</font><font  color="#007700">, </font><font  color="#0000BB">SORT_DESC</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     本例中经过排序后，第一个数组将包含
     10，100，100，"a"（作为字符串上升排序），第二个数组将包含
     1，3，"2"，1（作为数值下降排序）。
    </P
><P  >     【译者注】本函数相当有用，为有助于理解，请看下面这个例子：
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8757" ></A
><P  ><B  >例子 3. 名次排列</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
$grade = array("score" => array(70, 95, 70.0, 60, "70"),<br  />               "name" => array("Zhang San", "Li Si", "Wang Wu",<br  />                               "Zhao Liu", "Liu Qi"));<br  />array_multisort($grade["score"], SORT_NUMERIC, SORT_DESC,<br  />                // 将分数作为数值，由高到低排序<br  />                $grade["name"], SORT_STRING, SORT_ASC);<br  />                // 将名字作为字符串，由小到大排序<br  />var_dump($grade);</font>
</code></TD
></TR
></TABLE
><P  >       上例输出结果如下：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
array(2) {<br  />  ["score"]=><br  />  array(5) {<br  />    [0]=><br  />    int(95)<br  />    [1]=><br  />    string(2) "70"<br  />    [2]=><br  />    float(70)<br  />    [3]=><br  />    int(70)<br  />    [4]=><br  />    int(60)<br  />  }<br  />  ["name"]=><br  />  array(5) {<br  />    [0]=><br  />    string(5) "Li Si"<br  />    [1]=><br  />    string(6) "Liu Qi"<br  />    [2]=><br  />    string(7) "Wang Wu"<br  />    [3]=><br  />    string(9) "Zhang San"<br  />    [4]=><br  />    string(8) "Zhao Liu"<br  />  }<br  />}</font>
</code></TD
></TR
></TABLE
><P  >       本例中对包含成绩的数组 <TT  CLASS="varname" >$grade</TT
>
       按照分数（score）由高到低进行排序，分数相同的人则按照名字（name）由小到大排序。排序后李四
       95 分为第一名，赵六 60 分为第五名没有异议。张三、王五和刘七都是
       70 分，他们的名次则由其姓名的字母顺序排列，Liu 在前，Wang 在后而
       Zhang 在最后。为了区别，三个 70
       分分别用了整数，浮点数和字符串来表示，可以在程序输出中清楚地看到它们排序的结果。
      </P
></DIV
></TD
></TR
></TABLE
>
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_pad</name>
            <signature><![CDATA[array array_pad ( array input, int pad_size, mixed pad_value)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8768" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_pad</B
> ( array input, int pad_size, mixed pad_value)<BR  ></BR
><P  >     <B  CLASS="function" >array_pad()</B
> 返回
     <TT  CLASS="parameter" ><I  >input</I
></TT
> 的一个拷贝，并用
     <TT  CLASS="parameter" ><I  >pad_value</I
></TT
> 将其填补到
     <TT  CLASS="parameter" ><I  >pad_size</I
></TT
> 指定的长度。如果
     <TT  CLASS="parameter" ><I  >pad_size</I
></TT
> 为正，则数组被填补到右侧，如果为负则从左侧开始填补。如果
     <TT  CLASS="parameter" ><I  >pad_size</I
></TT
> 的绝对值小于或等于
     <TT  CLASS="parameter" ><I  >input</I
></TT
> 数组的长度则没有任何填补。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8791" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_pad()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$input </font><font  color="#007700">= array (</font><font  color="#0000BB">12</font><font  color="#007700">, </font><font  color="#0000BB">10</font><font  color="#007700">, </font><font  color="#0000BB">9</font><font  color="#007700">);<br  /><br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_pad </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">, </font><font  color="#0000BB">5</font><font  color="#007700">, </font><font  color="#0000BB">0</font><font  color="#007700">);<br  /></font><font  color="#FF8000">// result is array (12, 10, 9, 0, 0)<br  /><br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_pad </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">, -</font><font  color="#0000BB">7</font><font  color="#007700">, -</font><font  color="#0000BB">1</font><font  color="#007700">);<br  /></font><font  color="#FF8000">// result is array (-1, -1, -1, -1, 12, 10, 9)<br  /><br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_pad </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">, </font><font  color="#0000BB">2</font><font  color="#007700">, </font><font  color="#DD0000">"noop"</font><font  color="#007700">);<br  /></font><font  color="#FF8000">// not padded<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_fill()</B
></A
> 和 <SPAN HREF="#"><B  CLASS="function" >range()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_pop</name>
            <signature><![CDATA[mixed array_pop ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8802" ></A
><H2  >说明</H2
>mixed <B  CLASS="methodname" >array_pop</B
> ( array array)<BR  ></BR
><P  >     <B  CLASS="function" >array_pop()</B
> 弹出并返回
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 数组的最后一个单元，并将数组
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 的长度减一。如果
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 为空（或者不是数组）将返回 <TT  CLASS="constant" ><B  >NULL</B
></TT
>。
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>在调用后，该函数会重置（<SPAN HREF="#"><B  CLASS="function" >reset()</B
></A
>）数组的指针。</P
></BLOCKQUOTE
></DIV
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8821" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_pop()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$stack </font><font  color="#007700">= array (</font><font  color="#DD0000">"orange"</font><font  color="#007700">, </font><font  color="#DD0000">"banana"</font><font  color="#007700">, </font><font  color="#DD0000">"apple"</font><font  color="#007700">, </font><font  color="#DD0000">"raspberry"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$fruit </font><font  color="#007700">= </font><font  color="#0000BB">array_pop </font><font  color="#007700">(</font><font  color="#0000BB">$stack</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$stack</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       经过此操作后，<TT  CLASS="varname" >$stack</TT
> 将只有 3 个单元：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Array<br  />(<br  />    [0] => orange<br  />    [1] => banana<br  />    [2] => apple<br  />)</font>
</code></TD
></TR
></TABLE
><P  >       并且 <TT  CLASS="literal" >rasberry</TT
> 将被赋给 <TT  CLASS="varname" >$fruit</TT
>。
      </P
></DIV
></TD
></TR
></TABLE
>
    </P
><DIV  CLASS="warning" ><P  ></P
><TABLE  CLASS="warning" BORDER="1" WIDTH="100%" ><TR  ><TD  ALIGN="CENTER" ><B  >警告</B
></TD
></TR
><TR  ><TD  ALIGN="LEFT" ><P  >这个函数可能返回 Boolean <TT  CLASS="constant" ><B  >FALSE</B
></TT
>，也可能返回一个与 <TT  CLASS="constant" ><B  >FALSE</B
></TT
> 相等地非 Boolean 值，比如 0 或者 "" 。请参阅 <SPAN HREF="#">Booleans</A
> 的有关章节以获取更多信息。请使用 <SPAN HREF="#">=== 操作符</A
> 来测试该函数的返回值。 </P
></TD
></TR
></TABLE
></DIV
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_push()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_shift()</B
></A
> 和 <SPAN HREF="#"><B  CLASS="function" >array_unshift()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_push</name>
            <signature><![CDATA[int array_push ( array array, mixed var [, mixed ...])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8845" ></A
><H2  >说明</H2
>int <B  CLASS="methodname" >array_push</B
> ( array array, mixed var [, mixed ...])<BR  ></BR
><P  >     <B  CLASS="function" >array_push()</B
> 将
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 当成一个栈，并将传入的变量压入
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 的末尾。
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 的长度将增加入栈变量的数目。和如下效果相同：
     <TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$array</font><font  color="#007700">[] = </font><font  color="#0000BB">$var</font><font  color="#007700">;<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
>
     并对每个 <TT  CLASS="parameter" ><I  >var</I
></TT
> 重复以上动作。
    </P
><P  >     返回数组新的单元总数。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8868" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_push()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$stack </font><font  color="#007700">= array (</font><font  color="#DD0000">"orange"</font><font  color="#007700">, </font><font  color="#DD0000">"banana"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">array_push </font><font  color="#007700">(</font><font  color="#0000BB">$stack</font><font  color="#007700">, </font><font  color="#DD0000">"apple"</font><font  color="#007700">, </font><font  color="#DD0000">"raspberry"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$stack</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       本例将使 <TT  CLASS="varname" >$stack</TT
> 具有如下单元：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Array<br  />(<br  />    [0] => orange<br  />    [1] => banana<br  />    [2] => apple<br  />    [3] => raspberry<br  />)</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_pop()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_shift()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >array_unshift()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_rand</name>
            <signature><![CDATA[mixed array_rand ( array input [, int num_req])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8883" ></A
><H2  >说明</H2
>mixed <B  CLASS="methodname" >array_rand</B
> ( array input [, int num_req])<BR  ></BR
><P  >     <B  CLASS="function" >array_rand()</B
> 在你想从数组中取出一个或多个随机的单元时相当有用。它接受
     <TT  CLASS="parameter" ><I  >input</I
></TT
> 作为输入数组和一个可选的参数
     <TT  CLASS="parameter" ><I  >num_req</I
></TT
>，指明了你想取出多少个单元 － 如果没有指定，默认为 1。
    </P
><P  >     如果你只取出一个，<B  CLASS="function" >array_rand()</B
>
     返回一个随机单元的键名，否则就返回一个包含随机键名的数组。这样你就可以随机从数组中取出键名和值。
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>在 PHP 4.2.0 中，无需用函数 <SPAN HREF="#"><B  CLASS="function" >srand()</B
></A
> 或
<SPAN HREF="#"><B  CLASS="function" >mt_srand()</B
></A
>来搜寻随机数生成器，它将被自动完成。
</P
></BLOCKQUOTE
></DIV
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8905" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_rand()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />srand </font><font  color="#007700">((float) </font><font  color="#0000BB">microtime</font><font  color="#007700">() * </font><font  color="#0000BB">10000000</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$input </font><font  color="#007700">= array (</font><font  color="#DD0000">"Neo"</font><font  color="#007700">, </font><font  color="#DD0000">"Morpheus"</font><font  color="#007700">, </font><font  color="#DD0000">"Trinity"</font><font  color="#007700">, </font><font  color="#DD0000">"Cypher"</font><font  color="#007700">, </font><font  color="#DD0000">"Tank"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$rand_keys </font><font  color="#007700">= </font><font  color="#0000BB">array_rand </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">, </font><font  color="#0000BB">2</font><font  color="#007700">);<br  />print </font><font  color="#0000BB">$input</font><font  color="#007700">[</font><font  color="#0000BB">$rand_keys</font><font  color="#007700">[</font><font  color="#0000BB">0</font><font  color="#007700">]].</font><font  color="#DD0000">"\n"</font><font  color="#007700">;<br  />print </font><font  color="#0000BB">$input</font><font  color="#007700">[</font><font  color="#0000BB">$rand_keys</font><font  color="#007700">[</font><font  color="#0000BB">1</font><font  color="#007700">]].</font><font  color="#DD0000">"\n"</font><font  color="#007700">;<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >shuffle()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_reduce</name>
            <signature><![CDATA[mixed array_reduce ( array input, callback function [, int initial])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8915" ></A
><H2  >说明</H2
>mixed <B  CLASS="methodname" >array_reduce</B
> ( array input, callback function [, int initial])<BR  ></BR
><P  >     <B  CLASS="function" >array_reduce()</B
> 将回调函数
     <TT  CLASS="parameter" ><I  >function</I
></TT
> 迭代地作用到
     <TT  CLASS="parameter" ><I  >input</I
></TT
> 数组中的每一个单元中，从而将数组简化为单一的值。如果指定了可选参数
     <TT  CLASS="parameter" ><I  >initial</I
></TT
>，该参数将被当成是数组中的第一个值来处理，或者如果数组为空的话就作为最终返回值。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8935" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_reduce()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /></font><font  color="#007700">function </font><font  color="#0000BB">rsum</font><font  color="#007700">(</font><font  color="#0000BB">$v</font><font  color="#007700">, </font><font  color="#0000BB">$w</font><font  color="#007700">) {<br  />    </font><font  color="#0000BB">$v </font><font  color="#007700">+= </font><font  color="#0000BB">$w</font><font  color="#007700">;<br  />    return </font><font  color="#0000BB">$v</font><font  color="#007700">;<br  />}<br  /><br  />function </font><font  color="#0000BB">rmul</font><font  color="#007700">(</font><font  color="#0000BB">$v</font><font  color="#007700">, </font><font  color="#0000BB">$w</font><font  color="#007700">) {<br  />    </font><font  color="#0000BB">$v </font><font  color="#007700">*= </font><font  color="#0000BB">$w</font><font  color="#007700">;<br  />    return </font><font  color="#0000BB">$v</font><font  color="#007700">;<br  />}<br  /><br  /></font><font  color="#0000BB">$a </font><font  color="#007700">= array(</font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#0000BB">2</font><font  color="#007700">, </font><font  color="#0000BB">3</font><font  color="#007700">, </font><font  color="#0000BB">4</font><font  color="#007700">, </font><font  color="#0000BB">5</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$x </font><font  color="#007700">= array();<br  /></font><font  color="#0000BB">$b </font><font  color="#007700">= </font><font  color="#0000BB">array_reduce</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#DD0000">"rsum"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$c </font><font  color="#007700">= </font><font  color="#0000BB">array_reduce</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#DD0000">"rmul"</font><font  color="#007700">, </font><font  color="#0000BB">10</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$d </font><font  color="#007700">= </font><font  color="#0000BB">array_reduce</font><font  color="#007700">(</font><font  color="#0000BB">$x</font><font  color="#007700">, </font><font  color="#DD0000">"rsum"</font><font  color="#007700">, </font><font  color="#0000BB">1</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     这将使 <TT  CLASS="varname" >$b</TT
> 的值为
     <TT  CLASS="literal" >15</TT
>，<TT  CLASS="varname" >$c</TT
> 的值为
     <TT  CLASS="literal" >1200</TT
>（= 1*2*3*4*5*10），以及
     <TT  CLASS="varname" >$d</TT
> 的值为 <TT  CLASS="literal" >1</TT
>。
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_filter()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_map()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_unique()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >array_count_values()</B
></A
>。

    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_reverse</name>
            <signature><![CDATA[array array_reverse ( array array [, bool preserve_keys])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8955" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_reverse</B
> ( array array [, bool preserve_keys])<BR  ></BR
><P  >     <B  CLASS="function" >array_reverse()</B
> 接受数组
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 作为输入并返回一个单元为相反顺序的新数组，如果
     <TT  CLASS="parameter" ><I  >preserve_keys</I
></TT
> 为 <TT  CLASS="constant" ><B  >TRUE</B
></TT
> 则保留原来的键名。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN8972" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_reverse()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$input  </font><font  color="#007700">= array (</font><font  color="#DD0000">"php"</font><font  color="#007700">, </font><font  color="#0000BB">4.0</font><font  color="#007700">, array (</font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">));<br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_reverse </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$result_keyed </font><font  color="#007700">= </font><font  color="#0000BB">array_reverse </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">, </font><font  color="#0000BB">TRUE</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       这将使 <TT  CLASS="varname" >$result</TT
> 和
       <TT  CLASS="varname" >$result_keyed</TT
> 具有相同的单元，但是注意键名的区别。<TT  CLASS="varname" >$result</TT
>
       和 <TT  CLASS="varname" >$result_keyed</TT
> 的打印输出显示分别为：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Array<br  />(<br  />    [0] => Array<br  />        (<br  />            [0] => green<br  />            [1] => red<br  />        )<br  /><br  />    [1] => 4<br  />    [2] => php<br  />)<br  />Array<br  />(<br  />    [2] => Array<br  />        (<br  />            [0] => green<br  />            [1] => red<br  />        )<br  /><br  />    [1] => 4<br  />    [0] => php<br  />)</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      第二个参数是 PHP 4.0.3 中新加的。
     </P
></BLOCKQUOTE
></DIV
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_flip()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_search</name>
            <signature><![CDATA[mixed array_search ( mixed needle, array haystack [, bool strict])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN8990" ></A
><H2  >说明</H2
>mixed <B  CLASS="methodname" >array_search</B
> ( mixed needle, array haystack [, bool strict])<BR  ></BR
><P  >     在 <TT  CLASS="parameter" ><I  >haystack</I
></TT
> 中搜索
     <TT  CLASS="parameter" ><I  >needle</I
></TT
> 参数并在找到的情况下返回键名，否则返回 <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      在 PHP 4.2.0 之前，<B  CLASS="function" >array_search()</B
> 在失败时返回
      <TT  CLASS="constant" ><B  >NULL</B
></TT
> 而不是 <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。
     </P
></BLOCKQUOTE
></DIV
><P  >     如果可选的第三个参数 <TT  CLASS="parameter" ><I  >strict</I
></TT
> 为 <TT  CLASS="constant" ><B  >TRUE</B
></TT
>，则
     <B  CLASS="function" >array_search()</B
> 还将在 <TT  CLASS="parameter" ><I  >haystack</I
></TT
>
     中检查 <TT  CLASS="parameter" ><I  >needle</I
></TT
> 的类型。
    </P
><DIV  CLASS="warning" ><P  ></P
><TABLE  CLASS="warning" BORDER="1" WIDTH="100%" ><TR  ><TD  ALIGN="CENTER" ><B  >警告</B
></TD
></TR
><TR  ><TD  ALIGN="LEFT" ><P  >这个函数可能返回 Boolean <TT  CLASS="constant" ><B  >FALSE</B
></TT
>，也可能返回一个与 <TT  CLASS="constant" ><B  >FALSE</B
></TT
> 相等地非 Boolean 值，比如 0 或者 "" 。请参阅 <SPAN HREF="#">Booleans</A
> 的有关章节以获取更多信息。请使用 <SPAN HREF="#">=== 操作符</A
> 来测试该函数的返回值。 </P
></TD
></TR
></TABLE
></DIV
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_keys()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_values()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_key_exists()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >in_array()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_shift</name>
            <signature><![CDATA[mixed array_shift ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9034" ></A
><H2  >说明</H2
>mixed <B  CLASS="methodname" >array_shift</B
> ( array array)<BR  ></BR
><P  >     <B  CLASS="function" >array_shift()</B
> 将
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 的第一个单元移出并作为结果返回，将
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 的长度减一并将所有其它单元向前移动一位。所有的数字键名将改为从零开始计数，文字键名将不变。如果
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 为空（或者不是数组），则返回 <TT  CLASS="constant" ><B  >NULL</B
></TT
>。
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>在调用后，该函数会重置（<SPAN HREF="#"><B  CLASS="function" >reset()</B
></A
>）数组的指针。</P
></BLOCKQUOTE
></DIV
><TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9052" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_shift()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$stack </font><font  color="#007700">= array (</font><font  color="#DD0000">"orange"</font><font  color="#007700">, </font><font  color="#DD0000">"banana"</font><font  color="#007700">, </font><font  color="#DD0000">"apple"</font><font  color="#007700">, </font><font  color="#DD0000">"raspberry"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$fruit </font><font  color="#007700">= </font><font  color="#0000BB">array_shift </font><font  color="#007700">(</font><font  color="#0000BB">$stack</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$stack</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >      这将使 <TT  CLASS="varname" >$stack</TT
> 剩下 3 个单元：
     </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Array<br  />(<br  />    [0] => banana<br  />    [1] => apple<br  />    [2] => raspberry<br  />)</font>
</code></TD
></TR
></TABLE
><P  >      并且 <TT  CLASS="literal" >orange</TT
> 被赋给了 <TT  CLASS="varname" >$fruit</TT
>。
     </P
></DIV
></TD
></TR
></TABLE
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_unshift()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_push()</B
></A
> 和 <SPAN HREF="#"><B  CLASS="function" >array_pop()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_slice</name>
            <signature><![CDATA[array array_slice ( array array, int offset [, int length])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9070" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_slice</B
> ( array array, int offset [, int length])<BR  ></BR
><P  >     <B  CLASS="function" >array_slice()</B
> 返回根据 <TT  CLASS="parameter" ><I  >offset</I
></TT
> 和
     <TT  CLASS="parameter" ><I  >length</I
></TT
> 参数所指定的 <TT  CLASS="parameter" ><I  >array</I
></TT
>
     数组中的一段序列。
    </P
><P  >     如果 <TT  CLASS="parameter" ><I  >offset</I
></TT
> 为正，则序列将从 <TT  CLASS="parameter" ><I  >array</I
></TT
>
     中的此偏移量开始。如果 <TT  CLASS="parameter" ><I  >offset</I
></TT
> 为负，则序列将从
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 中距离末端这么远的地方开始。
    </P
><P  >     如果给出了 <TT  CLASS="parameter" ><I  >length</I
></TT
> 并且为正，则序列中将具有这么多的单元。如果给出了
     <TT  CLASS="parameter" ><I  >length</I
></TT
> 并且为负，则序列将终止在距离数组末端这么远的地方。如果省略，则序列将从
     <TT  CLASS="parameter" ><I  >offset</I
></TT
> 开始一直到 <TT  CLASS="parameter" ><I  >array</I
></TT
> 的末端。
    </P
><P  >     注意 <B  CLASS="function" >array_slice()</B
> 将忽略键名，并且是根据单元在数组中的实际位置来计算偏移量和长度的。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9102" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_slice()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$input </font><font  color="#007700">= array (</font><font  color="#DD0000">"a"</font><font  color="#007700">, </font><font  color="#DD0000">"b"</font><font  color="#007700">, </font><font  color="#DD0000">"c"</font><font  color="#007700">, </font><font  color="#DD0000">"d"</font><font  color="#007700">, </font><font  color="#DD0000">"e"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$output </font><font  color="#007700">= </font><font  color="#0000BB">array_slice </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">, </font><font  color="#0000BB">2</font><font  color="#007700">);      </font><font  color="#FF8000">// returns "c", "d", and "e"<br  /></font><font  color="#0000BB">$output </font><font  color="#007700">= </font><font  color="#0000BB">array_slice </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">, </font><font  color="#0000BB">2</font><font  color="#007700">, -</font><font  color="#0000BB">1</font><font  color="#007700">);  </font><font  color="#FF8000">// returns "c", "d"<br  /></font><font  color="#0000BB">$output </font><font  color="#007700">= </font><font  color="#0000BB">array_slice </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">, -</font><font  color="#0000BB">2</font><font  color="#007700">, </font><font  color="#0000BB">1</font><font  color="#007700">);  </font><font  color="#FF8000">// returns "d"<br  /></font><font  color="#0000BB">$output </font><font  color="#007700">= </font><font  color="#0000BB">array_slice </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">, </font><font  color="#0000BB">0</font><font  color="#007700">, </font><font  color="#0000BB">3</font><font  color="#007700">);   </font><font  color="#FF8000">// returns "a", "b", and "c"<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_splice()</B
></A
> 和 <SPAN HREF="#"><B  CLASS="function" >unset()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_splice</name>
            <signature><![CDATA[array array_splice ( array input, int offset [, int length [, array replacement]])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9113" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_splice</B
> ( array input, int offset [, int length [, array replacement]])<BR  ></BR
><P  >     <B  CLASS="function" >array_splice()</B
> 把 <TT  CLASS="parameter" ><I  >input</I
></TT
> 数组中由
     <TT  CLASS="parameter" ><I  >offset</I
></TT
> 和 <TT  CLASS="parameter" ><I  >length</I
></TT
>
     指定的单元去掉，如果提供了 <TT  CLASS="parameter" ><I  >replacement</I
></TT
> 参数，则用
     <TT  CLASS="parameter" ><I  >replacement</I
></TT
> 数组中的单元取代。返回一个包含有被移除单元的数组。
    </P
><P  >     如果 <TT  CLASS="parameter" ><I  >offset</I
></TT
> 为正，则从 <TT  CLASS="parameter" ><I  >input</I
></TT
>
     数组中该值指定的偏移量开始移除。如果 <TT  CLASS="parameter" ><I  >offset</I
></TT
>
     为负，则从 <TT  CLASS="parameter" ><I  >input</I
></TT
> 末尾倒数该值指定的偏移量开始移除。
    </P
><P  >     如果省略 <TT  CLASS="parameter" ><I  >length</I
></TT
>，则移除数组中从 <TT  CLASS="parameter" ><I  >offset</I
></TT
>
     到结尾的所有部分。如果指定了 <TT  CLASS="parameter" ><I  >length</I
></TT
>
     并且为正值，则移除这么多单元。如果指定了 <TT  CLASS="parameter" ><I  >length</I
></TT
>
     并且为负值，则移除从 <TT  CLASS="parameter" ><I  >offset</I
></TT
> 到数组末尾倒数
     <TT  CLASS="parameter" ><I  >length</I
></TT
> 为止中间所有的单元。小窍门：当给出了
     <TT  CLASS="parameter" ><I  >replacement</I
></TT
> 时要移除从 <TT  CLASS="parameter" ><I  >offset</I
></TT
>
     到数组末尾所有单元时，用 <TT  CLASS="literal" >count($input)</TT
> 作为 <TT  CLASS="parameter" ><I  >length</I
></TT
>。
    </P
><P  >     如果给出了 <TT  CLASS="parameter" ><I  >replacement</I
></TT
> 数组，则被移除的单元被此数组中的单元替代。如果
     <TT  CLASS="parameter" ><I  >offset</I
></TT
> 和 <TT  CLASS="parameter" ><I  >length</I
></TT
>
     的组合结果是不会移除任何值，则 <TT  CLASS="parameter" ><I  >replacement</I
></TT
>
     数组中的单元将被插入到 <TT  CLASS="parameter" ><I  >offset</I
></TT
>
     指定的位置。小窍门：如果用来替换的值只是一个单元，那么不需要给它加上
     <TT  CLASS="literal" >array()</TT
>，除非该单元本身就是一个数组。
    </P
><P  >     以下的表达式具有同样效果：
     </P><DIV  CLASS="table" ><A  NAME="AEN9161" ></A
><P  ><B  >表格 1. <B  CLASS="function" >array_splice()</B
> 等价表达式</B
></P
><TABLE  BORDER="1" CLASS="CALSTABLE" ><TBODY  ><TR  ><TD  ALIGN="LEFT" VALIGN="MIDDLE" >          array_push($input, $x, $y)
         </TD
><TD  ALIGN="LEFT" VALIGN="MIDDLE" >          array_splice($input, count($input), 0, array($x, $y))
         </TD
></TR
><TR  ><TD  ALIGN="LEFT" VALIGN="MIDDLE" >          array_pop($input)
         </TD
><TD  ALIGN="LEFT" VALIGN="MIDDLE" >          array_splice($input, -1)
         </TD
></TR
><TR  ><TD  ALIGN="LEFT" VALIGN="MIDDLE" >          array_shift($input)
         </TD
><TD  ALIGN="LEFT" VALIGN="MIDDLE" >          array_splice($input, -1)
         </TD
></TR
><TR  ><TD  ALIGN="LEFT" VALIGN="MIDDLE" >          array_unshift($input, $x, $y)
         </TD
><TD  ALIGN="LEFT" VALIGN="MIDDLE" >          array_splice($input, 0, 0, array($x, $y))
         </TD
></TR
><TR  ><TD  ALIGN="LEFT" VALIGN="MIDDLE" >          $a[$x] = $y
         </TD
><TD  ALIGN="LEFT" VALIGN="MIDDLE" >          array_splice($input, $x, 1, $y)
         </TD
></TR
></TBODY
></TABLE
></DIV
>
    </P
><P  >     返回一个包含被移除单元的数组。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9183" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_splice()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$input </font><font  color="#007700">= array (</font><font  color="#DD0000">"red"</font><font  color="#007700">, </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"blue"</font><font  color="#007700">, </font><font  color="#DD0000">"yellow"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">array_splice </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">, </font><font  color="#0000BB">2</font><font  color="#007700">);<br  /></font><font  color="#FF8000">// $input is now array ("red", "green")<br  /><br  /></font><font  color="#0000BB">$input </font><font  color="#007700">= array (</font><font  color="#DD0000">"red"</font><font  color="#007700">, </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"blue"</font><font  color="#007700">, </font><font  color="#DD0000">"yellow"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">array_splice </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">, </font><font  color="#0000BB">1</font><font  color="#007700">, -</font><font  color="#0000BB">1</font><font  color="#007700">);<br  /></font><font  color="#FF8000">// $input is now array ("red", "yellow")<br  /><br  /></font><font  color="#0000BB">$input </font><font  color="#007700">= array (</font><font  color="#DD0000">"red"</font><font  color="#007700">, </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"blue"</font><font  color="#007700">, </font><font  color="#DD0000">"yellow"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">array_splice </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">, </font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#0000BB">count</font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">), </font><font  color="#DD0000">"orange"</font><font  color="#007700">);<br  /></font><font  color="#FF8000">// $input is now array ("red", "orange")<br  /><br  /></font><font  color="#0000BB">$input </font><font  color="#007700">= array (</font><font  color="#DD0000">"red"</font><font  color="#007700">, </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"blue"</font><font  color="#007700">, </font><font  color="#DD0000">"yellow"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">array_splice </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">, -</font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#0000BB">1</font><font  color="#007700">, array(</font><font  color="#DD0000">"black"</font><font  color="#007700">, </font><font  color="#DD0000">"maroon"</font><font  color="#007700">));<br  /></font><font  color="#FF8000">// $input is now array ("red", "green",<br  />//          "blue", "black", "maroon")<br  /></font><font  color="#0000BB">$input </font><font  color="#007700">= array (</font><font  color="#DD0000">"red"</font><font  color="#007700">, </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"blue"</font><font  color="#007700">, </font><font  color="#DD0000">"yellow"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">array_splice </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">, </font><font  color="#0000BB">3</font><font  color="#007700">, </font><font  color="#0000BB">0</font><font  color="#007700">, </font><font  color="#DD0000">"purple"</font><font  color="#007700">);<br  /></font><font  color="#FF8000">// $input is now array ("red", "green",<br  />//          "blue", "purple", "yellow");<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_slice()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >unset()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >array_merge()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_sum</name>
            <signature><![CDATA[mixed array_sum ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9195" ></A
><H2  >说明</H2
>mixed <B  CLASS="methodname" >array_sum</B
> ( array array)<BR  ></BR
><P  >     <B  CLASS="function" >array_sum()</B
> 将数组中的所有值的和以整数或浮点数的结果返回。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9206" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_sum()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$a </font><font  color="#007700">= array(</font><font  color="#0000BB">2</font><font  color="#007700">, </font><font  color="#0000BB">4</font><font  color="#007700">, </font><font  color="#0000BB">6</font><font  color="#007700">, </font><font  color="#0000BB">8</font><font  color="#007700">);<br  />echo </font><font  color="#DD0000">"sum(a) = "</font><font  color="#007700">.</font><font  color="#0000BB">array_sum</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">).</font><font  color="#DD0000">"\n"</font><font  color="#007700">;<br  /><br  /></font><font  color="#0000BB">$b </font><font  color="#007700">= array(</font><font  color="#DD0000">"a"</font><font  color="#007700">=></font><font  color="#0000BB">1.2</font><font  color="#007700">,</font><font  color="#DD0000">"b"</font><font  color="#007700">=></font><font  color="#0000BB">2.3</font><font  color="#007700">,</font><font  color="#DD0000">"c"</font><font  color="#007700">=></font><font  color="#0000BB">3.4</font><font  color="#007700">);<br  />echo </font><font  color="#DD0000">"sum(b) = "</font><font  color="#007700">.</font><font  color="#0000BB">array_sum</font><font  color="#007700">(</font><font  color="#0000BB">$b</font><font  color="#007700">).</font><font  color="#DD0000">"\n"</font><font  color="#007700">;<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       以上程序输出为：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
sum(a) = 20<br  />sum(b) = 6.9</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      PHP 4.2.1 之前的版本修改了传入的数组本身，将其中的字符串值转换成数值（大多数情况下都转换成了零，根据具体值而定）。
     </P
></BLOCKQUOTE
></DIV
></DIV
>]]></description>
        </method>
        <method>
            <name>array_udiff_assoc</name>
            <signature><![CDATA[array array_udiff_assoc ( array array1, array array2 [, array ..., callback data_compare_func])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9218" ></A
><H2  >Description</H2
>array <B  CLASS="methodname" >array_udiff_assoc</B
> ( array array1, array array2 [, array ..., callback data_compare_func])<BR  ></BR
><P  >     <B  CLASS="function" >array_udiff_assoc()</B
> returns an <SPAN HREF="#"><B  CLASS="type" >array</B
></A
>
     containing all the values from <TT  CLASS="parameter" ><I  >array1</I
></TT
>
     that are not present in any of the other arguments.
     Note that the keys are used in the comparison unlike 
     <SPAN HREF="#"><B  CLASS="function" >array_diff()</B
></A
> and <SPAN HREF="#"><B  CLASS="function" >array_udiff()</B
></A
>.
     The comparison of arrays' data is performed by using an user-supplied
     callback. In this aspect the behaviour is opposite to the behaviour of
     <SPAN HREF="#"><B  CLASS="function" >array_diff_assoc()</B
></A
> which uses internal function for
     comparison.
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9243" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_udiff_assoc()</B
> example</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /></font><font  color="#007700">class </font><font  color="#0000BB">cr </font><font  color="#007700">{<br  />    </font><font  color="#0000BB">private $priv_member</font><font  color="#007700">;<br  />    function </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">$val</font><font  color="#007700">) <br  />    {<br  />        </font><font  color="#0000BB">$this</font><font  color="#007700">-></font><font  color="#0000BB">priv_member </font><font  color="#007700">= </font><font  color="#0000BB">$val</font><font  color="#007700">;<br  />    }<br  />    <br  />    function </font><font  color="#0000BB">comp_func_cr</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">) <br  />    {<br  />        if (</font><font  color="#0000BB">$a</font><font  color="#007700">-></font><font  color="#0000BB">priv_member </font><font  color="#007700">=== </font><font  color="#0000BB">$b</font><font  color="#007700">-></font><font  color="#0000BB">priv_member</font><font  color="#007700">) return </font><font  color="#0000BB">0</font><font  color="#007700">;<br  />        return (</font><font  color="#0000BB">$a</font><font  color="#007700">-></font><font  color="#0000BB">priv_member </font><font  color="#007700">> </font><font  color="#0000BB">$b</font><font  color="#007700">-></font><font  color="#0000BB">priv_member</font><font  color="#007700">)? </font><font  color="#0000BB">1</font><font  color="#007700">:-</font><font  color="#0000BB">1</font><font  color="#007700">;<br  />    }<br  />}<br  /><br  /></font><font  color="#0000BB">$a </font><font  color="#007700">= array(</font><font  color="#DD0000">"0.1" </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">9</font><font  color="#007700">), </font><font  color="#DD0000">"0.5" </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">12</font><font  color="#007700">), </font><font  color="#0000BB">0 </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">23</font><font  color="#007700">), </font><font  color="#0000BB">1</font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">4</font><font  color="#007700">), </font><font  color="#0000BB">2 </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(-</font><font  color="#0000BB">15</font><font  color="#007700">),);<br  /></font><font  color="#0000BB">$b </font><font  color="#007700">= array(</font><font  color="#DD0000">"0.2" </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">9</font><font  color="#007700">), </font><font  color="#DD0000">"0.5" </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">22</font><font  color="#007700">), </font><font  color="#0000BB">0 </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">3</font><font  color="#007700">), </font><font  color="#0000BB">1</font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">4</font><font  color="#007700">), </font><font  color="#0000BB">2 </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(-</font><font  color="#0000BB">15</font><font  color="#007700">),);<br  /><br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_udiff_assoc</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">, array(</font><font  color="#DD0000">"cr"</font><font  color="#007700">, </font><font  color="#DD0000">"comp_func_cr"</font><font  color="#007700">));<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$result</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       The result is:
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
(
    [0.1] => cr Object
        (
            [priv_member:private] => 9
        )

    [0.5] => cr Object
        (
            [priv_member:private] => 12
        )

    [0] => cr Object
        (
            [priv_member:private] => 23
        )
)</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     In our example above you see the <TT  CLASS="literal" >"1" => new cr(4)</TT
>
     pair is present in both arrays and thus it is not in the ouput from the
     function.
    </P
><P  >     For comparison is used the user supplied callback function.
     It must return an integer less than, equal
     to, or greater than zero if the first argument is considered to
     be respectively less than, equal to, or greater than the
     second.
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      Please note that this function only checks one dimension of a n-dimensional
      array. Of course you can check deeper dimensions by using, for example, 
      <TT  CLASS="literal" >array_udiff_assoc($array1[0], $array2[0], "some_comparison_func");</TT
>.
     </P
></BLOCKQUOTE
></DIV
><P  >     See also
     <SPAN HREF="#"><B  CLASS="function" >array_diff()</B
></A
>,
     <SPAN HREF="#"><B  CLASS="function" >array_diff_assoc()</B
></A
>,
     <SPAN HREF="#"><B  CLASS="function" >array_diff_uassoc()</B
></A
>,
     <SPAN HREF="#"><B  CLASS="function" >array_udiff()</B
></A
>,
     <SPAN HREF="#"><B  CLASS="function" >array_udiff_uassoc()</B
></A
>, 
     <SPAN HREF="#"><B  CLASS="function" >array_intersect()</B
></A
>,  
     <SPAN HREF="#"><B  CLASS="function" >array_intersect_assoc()</B
></A
>,
     <B  CLASS="function" >array_uintersect()</B
>,  
     <B  CLASS="function" >array_uintersect_assoc()</B
> and 
     <B  CLASS="function" >array_uintersect_uassoc()</B
>.
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_udiff_uassoc</name>
            <signature><![CDATA[array array_udiff_uassoc ( array array1, array array2 [, array ..., callback data_compare_func, callback key_compare_func])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9270" ></A
><H2  >Description</H2
>array <B  CLASS="methodname" >array_udiff_uassoc</B
> ( array array1, array array2 [, array ..., callback data_compare_func, callback key_compare_func])<BR  ></BR
><P  >     <B  CLASS="function" >array_udiff_uassoc()</B
> returns an <SPAN HREF="#"><B  CLASS="type" >array</B
></A
>
     containing all the values from <TT  CLASS="parameter" ><I  >array1</I
></TT
>
     that are not present in any of the other arguments.
     Note that the keys are used in the comparison unlike 
     <SPAN HREF="#"><B  CLASS="function" >array_diff()</B
></A
> and <SPAN HREF="#"><B  CLASS="function" >array_udiff()</B
></A
>.
     The comparison of arrays' data is performed by using an user-supplied
     callback : <TT  CLASS="parameter" ><I  >data_compare_func</I
></TT
>. In this aspect
     the behaviour is opposite to the behaviour of
     <SPAN HREF="#"><B  CLASS="function" >array_diff_assoc()</B
></A
> which uses internal function for
     comparison. The comparison of keys (indices) is done also by the 
     callback function <TT  CLASS="parameter" ><I  >key_compare_func</I
></TT
>. This
     behaviour is unlike what <SPAN HREF="#"><B  CLASS="function" >array_udiff_assoc()</B
></A
> does, since
     the latter compares the indices by using an internal function.
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9301" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_udiff_uassoc()</B
> example</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /></font><font  color="#007700">class </font><font  color="#0000BB">cr </font><font  color="#007700">{<br  />    </font><font  color="#0000BB">private $priv_member</font><font  color="#007700">;<br  />    function </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">$val</font><font  color="#007700">) <br  />    {<br  />        </font><font  color="#0000BB">$this</font><font  color="#007700">-></font><font  color="#0000BB">priv_member </font><font  color="#007700">= </font><font  color="#0000BB">$val</font><font  color="#007700">;<br  />    }<br  /><br  />    function </font><font  color="#0000BB">comp_func_cr</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">) <br  />    {<br  />        if (</font><font  color="#0000BB">$a</font><font  color="#007700">-></font><font  color="#0000BB">priv_member </font><font  color="#007700">=== </font><font  color="#0000BB">$b</font><font  color="#007700">-></font><font  color="#0000BB">priv_member</font><font  color="#007700">) return </font><font  color="#0000BB">0</font><font  color="#007700">;<br  />        return (</font><font  color="#0000BB">$a</font><font  color="#007700">-></font><font  color="#0000BB">priv_member </font><font  color="#007700">> </font><font  color="#0000BB">$b</font><font  color="#007700">-></font><font  color="#0000BB">priv_member</font><font  color="#007700">)? </font><font  color="#0000BB">1</font><font  color="#007700">:-</font><font  color="#0000BB">1</font><font  color="#007700">;<br  />    }<br  />    <br  />    function </font><font  color="#0000BB">comp_func_key</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">) <br  />    {<br  />        if (</font><font  color="#0000BB">$a </font><font  color="#007700">=== </font><font  color="#0000BB">$b</font><font  color="#007700">) return </font><font  color="#0000BB">0</font><font  color="#007700">;<br  />        return (</font><font  color="#0000BB">$a </font><font  color="#007700">> </font><font  color="#0000BB">$b</font><font  color="#007700">)? </font><font  color="#0000BB">1</font><font  color="#007700">:-</font><font  color="#0000BB">1</font><font  color="#007700">;<br  />    }<br  />}<br  /></font><font  color="#0000BB">$a </font><font  color="#007700">= array(</font><font  color="#DD0000">"0.1" </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">9</font><font  color="#007700">), </font><font  color="#DD0000">"0.5" </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">12</font><font  color="#007700">), </font><font  color="#0000BB">0 </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">23</font><font  color="#007700">), </font><font  color="#0000BB">1</font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">4</font><font  color="#007700">), </font><font  color="#0000BB">2 </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(-</font><font  color="#0000BB">15</font><font  color="#007700">),);<br  /></font><font  color="#0000BB">$b </font><font  color="#007700">= array(</font><font  color="#DD0000">"0.2" </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">9</font><font  color="#007700">), </font><font  color="#DD0000">"0.5" </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">22</font><font  color="#007700">), </font><font  color="#0000BB">0 </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">3</font><font  color="#007700">), </font><font  color="#0000BB">1</font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">4</font><font  color="#007700">), </font><font  color="#0000BB">2 </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(-</font><font  color="#0000BB">15</font><font  color="#007700">),);<br  /><br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_udiff_uassoc</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">, array(</font><font  color="#DD0000">"cr"</font><font  color="#007700">, </font><font  color="#DD0000">"comp_func_cr"</font><font  color="#007700">), array(</font><font  color="#DD0000">"cr"</font><font  color="#007700">, </font><font  color="#DD0000">"comp_func_key"</font><font  color="#007700">));<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$result</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       The result is:
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
(
    [0.1] => cr Object
        (
            [priv_member:private] => 9
        )

    [0.5] => cr Object
        (
            [priv_member:private] => 12
        )

    [0] => cr Object
        (
            [priv_member:private] => 23
        )
)</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     In our example above you see the <TT  CLASS="literal" >"1" => new cr(4)</TT
>
     pair is present in both arrays and thus it is not in the ouput from the
     function. Keep in mind that you have to supply 2 callback functions.
    </P
><P  >     For comparison is used the user supplied callback function.
     It must return an integer less than, equal
     to, or greater than zero if the first argument is considered to
     be respectively less than, equal to, or greater than the
     second.
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      Please note that this function only checks one dimension of a n-dimensional
      array. Of course you can check deeper dimensions by using, for example, 
      <TT  CLASS="literal" >array_udiff_uassoc($array1[0], $array2[0], "data_compare_func",
      "key_compare_func");</TT
>.
     </P
></BLOCKQUOTE
></DIV
><P  >     See also
     <SPAN HREF="#"><B  CLASS="function" >array_diff()</B
></A
>,
     <SPAN HREF="#"><B  CLASS="function" >array_diff_assoc()</B
></A
>,
     <SPAN HREF="#"><B  CLASS="function" >array_diff_uassoc()</B
></A
>,
     <SPAN HREF="#"><B  CLASS="function" >array_udiff()</B
></A
>,
     <SPAN HREF="#"><B  CLASS="function" >array_udiff_assoc()</B
></A
>, 
     <SPAN HREF="#"><B  CLASS="function" >array_intersect()</B
></A
>,  
     <SPAN HREF="#"><B  CLASS="function" >array_intersect_assoc()</B
></A
>,
     <B  CLASS="function" >array_uintersect()</B
>,  
     <B  CLASS="function" >array_uintersect_assoc()</B
> and 
     <B  CLASS="function" >array_uintersect_uassoc()</B
>.
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_udiff</name>
            <signature><![CDATA[array array_udiff ( array array1, array array2 [, array ..., callback data_compare_func])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9328" ></A
><H2  >Description</H2
>array <B  CLASS="methodname" >array_udiff</B
> ( array array1, array array2 [, array ..., callback data_compare_func])<BR  ></BR
><P  >     <B  CLASS="function" >array_udiff()</B
> returns an array
     containing all the values of <TT  CLASS="parameter" ><I  >array1</I
></TT
>
     that are not present in any of the other arguments.
     Note that keys are preserved. For the comparison of the data
     <TT  CLASS="parameter" ><I  >data_compare_func</I
></TT
> is used.
     It must return an integer less than, equal
     to, or greater than zero if the first argument is considered to
     be respectively less than, equal to, or greater than the
     second. This is unlike <SPAN HREF="#"><B  CLASS="function" >array_diff()</B
></A
> which uses an
     internal function for comparing the data.
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9351" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_udiff()</B
> example</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /></font><font  color="#007700">class </font><font  color="#0000BB">cr </font><font  color="#007700">{<br  />    </font><font  color="#0000BB">private $priv_member</font><font  color="#007700">;<br  />    function </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">$val</font><font  color="#007700">) <br  />    {<br  />        </font><font  color="#0000BB">$this</font><font  color="#007700">-></font><font  color="#0000BB">priv_member </font><font  color="#007700">= </font><font  color="#0000BB">$val</font><font  color="#007700">;<br  />    }<br  />    <br  />    function </font><font  color="#0000BB">comp_func_cr</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">) <br  />    {<br  />        if (</font><font  color="#0000BB">$a</font><font  color="#007700">-></font><font  color="#0000BB">priv_member </font><font  color="#007700">=== </font><font  color="#0000BB">$b</font><font  color="#007700">-></font><font  color="#0000BB">priv_member</font><font  color="#007700">) return </font><font  color="#0000BB">0</font><font  color="#007700">;<br  />        return (</font><font  color="#0000BB">$a</font><font  color="#007700">-></font><font  color="#0000BB">priv_member </font><font  color="#007700">> </font><font  color="#0000BB">$b</font><font  color="#007700">-></font><font  color="#0000BB">priv_member</font><font  color="#007700">)? </font><font  color="#0000BB">1</font><font  color="#007700">:-</font><font  color="#0000BB">1</font><font  color="#007700">;<br  />    }<br  />}<br  /></font><font  color="#0000BB">$a </font><font  color="#007700">= array(</font><font  color="#DD0000">"0.1" </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">9</font><font  color="#007700">), </font><font  color="#DD0000">"0.5" </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">12</font><font  color="#007700">), </font><font  color="#0000BB">0 </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">23</font><font  color="#007700">), </font><font  color="#0000BB">1</font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">4</font><font  color="#007700">), </font><font  color="#0000BB">2 </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(-</font><font  color="#0000BB">15</font><font  color="#007700">),);<br  /></font><font  color="#0000BB">$b </font><font  color="#007700">= array(</font><font  color="#DD0000">"0.2" </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">9</font><font  color="#007700">), </font><font  color="#DD0000">"0.5" </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">22</font><font  color="#007700">), </font><font  color="#0000BB">0 </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">3</font><font  color="#007700">), </font><font  color="#0000BB">1</font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(</font><font  color="#0000BB">4</font><font  color="#007700">), </font><font  color="#0000BB">2 </font><font  color="#007700">=> new </font><font  color="#0000BB">cr</font><font  color="#007700">(-</font><font  color="#0000BB">15</font><font  color="#007700">),);<br  /><br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_udiff</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">, array(</font><font  color="#DD0000">"cr"</font><font  color="#007700">, </font><font  color="#DD0000">"comp_func_cr"</font><font  color="#007700">));<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$result</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       The result is:
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
(
    [0.5] => cr Object
        (
            [priv_member:private] => 12
        )

    [0] => cr Object
        (
            [priv_member:private] => 23
        )

)</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      Two elements are considered equal if and only if
      <TT  CLASS="literal" >(string) $elem1 === (string) $elem2</TT
>. In words:
      when the string representation is the same.
     </P
></BLOCKQUOTE
></DIV
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      Please note that this function only checks one dimension of a n-dimensional
      array. Of course you can check deeper dimensions by using
      <TT  CLASS="literal" >array_udiff($array1[0], $array2[0], "data_compare_func");</TT
>.
     </P
></BLOCKQUOTE
></DIV
><P  >     See also
     <SPAN HREF="#"><B  CLASS="function" >array_diff()</B
></A
>,
     <SPAN HREF="#"><B  CLASS="function" >array_diff_assoc()</B
></A
>,
     <SPAN HREF="#"><B  CLASS="function" >array_diff_uassoc()</B
></A
>,
     <SPAN HREF="#"><B  CLASS="function" >array_udiff_assoc()</B
></A
>, 
     <SPAN HREF="#"><B  CLASS="function" >array_udiff_uassoc()</B
></A
>, 
     <SPAN HREF="#"><B  CLASS="function" >array_intersect()</B
></A
>,  
     <SPAN HREF="#"><B  CLASS="function" >array_intersect_assoc()</B
></A
>,
     <B  CLASS="function" >array_uintersect()</B
>,  
     <B  CLASS="function" >array_uintersect_assoc()</B
> and 
     <B  CLASS="function" >array_uintersect_uassoc()</B
>.
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_unique</name>
            <signature><![CDATA[array array_unique ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9378" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_unique</B
> ( array array)<BR  ></BR
><P  >     <B  CLASS="function" >array_unique()</B
> 接受
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 作为输入并返回没有重复值的新数组。
    </P
><P  >     注意键名保留不变。<B  CLASS="function" >array_unique()</B
>
     先将值作为字符串排序，然后对每个值只保留第一个遇到的键名，接着忽略所有后面的键名。这并不意味着在未排序的
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 中同一个值的第一个出现的键名会被保留。
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      当且仅当
      <TT  CLASS="literal" >(string) $elem1 === (string) $elem2</TT
> 时两个单元被认为相同。就是说，当字符串的表达一样时。
     </P
><P  >      第一个单元将被保留。
     </P
></BLOCKQUOTE
></DIV
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9397" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_unique()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$input </font><font  color="#007700">= array (</font><font  color="#DD0000">"a" </font><font  color="#007700">=> </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">, </font><font  color="#DD0000">"b" </font><font  color="#007700">=> </font><font  color="#DD0000">"green"</font><font  color="#007700">, </font><font  color="#DD0000">"blue"</font><font  color="#007700">, </font><font  color="#DD0000">"red"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_unique </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$result</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       上例将输出：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Array<br  />(<br  />    [a] => green<br  />    [0] => red<br  />    [1] => blue<br  />)</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9404" ></A
><P  ><B  >例子 2. <B  CLASS="function" >array_unique()</B
> 和类型</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$input </font><font  color="#007700">= array (</font><font  color="#0000BB">4</font><font  color="#007700">,</font><font  color="#DD0000">"4"</font><font  color="#007700">,</font><font  color="#DD0000">"3"</font><font  color="#007700">,</font><font  color="#0000BB">4</font><font  color="#007700">,</font><font  color="#0000BB">3</font><font  color="#007700">,</font><font  color="#DD0000">"3"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">array_unique </font><font  color="#007700">(</font><font  color="#0000BB">$input</font><font  color="#007700">);<br  /></font><font  color="#0000BB">var_dump</font><font  color="#007700">(</font><font  color="#0000BB">$result</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       本脚本将输出：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
array(2) {<br  />  [0] => int(4)<br  />  [2] => string(1) "3"<br  />}</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_unshift</name>
            <signature><![CDATA[int array_unshift ( array array, mixed var [, mixed ...])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9414" ></A
><H2  >说明</H2
>int <B  CLASS="methodname" >array_unshift</B
> ( array array, mixed var [, mixed ...])<BR  ></BR
><P  >     <B  CLASS="function" >array_unshift()</B
> 将传入的单元插入到
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 数组的开头。注意单元是作为整体被插入的，因此传入单元将保持同样的顺序。所有的数值键名将修改为从零开始重新计数，所有的文字键名保持不变。
    </P
><P  >     返回 <TT  CLASS="parameter" ><I  >array</I
></TT
> 数组新的单元数目。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9434" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_unshift()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$queue </font><font  color="#007700">= array (</font><font  color="#DD0000">"orange"</font><font  color="#007700">, </font><font  color="#DD0000">"banana"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">array_unshift </font><font  color="#007700">(</font><font  color="#0000BB">$queue</font><font  color="#007700">, </font><font  color="#DD0000">"apple"</font><font  color="#007700">, </font><font  color="#DD0000">"raspberry"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       这将使 <TT  CLASS="varname" >$queue</TT
> 包含如下单元：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Array<br  />(<br  />    [0] => apple<br  />    [1] => raspberry<br  />    [2] => orange<br  />    [3] => banana<br  />)</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_shift()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_push()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >array_pop()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_values</name>
            <signature><![CDATA[array array_values ( array input)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9449" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array_values</B
> ( array input)<BR  ></BR
><P  >     <B  CLASS="function" >array_values()</B
> 返回
     <TT  CLASS="parameter" ><I  >input</I
></TT
> 数组中所有的值并给其建立数字索引。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9461" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_values()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$array </font><font  color="#007700">= array (</font><font  color="#DD0000">"size" </font><font  color="#007700">=> </font><font  color="#DD0000">"XL"</font><font  color="#007700">, </font><font  color="#DD0000">"color" </font><font  color="#007700">=> </font><font  color="#DD0000">"gold"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">array_values </font><font  color="#007700">(</font><font  color="#0000BB">$array</font><font  color="#007700">));<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       上例将输出：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Array<br  />(<br  />    [0] => XL<br  />    [1] => gold<br  />)</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_keys()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array_walk</name>
            <signature><![CDATA[bool array_walk ( array array, callback function [, mixed userdata])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9473" ></A
><H2  >说明</H2
>bool <B  CLASS="methodname" >array_walk</B
> ( array array, callback function [, mixed userdata])<BR  ></BR
><P  >     如果成功则返回 <TT  CLASS="constant" ><B  >TRUE</B
></TT
>，失败则返回 <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。
    </P
><P  >     将用户自定义函数 <TT  CLASS="parameter" ><I  >function</I
></TT
> 应用到
     <TT  CLASS="parameter" ><I  >array</I
></TT
> 数组中的每个单元。典型情况下
     <TT  CLASS="parameter" ><I  >function</I
></TT
> 接受两个参数。<TT  CLASS="parameter" ><I  >array</I
></TT
>
     参数的值作为第一个，键名作为第二个。如果提供了可选参数
     <TT  CLASS="parameter" ><I  >userdata</I
></TT
>，将被作为第三个参数传递给
     callback <TT  CLASS="parameter" ><I  >function</I
></TT
>。
    </P
><P  >     如果 <TT  CLASS="parameter" ><I  >function</I
></TT
> 函数需要的参数比给出的多，则每次
     <B  CLASS="function" >array_walk()</B
> 调用 <TT  CLASS="parameter" ><I  >function</I
></TT
>
     时都会产生一个 <SPAN HREF="#">E_WARNING</A
>
     级的错误。这些警告可以通过在 <B  CLASS="function" >array_walk()</B
> 调用前加上
     PHP 的错误操作符 <SPAN HREF="#">@</A
>
     来抑制，或者用 <SPAN HREF="#"><B  CLASS="function" >error_reporting()</B
></A
>。
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      如果 <TT  CLASS="parameter" ><I  >function</I
></TT
> 需要直接作用于数组中的值，则给
      <TT  CLASS="parameter" ><I  >function</I
></TT
> 的第一个参数指定为
      <SPAN HREF="#">reference</A
>。这样任何对这些单元的改变也将会改变原始数组本身。
     </P
></BLOCKQUOTE
></DIV
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      将键名和 userdata 传递到 <TT  CLASS="parameter" ><I  >func</I
></TT
> 中是 PHP 4.0 新增加的。
     </P
></BLOCKQUOTE
></DIV
><P  >     <B  CLASS="function" >array_walk()</B
> 不会受到 <TT  CLASS="parameter" ><I  >array</I
></TT
>
     内部数组指针的影响。<B  CLASS="function" >array_walk()</B
>
     会遍历整个数组而不管指针的位置。要重置指针，用 <SPAN HREF="#"><B  CLASS="function" >reset()</B
></A
>。在
     PHP 3 中，<B  CLASS="function" >array_walk()</B
> 会重置指针。
    </P
><P  >     用户不应在回调函数中改变该数组本身。例如增加/删除单元，unset
     单元等等。如果 <B  CLASS="function" >array_walk()</B
>
     作用的数组改变了，则此函数的的行为未经定义，且不可预期。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9522" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array_walk()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$fruits </font><font  color="#007700">= array (</font><font  color="#DD0000">"d"</font><font  color="#007700">=></font><font  color="#DD0000">"lemon"</font><font  color="#007700">, </font><font  color="#DD0000">"a"</font><font  color="#007700">=></font><font  color="#DD0000">"orange"</font><font  color="#007700">, </font><font  color="#DD0000">"b"</font><font  color="#007700">=></font><font  color="#DD0000">"banana"</font><font  color="#007700">, </font><font  color="#DD0000">"c"</font><font  color="#007700">=></font><font  color="#DD0000">"apple"</font><font  color="#007700">);<br  /><br  />function </font><font  color="#0000BB">test_alter </font><font  color="#007700">(&</font><font  color="#0000BB">$item1</font><font  color="#007700">, </font><font  color="#0000BB">$key</font><font  color="#007700">, </font><font  color="#0000BB">$prefix</font><font  color="#007700">) {<br  />    </font><font  color="#0000BB">$item1 </font><font  color="#007700">= </font><font  color="#DD0000">"$prefix: $item1"</font><font  color="#007700">;<br  />}<br  /><br  />function </font><font  color="#0000BB">test_print </font><font  color="#007700">(</font><font  color="#0000BB">$item2</font><font  color="#007700">, </font><font  color="#0000BB">$key</font><font  color="#007700">) {<br  />    echo </font><font  color="#DD0000">"$key. $item2<br>\n"</font><font  color="#007700">;<br  />}<br  />echo </font><font  color="#DD0000">"Before ...:\n"</font><font  color="#007700">;<br  /></font><font  color="#0000BB">array_walk </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">, </font><font  color="#DD0000">'test_print'</font><font  color="#007700">);<br  /><br  /></font><font  color="#0000BB">array_walk </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">, </font><font  color="#DD0000">'test_alter'</font><font  color="#007700">, </font><font  color="#DD0000">'fruit'</font><font  color="#007700">);<br  />echo </font><font  color="#DD0000">"... and after:\n"</font><font  color="#007700">;<br  /><br  /></font><font  color="#0000BB">array_walk </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">, </font><font  color="#DD0000">'test_print'</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       以上程序输出为：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Before ...:<br  />d. lemon<br  />a. orange<br  />b. banana<br  />c. apple<br  />... and after:<br  />d. fruit: lemon<br  />a. fruit: orange<br  />b. fruit: banana<br  />c. fruit: apple</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >list()</B
></A
>，<SPAN HREF="#">foreach</A
>，<SPAN HREF="#"><B  CLASS="function" >each()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >call_user_func_array()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>array</name>
            <signature><![CDATA[array array ( [mixed ...])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9537" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >array</B
> ( [mixed ...])<BR  ></BR
><P  >     返回根据参数建立的数组。参数可以用 <TT  CLASS="literal" >=></TT
>
     运算符给出索引。关于数组是什么的信息请阅读<SPAN HREF="#">数组</A
>一节。
    </P
><P  >     </P><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
       <B  CLASS="function" >array()</B
> 是一个语言结构，用于字面上表示数组，不是常规的函数。
      </P
></BLOCKQUOTE
></DIV
>
    </P
><P  >     语法“index => values”，用逗号分开，定义了索引和值。索引可以是字符串或数字。如果省略了索引，会自动产生从
     0 开始的整数索引。如果索引是整数，则下一个产生的索引将是目前最大的整数索引
     + 1。注意如果定义了两个完全一样的索引，则后面一个会覆盖前一个。
    </P
><P  >     下面的例子演示了怎样建立一个二维数组，怎样给相应的数组指定键名，以及怎样在普通数组中略过和继续数字索引。
     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9554" ></A
><P  ><B  >例子 1. <B  CLASS="function" >array()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$fruits </font><font  color="#007700">= array (<br  />    </font><font  color="#DD0000">"fruits"  </font><font  color="#007700">=> array (</font><font  color="#DD0000">"a"</font><font  color="#007700">=></font><font  color="#DD0000">"orange"</font><font  color="#007700">, </font><font  color="#DD0000">"b"</font><font  color="#007700">=></font><font  color="#DD0000">"banana"</font><font  color="#007700">, </font><font  color="#DD0000">"c"</font><font  color="#007700">=></font><font  color="#DD0000">"apple"</font><font  color="#007700">),<br  />    </font><font  color="#DD0000">"numbers" </font><font  color="#007700">=> array (</font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#0000BB">2</font><font  color="#007700">, </font><font  color="#0000BB">3</font><font  color="#007700">, </font><font  color="#0000BB">4</font><font  color="#007700">, </font><font  color="#0000BB">5</font><font  color="#007700">, </font><font  color="#0000BB">6</font><font  color="#007700">),<br  />    </font><font  color="#DD0000">"holes"   </font><font  color="#007700">=> array (</font><font  color="#DD0000">"first"</font><font  color="#007700">, </font><font  color="#0000BB">5 </font><font  color="#007700">=> </font><font  color="#DD0000">"second"</font><font  color="#007700">, </font><font  color="#DD0000">"third"</font><font  color="#007700">)<br  />);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9559" ></A
><P  ><B  >例子 2. <B  CLASS="function" >array()</B
> 的自动索引</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$array </font><font  color="#007700">= array( </font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#0000BB">1</font><font  color="#007700">,  </font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#0000BB">8</font><font  color="#007700">=></font><font  color="#0000BB">1</font><font  color="#007700">,  </font><font  color="#0000BB">4</font><font  color="#007700">=></font><font  color="#0000BB">1</font><font  color="#007700">, </font><font  color="#0000BB">19</font><font  color="#007700">, </font><font  color="#0000BB">3</font><font  color="#007700">=></font><font  color="#0000BB">13</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$array</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       将显示：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Array<br  />(<br  />    [0] => 1<br  />    [1] => 1<br  />    [2] => 1<br  />    [3] => 13<br  />    [4] => 1<br  />    [8] => 1<br  />    [9] => 19<br  />)</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     注意索引 3 被定义了两次，保留了最后的值 13。索引 4 在 索引
     8 之后定义，下一个自动生成的索引（值为 19 那个）为 9，因为最大的索引是 8。
    </P
><P  >     本例建立了从 1 开始的数组。
     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9567" ></A
><P  ><B  >例子 3. 从 1 开始索引的 <B  CLASS="function" >array()</B
></B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$firstquarter  </font><font  color="#007700">= array(</font><font  color="#0000BB">1 </font><font  color="#007700">=> </font><font  color="#DD0000">'January'</font><font  color="#007700">, </font><font  color="#DD0000">'February'</font><font  color="#007700">, </font><font  color="#DD0000">'March'</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$firstquarter</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       将显示：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
(
    [1] => January
    [2] => February
    [3] => March
)</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_pad()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >list()</B
></A
>，<SPAN HREF="#">foreach</A
>
     和 <SPAN HREF="#"><B  CLASS="function" >range()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>arsort</name>
            <signature><![CDATA[void arsort ( array array [, int sort_flags])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9582" ></A
><H2  >说明</H2
>void <B  CLASS="methodname" >arsort</B
> ( array array [, int sort_flags])<BR  ></BR
><P  >     本函数对数组进行排序，数组的索引保持和单元的关联。主要用于对那些单元顺序很重要的结合数组进行排序。
    </P
><TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9594" ></A
><P  ><B  >例子 1. <B  CLASS="function" >arsort()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$fruits </font><font  color="#007700">= array (</font><font  color="#DD0000">"d"</font><font  color="#007700">=></font><font  color="#DD0000">"lemon"</font><font  color="#007700">, </font><font  color="#DD0000">"a"</font><font  color="#007700">=></font><font  color="#DD0000">"orange"</font><font  color="#007700">, </font><font  color="#DD0000">"b"</font><font  color="#007700">=></font><font  color="#DD0000">"banana"</font><font  color="#007700">, </font><font  color="#DD0000">"c"</font><font  color="#007700">=></font><font  color="#DD0000">"apple"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">arsort </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">);<br  /></font><font  color="#0000BB">reset </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">);<br  />while (list (</font><font  color="#0000BB">$key</font><font  color="#007700">, </font><font  color="#0000BB">$val</font><font  color="#007700">) = </font><font  color="#0000BB">each </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"$key = $val\n"</font><font  color="#007700">;<br  />}<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >      本例输出如下：
     </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >a = orange
d = lemon
b = banana
c = apple</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
><P  >     fruits 被按照字母顺序逆向排序，并且单元的索引关系不变。
    </P
><P  >     可以用可选的参数 <TT  CLASS="parameter" ><I  >sort_flags</I
></TT
>
     改变排序的行为，详情见 <SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>。
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >asort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >rsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >ksort()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>asort</name>
            <signature><![CDATA[void asort ( array array [, int sort_flags])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9613" ></A
><H2  >说明</H2
>void <B  CLASS="methodname" >asort</B
> ( array array [, int sort_flags])<BR  ></BR
><P  >     本函数对数组进行排序，数组的索引保持和单元的关联。主要用于对那些单元顺序很重要的结合数组进行排序。
    </P
><TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9625" ></A
><P  ><B  >例子 1. <B  CLASS="function" >asort()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$fruits </font><font  color="#007700">= array (</font><font  color="#DD0000">"d"</font><font  color="#007700">=></font><font  color="#DD0000">"lemon"</font><font  color="#007700">, </font><font  color="#DD0000">"a"</font><font  color="#007700">=></font><font  color="#DD0000">"orange"</font><font  color="#007700">, </font><font  color="#DD0000">"b"</font><font  color="#007700">=></font><font  color="#DD0000">"banana"</font><font  color="#007700">, </font><font  color="#DD0000">"c"</font><font  color="#007700">=></font><font  color="#DD0000">"apple"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">asort </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">);<br  /></font><font  color="#0000BB">reset </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">);<br  />while (list (</font><font  color="#0000BB">$key</font><font  color="#007700">, </font><font  color="#0000BB">$val</font><font  color="#007700">) = </font><font  color="#0000BB">each </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"$key = $val\n"</font><font  color="#007700">;<br  />}<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >      本例显示为：
     </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >c = apple
b = banana
d = lemon
a = orange</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
><P  >     fruits 被按照字母顺序排序，并且单元的索引关系不变。
    </P
><P  >     可以用可选的参数 <TT  CLASS="parameter" ><I  >sort_flags</I
></TT
> 改变排序的行为，详情见 <SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>。
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >arsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >rsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >ksort()</B
></A
> 和 <SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>compact</name>
            <signature><![CDATA[array compact ( mixed varname [, mixed ...])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9644" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >compact</B
> ( mixed varname [, mixed ...])<BR  ></BR
><P  >     <B  CLASS="function" >compact()</B
> 接受可变的参数数目。每个参数可以是一个包括变量名的字符串或者是一个包含变量名的数组，该数组中还可以包含其它单元内容为变量名的数组，
     <B  CLASS="function" >compact()</B
> 可以递归处理。
    </P
><P  >     对每个参数，<B  CLASS="function" >compact()</B
>
     在当前的符号表中查找该变量名并将它添加到输出的数组中，变量名成为键名而变量的内容成为该键的值。简单说，它做的事和
     <SPAN HREF="#"><B  CLASS="function" >extract()</B
></A
> 正好相反。返回将所有变量添加进去后的数组。
    </P
><P  >     任何没有设定为变量名的字符串都被跳过。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9663" ></A
><P  ><B  >例子 1. <B  CLASS="function" >compact()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$city </font><font  color="#007700">= </font><font  color="#DD0000">"San Francisco"</font><font  color="#007700">;<br  /></font><font  color="#0000BB">$state </font><font  color="#007700">= </font><font  color="#DD0000">"CA"</font><font  color="#007700">;<br  /></font><font  color="#0000BB">$event </font><font  color="#007700">= </font><font  color="#DD0000">"SIGGRAPH"</font><font  color="#007700">;<br  /></font><font  color="#0000BB">$location_vars </font><font  color="#007700">= array (</font><font  color="#DD0000">"city"</font><font  color="#007700">, </font><font  color="#DD0000">"state"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">compact </font><font  color="#007700">(</font><font  color="#DD0000">"event"</font><font  color="#007700">, </font><font  color="#DD0000">"nothing_here"</font><font  color="#007700">, </font><font  color="#0000BB">$location_vars</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       经过处理后，<TT  CLASS="varname" >$result</TT
> 为：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Array<br  />(<br  />    [event] => SIGGRAPH<br  />    [city] => San Francisco<br  />    [state] => CA<br  />)</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >extract()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>count</name>
            <signature><![CDATA[int count ( mixed var [, int mode])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9676" ></A
><H2  >说明</H2
>int <B  CLASS="methodname" >count</B
> ( mixed var [, int mode])<BR  ></BR
><P  >     返回 <TT  CLASS="parameter" ><I  >var</I
></TT
> 中的单元数目，通常是一个
     <SPAN HREF="#"><B  CLASS="type" >array</B
></A
>（任何其它类型都只有一个单元）。
    </P
><P  >     如果 <TT  CLASS="parameter" ><I  >var</I
></TT
> 不是数组类型，将返回
     <TT  CLASS="literal" >1</TT
>（例外：<TT  CLASS="literal" >count(<TT  CLASS="constant" ><B  >NULL</B
></TT
>)</TT
> 的结果是 <TT  CLASS="literal" >0</TT
>）。
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      可选的 <TT  CLASS="parameter" ><I  >mode</I
></TT
> 参数自 PHP 4.2.0 起可用。
     </P
></BLOCKQUOTE
></DIV
><P  >     如果可选的 <TT  CLASS="parameter" ><I  >mode</I
></TT
> 参数设为
     <TT  CLASS="constant" ><B  >COUNT_RECURSIVE</B
></TT
>（或 1），<B  CLASS="function" >count()</B
>
     将递归地对数组计数。对计算多维数组的所有单元尤其有用。<TT  CLASS="parameter" ><I  >mode</I
></TT
>
     的默认值是 <TT  CLASS="literal" >0</TT
>。
    </P
><DIV  CLASS="caution" ><P  ></P
><TABLE  CLASS="caution" BORDER="1" WIDTH="100%" ><TR  ><TD  ALIGN="CENTER" ><B  >注意</B
></TD
></TR
><TR  ><TD  ALIGN="LEFT" ><P  >      <B  CLASS="function" >count()</B
> 对没有初始化的变量返回 0，但对于空的数组也会返回 0。用
      <SPAN HREF="#"><B  CLASS="function" >isset()</B
></A
> 来测试变量是否已经初始化。
     </P
></TD
></TR
></TABLE
></DIV
><P  >     请参考手册中<SPAN HREF="#">数组</A
>一节中关于怎样在
     PHP 中实现和使用数组的详细解释。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9712" ></A
><P  ><B  >例子 1. <B  CLASS="function" >count()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$a</font><font  color="#007700">[</font><font  color="#0000BB">0</font><font  color="#007700">] = </font><font  color="#0000BB">1</font><font  color="#007700">;<br  /></font><font  color="#0000BB">$a</font><font  color="#007700">[</font><font  color="#0000BB">1</font><font  color="#007700">] = </font><font  color="#0000BB">3</font><font  color="#007700">;<br  /></font><font  color="#0000BB">$a</font><font  color="#007700">[</font><font  color="#0000BB">2</font><font  color="#007700">] = </font><font  color="#0000BB">5</font><font  color="#007700">;<br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">count </font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">);<br  /></font><font  color="#FF8000">// $result == 3<br  /><br  /></font><font  color="#0000BB">$b</font><font  color="#007700">[</font><font  color="#0000BB">0</font><font  color="#007700">] = </font><font  color="#0000BB">7</font><font  color="#007700">;<br  /></font><font  color="#0000BB">$b</font><font  color="#007700">[</font><font  color="#0000BB">5</font><font  color="#007700">] = </font><font  color="#0000BB">9</font><font  color="#007700">;<br  /></font><font  color="#0000BB">$b</font><font  color="#007700">[</font><font  color="#0000BB">10</font><font  color="#007700">] = </font><font  color="#0000BB">11</font><font  color="#007700">;<br  /></font><font  color="#0000BB">$result </font><font  color="#007700">= </font><font  color="#0000BB">count </font><font  color="#007700">(</font><font  color="#0000BB">$b</font><font  color="#007700">);<br  /></font><font  color="#FF8000">// $result == 3;<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9717" ></A
><P  ><B  >例子 2. <B  CLASS="function" >count()</B
> 的递归例子（PHP >= 4.2.0）</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$food </font><font  color="#007700">= array( </font><font  color="#DD0000">'fruits'  </font><font  color="#007700">=> array(</font><font  color="#DD0000">'orange'</font><font  color="#007700">, </font><font  color="#DD0000">'banana'</font><font  color="#007700">, </font><font  color="#DD0000">'apple'</font><font  color="#007700">),<br  />               </font><font  color="#DD0000">'veggie'  </font><font  color="#007700">=> array(</font><font  color="#DD0000">'carrot'</font><font  color="#007700">, </font><font  color="#DD0000">'collard'</font><font  color="#007700">,</font><font  color="#DD0000">'pea'</font><font  color="#007700">));<br  /><br  /></font><font  color="#FF8000">// recursive count<br  /></font><font  color="#007700">echo </font><font  color="#0000BB">count</font><font  color="#007700">(</font><font  color="#0000BB">$food</font><font  color="#007700">,</font><font  color="#0000BB">COUNT_RECURSIVE</font><font  color="#007700">);  </font><font  color="#FF8000">// output 8<br  /><br  />// normal count<br  /></font><font  color="#007700">echo </font><font  color="#0000BB">count</font><font  color="#007700">(</font><font  color="#0000BB">$food</font><font  color="#007700">);                  </font><font  color="#FF8000">// output 2<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      <SPAN HREF="#"><B  CLASS="function" >sizeof()</B
></A
> 函数是 <B  CLASS="function" >count()</B
>
      的<SPAN HREF="#">别名</A
>。
     </P
></BLOCKQUOTE
></DIV
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >is_array()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >isset()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >strlen()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>current</name>
            <signature><![CDATA[mixed current ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9734" ></A
><H2  >说明</H2
>mixed <B  CLASS="methodname" >current</B
> ( array array)<BR  ></BR
><P  >     每个数组中都有一个内部的指针指向它“当前的”单元，初始指向插入到数组中的第一个单元。
    </P
><P  >     <B  CLASS="function" >current()</B
> 函数返回当前被内部指针指向的数组单元的值，并不移动指针。如果内部指针指向超出了单元列表的末端，<B  CLASS="function" >current()</B
>
     返回 <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。
     </P><DIV  CLASS="warning" ><P  ></P
><TABLE  CLASS="warning" BORDER="1" WIDTH="100%" ><TR  ><TD  ALIGN="CENTER" ><B  >警告</B
></TD
></TR
><TR  ><TD  ALIGN="LEFT" ><P  >       如果数组包含有空的单元（0 或者 ""，空字符串）则本函数在碰到这个单元时也返回
       <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。这使得用 <B  CLASS="function" >current()</B
> 不可能判断是否到了此数组列表的末端。要正确遍历可能含有空单元的数组，用
       <SPAN HREF="#"><B  CLASS="function" >each()</B
></A
> 函数。
      </P
></TD
></TR
></TABLE
></DIV
>
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9753" ></A
><P  ><B  >例子 1. <B  CLASS="function" >current()</B
> 及相关函数的用法示例</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$transport </font><font  color="#007700">= array(</font><font  color="#DD0000">'foot'</font><font  color="#007700">, </font><font  color="#DD0000">'bike'</font><font  color="#007700">, </font><font  color="#DD0000">'car'</font><font  color="#007700">, </font><font  color="#DD0000">'plane'</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">current</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">); </font><font  color="#FF8000">// $mode = 'foot';<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">next</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">);    </font><font  color="#FF8000">// $mode = 'bike';<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">current</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">); </font><font  color="#FF8000">// $mode = 'bike';<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">prev</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">);    </font><font  color="#FF8000">// $mode = 'foot';<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">end</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">);     </font><font  color="#FF8000">// $mode = 'plane';<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">current</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">); </font><font  color="#FF8000">// $mode = 'plane';<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >end()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >key()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >next()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >prev()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >reset()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>each</name>
            <signature><![CDATA[array each ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9767" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >each</B
> ( array array)<BR  ></BR
><P  >     返回 <TT  CLASS="parameter" ><I  >array</I
></TT
> 数组中当前指针位置的键／值对并向前移动数组指针。键值对被返回为四个单元的数组，键名为
     <SPAN  CLASS="emphasis" ><I  CLASS="emphasis" >0</I
></SPAN
>，<SPAN  CLASS="emphasis" ><I  CLASS="emphasis" >1</I
></SPAN
>，<SPAN  CLASS="emphasis" ><I  CLASS="emphasis" >key</I
></SPAN
>
     和 <SPAN  CLASS="emphasis" ><I  CLASS="emphasis" >value</I
></SPAN
>。单元 <SPAN  CLASS="emphasis" ><I  CLASS="emphasis" >0</I
></SPAN
> 和
     <SPAN  CLASS="emphasis" ><I  CLASS="emphasis" >key</I
></SPAN
> 包含有数组单元的键名，<SPAN  CLASS="emphasis" ><I  CLASS="emphasis" >1</I
></SPAN
> 和
     <SPAN  CLASS="emphasis" ><I  CLASS="emphasis" >value</I
></SPAN
> 包含有数据。
    </P
><P  >     如果内部指针越过了数组的末端，则 <B  CLASS="function" >each()</B
> 返回 <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9789" ></A
><P  ><B  >例子 1. <B  CLASS="function" >each()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$foo </font><font  color="#007700">= array (</font><font  color="#DD0000">"bob"</font><font  color="#007700">, </font><font  color="#DD0000">"fred"</font><font  color="#007700">, </font><font  color="#DD0000">"jussi"</font><font  color="#007700">, </font><font  color="#DD0000">"jouni"</font><font  color="#007700">, </font><font  color="#DD0000">"egon"</font><font  color="#007700">, </font><font  color="#DD0000">"marliese"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$bar </font><font  color="#007700">= </font><font  color="#0000BB">each </font><font  color="#007700">(</font><font  color="#0000BB">$foo</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$bar</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       <TT  CLASS="varname" >$bar</TT
> 现在包含有如下的键／值对：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
{
    [1] => bob
    [value] => bob
    [0] => 0
    [key] => 0
}</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     </P><DIV  CLASS="informalexample" ><A  NAME="AEN9797" ></A
><P  ></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$foo </font><font  color="#007700">= array (</font><font  color="#DD0000">"Robert" </font><font  color="#007700">=> </font><font  color="#DD0000">"Bob"</font><font  color="#007700">, </font><font  color="#DD0000">"Seppo" </font><font  color="#007700">=> </font><font  color="#DD0000">"Sepi"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$bar </font><font  color="#007700">= </font><font  color="#0000BB">each </font><font  color="#007700">(</font><font  color="#0000BB">$foo</font><font  color="#007700">);<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$bar</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       <TT  CLASS="varname" >$bar</TT
> 现在包含有如下的键／值对：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Array
{
    [1] => Bob
    [value] => Bob
    [0] => Robert
    [key] => Robert
}</PRE
></TD
></TR
></TABLE
><P  ></P
></DIV
>
    </P
><P  >     <B  CLASS="function" >each()</B
> 经常和 <SPAN HREF="#"><B  CLASS="function" >list()</B
></A
>
     结合使用来遍历数组，例如：
     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9805" ></A
><P  ><B  >例子 2. 用 <B  CLASS="function" >each()</B
> 遍历数组</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$fruit </font><font  color="#007700">= array(</font><font  color="#DD0000">'a' </font><font  color="#007700">=> </font><font  color="#DD0000">'apple'</font><font  color="#007700">, </font><font  color="#DD0000">'b' </font><font  color="#007700">=> </font><font  color="#DD0000">'banana'</font><font  color="#007700">, </font><font  color="#DD0000">'c' </font><font  color="#007700">=> </font><font  color="#DD0000">'cranberry'</font><font  color="#007700">);<br  /></font><font  color="#0000BB">reset </font><font  color="#007700">(</font><font  color="#0000BB">$fruit</font><font  color="#007700">);<br  />while (list (</font><font  color="#0000BB">$key</font><font  color="#007700">, </font><font  color="#0000BB">$val</font><font  color="#007700">) = </font><font  color="#0000BB">each </font><font  color="#007700">(</font><font  color="#0000BB">$fruit</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"$key => $val\n"</font><font  color="#007700">;<br  />}<br  /></font><font  color="#FF8000">/* Outputs:<br  /><br  />a => apple<br  />b => banana<br  />c => cranberry<br  /><br  />*/<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     在执行 <B  CLASS="function" >each()</B
>
     之后，数组指针将停留在数组中的下一个单元或者当碰到数组结尾时停留在最后一个单元。如果要再用
     each 遍历数组，必须使用 <SPAN HREF="#"><B  CLASS="function" >reset()</B
></A
>。
    </P
><DIV  CLASS="caution" ><P  ></P
><TABLE  CLASS="caution" BORDER="1" WIDTH="100%" ><TR  ><TD  ALIGN="CENTER" ><B  >注意</B
></TD
></TR
><TR  ><TD  ALIGN="LEFT" ><P  >      因为将一个数组赋值给另一个数组时会重置原来的数组指针，因此在上边的例子中如果我们在循环内部将
      <TT  CLASS="varname" >$fruit</TT
> 赋给了另一个变量的话将会导致无限循环。
     </P
></TD
></TR
></TABLE
></DIV
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >key()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >list()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >current()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >reset()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >next()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >prev()</B
></A
>
     和 <SPAN HREF="#">foreach</A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>end</name>
            <signature><![CDATA[mixed end ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9827" ></A
><H2  >说明</H2
>mixed <B  CLASS="methodname" >end</B
> ( array array)<BR  ></BR
><P  >     <B  CLASS="function" >end()</B
> 将 <TT  CLASS="parameter" ><I  >array</I
></TT
>
     的内部指针移动到最后一个单元，并返回该单元的值。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9839" ></A
><P  ><B  >例子 1. 简单的 <B  CLASS="function" >end()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /><br  />  $fruits </font><font  color="#007700">= array(</font><font  color="#DD0000">'apple'</font><font  color="#007700">,</font><font  color="#DD0000">'banana'</font><font  color="#007700">,</font><font  color="#DD0000">'cranberry'</font><font  color="#007700">);<br  /><br  />  print </font><font  color="#0000BB">end</font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">); </font><font  color="#FF8000">// cranberry<br  /><br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >current()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >each()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >next()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >reset()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>extract</name>
            <signature><![CDATA[int extract ( array var_array [, int extract_type [, string prefix]])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9852" ></A
><H2  >说明</H2
>int <B  CLASS="methodname" >extract</B
> ( array var_array [, int extract_type [, string prefix]])<BR  ></BR
><P  >     本函数用来将变量从数组中导入到当前的符号表中。接受结合数组
     <TT  CLASS="parameter" ><I  >var_array</I
></TT
> 作为参数并将键名当作变量名，值作为变量的值。对每个键／值对都会在当前的符号表中建立变量，并受到
     <TT  CLASS="parameter" ><I  >extract_type</I
></TT
> 和 <TT  CLASS="parameter" ><I  >prefix</I
></TT
> 参数的影响。
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      自版本 4.0.5 起本函数返回被提取的变量数目。
     </P
></BLOCKQUOTE
></DIV
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      <TT  CLASS="constant" ><B  >EXTR_IF_EXISTS</B
></TT
> 和 <TT  CLASS="constant" ><B  >EXTR_PREFIX_IF_EXISTS</B
></TT
> 是版本 4.2.0 中引进的。
     </P
></BLOCKQUOTE
></DIV
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      <TT  CLASS="constant" ><B  >EXTR_REFS</B
></TT
> 是版本 4.3.0 中引进的。
     </P
></BLOCKQUOTE
></DIV
><P  >     <B  CLASS="function" >extract()</B
> 检查每个键名看是否可以作为一个合法的变量名，同时也检查和符号表中已有的变量名的冲突。对待非法／数字和冲突的键名的方法将根据
     <TT  CLASS="parameter" ><I  >extract_type</I
></TT
> 参数决定。可以是以下值之一：
     </P><P  ></P
><DIV  CLASS="variablelist" ><DL  ><DT  ><TT  CLASS="constant" ><B  >EXTR_OVERWRITE</B
></TT
></DT
><DD  ><P  >         如果有冲突，覆盖已有的变量。
        </P
></DD
><DT  ><TT  CLASS="constant" ><B  >EXTR_SKIP</B
></TT
></DT
><DD  ><P  >         如果有冲突，不覆盖已有的变量。
        </P
></DD
><DT  ><TT  CLASS="constant" ><B  >EXTR_PREFIX_SAME</B
></TT
></DT
><DD  ><P  >如果有冲突，在变量名前加上前缀 <TT  CLASS="parameter" ><I  >prefix</I
></TT
>。
        </P
></DD
><DT  ><TT  CLASS="constant" ><B  >EXTR_PREFIX_ALL</B
></TT
></DT
><DD  ><P  >         给所有变量名加上前缀
         <TT  CLASS="parameter" ><I  >prefix</I
></TT
>。自 PHP 4.0.5 起这也包括了对数字索引的处理。
        </P
></DD
><DT  ><TT  CLASS="constant" ><B  >EXTR_PREFIX_INVALID</B
></TT
></DT
><DD  ><P  >         仅在非法／数字的变量名前加上前缀
         <TT  CLASS="parameter" ><I  >prefix</I
></TT
>。本标记是 PHP 4.0.5 新加的。
        </P
></DD
><DT  ><TT  CLASS="constant" ><B  >EXTR_IF_EXISTS</B
></TT
></DT
><DD  ><P  >         仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。可以用在已经定义了一组合法的变量，然后要从一个数组例如
         $_REQUEST 中提取值覆盖这些变量的场合。本标记是 PHP 4.2.0 新加的。
        </P
></DD
><DT  ><TT  CLASS="constant" ><B  >EXTR_PREFIX_IF_EXISTS</B
></TT
></DT
><DD  ><P  >         仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。本标记是
         PHP 4.2.0 新加的。
        </P
></DD
><DT  ><TT  CLASS="constant" ><B  >EXTR_REFS</B
></TT
></DT
><DD  ><P  >         将变量作为引用提取。这有力地表明了导入的变量仍然引用了
         <TT  CLASS="parameter" ><I  >var_array</I
></TT
> 参数的值。可以单独使用这个标志或者在
         <TT  CLASS="parameter" ><I  >extract_type</I
></TT
> 中用 OR 与其它任何标志结合使用。本标记是
         PHP 4.3.0 新加的。
        </P
></DD
></DL
></DIV
>
    </P
><P  >     如果没有指定 <TT  CLASS="parameter" ><I  >extract_type</I
></TT
>，则被假定为 <TT  CLASS="constant" ><B  >EXTR_OVERWRITE</B
></TT
>。
    </P
><P  >     注意 <TT  CLASS="parameter" ><I  >prefix</I
></TT
> 仅在
     <TT  CLASS="parameter" ><I  >extract_type</I
></TT
> 的值是
     <TT  CLASS="constant" ><B  >EXTR_PREFIX_SAME</B
></TT
>，<TT  CLASS="constant" ><B  >EXTR_PREFIX_ALL</B
></TT
>，<TT  CLASS="constant" ><B  >EXTR_PREFIX_INVALID</B
></TT
>
     或 <TT  CLASS="constant" ><B  >EXTR_PREFIX_IF_EXISTS</B
></TT
>
     时需要。如果附加了前缀后的结果不是合法的变量名，将不会导入到符号表中。
    </P
><P  >     <B  CLASS="function" >extract()</B
> 返回成功导入到符号表中的变量数目。
    </P
><P  >     <B  CLASS="function" >extract()</B
> 的一种可能用法是将 <SPAN HREF="#"><B  CLASS="function" >wddx_deserialize()</B
></A
>
     返回的结合数组中的内容导入到符号表变量中去。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN9944" ></A
><P  ><B  >例子 1. <B  CLASS="function" >extract()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /><br  /></font><font  color="#FF8000">/* 假定 $var_array 是 wddx_deserialize 返回的数组*/<br  /><br  /></font><font  color="#0000BB">$size </font><font  color="#007700">= </font><font  color="#DD0000">"large"</font><font  color="#007700">;<br  /></font><font  color="#0000BB">$var_array </font><font  color="#007700">= array (</font><font  color="#DD0000">"color" </font><font  color="#007700">=> </font><font  color="#DD0000">"blue"</font><font  color="#007700">,<br  />                    </font><font  color="#DD0000">"size"  </font><font  color="#007700">=> </font><font  color="#DD0000">"medium"</font><font  color="#007700">,<br  />                    </font><font  color="#DD0000">"shape" </font><font  color="#007700">=> </font><font  color="#DD0000">"sphere"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">extract </font><font  color="#007700">(</font><font  color="#0000BB">$var_array</font><font  color="#007700">, </font><font  color="#0000BB">EXTR_PREFIX_SAME</font><font  color="#007700">, </font><font  color="#DD0000">"wddx"</font><font  color="#007700">);<br  /><br  />print </font><font  color="#DD0000">"$color, $size, $shape, $wddx_size\n"</font><font  color="#007700">;<br  /><br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       以上例子将产生：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >blue, large, sphere, medium</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     <TT  CLASS="varname" >$size</TT
> 没有被覆盖，因为指定了
     <TT  CLASS="constant" ><B  >EXTR_PREFIX_SAME</B
></TT
>，这使得 <TT  CLASS="varname" >$wddx_size</TT
>
     被建立。如果指定了 <TT  CLASS="constant" ><B  >EXTR_SKIP</B
></TT
>，则 $wddx_size
     也不会被建立。<TT  CLASS="constant" ><B  >EXTR_OVERWRITE</B
></TT
> 将使 <TT  CLASS="varname" >$size</TT
>
     的值为“medium”，<TT  CLASS="constant" ><B  >EXTR_PREFIX_ALL</B
></TT
> 将建立新变量
     <TT  CLASS="varname" >$wddx_color</TT
>，<TT  CLASS="varname" >$wddx_size</TT
> 和
     <TT  CLASS="varname" >$wddx_shape</TT
>。
    </P
><P  >     必须使用结合数组，数字索引的数组将不会产生结果，除非用了
     <TT  CLASS="constant" ><B  >EXTR_PREFIX_ALL</B
></TT
> 或者 <TT  CLASS="constant" ><B  >EXTR_PREFIX_INVALID</B
></TT
>。
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >compact()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>in_array</name>
            <signature><![CDATA[bool in_array ( mixed needle, array haystack [, bool strict])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN9970" ></A
><H2  >说明</H2
>bool <B  CLASS="methodname" >in_array</B
> ( mixed needle, array haystack [, bool strict])<BR  ></BR
><P  >     在 <TT  CLASS="parameter" ><I  >haystack</I
></TT
> 中搜索
     <TT  CLASS="parameter" ><I  >needle</I
></TT
>，如果找到则返回 <TT  CLASS="constant" ><B  >TRUE</B
></TT
>，否则返回 <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。
    </P
><P  >     如果第三个参数 <TT  CLASS="parameter" ><I  >strict</I
></TT
> 的值为
     <TT  CLASS="constant" ><B  >TRUE</B
></TT
> 则 <B  CLASS="function" >in_array()</B
> 函数还会检查
     <TT  CLASS="parameter" ><I  >needle</I
></TT
> 的<SPAN HREF="#">类型</A
>是否和
     <TT  CLASS="parameter" ><I  >haystack</I
></TT
> 中的相同。
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      如果 <TT  CLASS="parameter" ><I  >needle</I
></TT
> 是字符串，则比较是区分大小写的。
     </P
></BLOCKQUOTE
></DIV
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      在 PHP 版本 4.2.0 之前，<TT  CLASS="parameter" ><I  >needle</I
></TT
> 不允许是一个数组。
     </P
></BLOCKQUOTE
></DIV
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10003" ></A
><P  ><B  >例子 1. <B  CLASS="function" >in_array()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$os </font><font  color="#007700">= array (</font><font  color="#DD0000">"Mac"</font><font  color="#007700">, </font><font  color="#DD0000">"NT"</font><font  color="#007700">, </font><font  color="#DD0000">"Irix"</font><font  color="#007700">, </font><font  color="#DD0000">"Linux"</font><font  color="#007700">);<br  />if (</font><font  color="#0000BB">in_array </font><font  color="#007700">(</font><font  color="#DD0000">"Irix"</font><font  color="#007700">, </font><font  color="#0000BB">$os</font><font  color="#007700">)) {<br  />    print </font><font  color="#DD0000">"Got Irix"</font><font  color="#007700">;<br  />}<br  />if (</font><font  color="#0000BB">in_array </font><font  color="#007700">(</font><font  color="#DD0000">"mac"</font><font  color="#007700">, </font><font  color="#0000BB">$os</font><font  color="#007700">)) {<br  />    print </font><font  color="#DD0000">"Got mac"</font><font  color="#007700">;<br  />}<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       第二个条件失败，因为 <B  CLASS="function" >in_array()</B
>
       是区分大小写的，所以以上程序显示为：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
Got Irix</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10011" ></A
><P  ><B  >例子 2. <B  CLASS="function" >in_array()</B
> 严格类型检查例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$a </font><font  color="#007700">= array(</font><font  color="#DD0000">'1.10'</font><font  color="#007700">, </font><font  color="#0000BB">12.4</font><font  color="#007700">, </font><font  color="#0000BB">1.13</font><font  color="#007700">);<br  /><br  />if (</font><font  color="#0000BB">in_array</font><font  color="#007700">(</font><font  color="#DD0000">'12.4'</font><font  color="#007700">, </font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">TRUE</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"'12.4' found with strict check\n"</font><font  color="#007700">;<br  />}<br  />if (</font><font  color="#0000BB">in_array</font><font  color="#007700">(</font><font  color="#0000BB">1.13</font><font  color="#007700">, </font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">TRUE</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"1.13 found with strict check\n"</font><font  color="#007700">;<br  />}<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       将显示：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
1.13 found with strict check</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10018" ></A
><P  ><B  >例子 3. <B  CLASS="function" >in_array()</B
> 中用数组作为 needle</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$a </font><font  color="#007700">= array(array(</font><font  color="#DD0000">'p'</font><font  color="#007700">, </font><font  color="#DD0000">'h'</font><font  color="#007700">), array(</font><font  color="#DD0000">'p'</font><font  color="#007700">, </font><font  color="#DD0000">'r'</font><font  color="#007700">), </font><font  color="#DD0000">'o'</font><font  color="#007700">);<br  /><br  />if (</font><font  color="#0000BB">in_array</font><font  color="#007700">(array (</font><font  color="#DD0000">'p'</font><font  color="#007700">, </font><font  color="#DD0000">'h'</font><font  color="#007700">), </font><font  color="#0000BB">$a</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"'ph' was found\n"</font><font  color="#007700">;<br  />}<br  />if (</font><font  color="#0000BB">in_array</font><font  color="#007700">(array (</font><font  color="#DD0000">'f'</font><font  color="#007700">, </font><font  color="#DD0000">'i'</font><font  color="#007700">), </font><font  color="#0000BB">$a</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"'fi' was found\n"</font><font  color="#007700">;<br  />}<br  />if (</font><font  color="#0000BB">in_array</font><font  color="#007700">(</font><font  color="#DD0000">'o'</font><font  color="#007700">, </font><font  color="#0000BB">$a</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"'o' was found\n"</font><font  color="#007700">;<br  />}<br  /></font><font  color="#FF8000">/* Outputs:<br  />'ph' was found<br  />'o' was found<br  />*/<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >array_search()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_key_exists()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >isset()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>key</name>
            <signature><![CDATA[mixed key ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10030" ></A
><H2  >说明</H2
>mixed <B  CLASS="methodname" >key</B
> ( array array)<BR  ></BR
><P  >     <B  CLASS="function" >key()</B
> 返回数组中当前单元的键名。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10041" ></A
><P  ><B  >例子 1. <B  CLASS="function" >key()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$array </font><font  color="#007700">= array (<br  /></font><font  color="#DD0000">'fruit1' </font><font  color="#007700">=> </font><font  color="#DD0000">'apple'</font><font  color="#007700">,<br  /></font><font  color="#DD0000">'fruit2' </font><font  color="#007700">=> </font><font  color="#DD0000">'orange'</font><font  color="#007700">,<br  /></font><font  color="#DD0000">'fruit3' </font><font  color="#007700">=> </font><font  color="#DD0000">'grape'</font><font  color="#007700">,<br  /></font><font  color="#DD0000">'fruit4' </font><font  color="#007700">=> </font><font  color="#DD0000">'apple'</font><font  color="#007700">,<br  /></font><font  color="#DD0000">'fruit5' </font><font  color="#007700">=> </font><font  color="#DD0000">'apple'<br  /></font><font  color="#007700">);<br  /><br  /></font><font  color="#FF8000">// this cycle echoes all associative array<br  />// key where value equals "apple"<br  /></font><font  color="#007700">while (</font><font  color="#0000BB">$fruit_name </font><font  color="#007700">= </font><font  color="#0000BB">current</font><font  color="#007700">(</font><font  color="#0000BB">$array</font><font  color="#007700">)) {<br  />    if (</font><font  color="#0000BB">$fruit_name </font><font  color="#007700">== </font><font  color="#DD0000">'apple'</font><font  color="#007700">) {<br  />        echo </font><font  color="#0000BB">key</font><font  color="#007700">(</font><font  color="#0000BB">$array</font><font  color="#007700">).</font><font  color="#DD0000">'<br>'</font><font  color="#007700">;<br  />    }<br  />    </font><font  color="#0000BB">next</font><font  color="#007700">(</font><font  color="#0000BB">$array</font><font  color="#007700">);<br  />}<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >current()</B
></A
> 和 <SPAN HREF="#"><B  CLASS="function" >next()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>krsort</name>
            <signature><![CDATA[int krsort ( array array [, int sort_flags])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10052" ></A
><H2  >说明</H2
>int <B  CLASS="methodname" >krsort</B
> ( array array [, int sort_flags])<BR  ></BR
><P  >     对数组按照键名逆向排序，保留键名到数据的关联。主要用于结合数组。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10065" ></A
><P  ><B  >例子 1. <B  CLASS="function" >krsort()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$fruits </font><font  color="#007700">= array (</font><font  color="#DD0000">"d"</font><font  color="#007700">=></font><font  color="#DD0000">"lemon"</font><font  color="#007700">, </font><font  color="#DD0000">"a"</font><font  color="#007700">=></font><font  color="#DD0000">"orange"</font><font  color="#007700">, </font><font  color="#DD0000">"b"</font><font  color="#007700">=></font><font  color="#DD0000">"banana"</font><font  color="#007700">, </font><font  color="#DD0000">"c"</font><font  color="#007700">=></font><font  color="#DD0000">"apple"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">krsort </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">);<br  /></font><font  color="#0000BB">reset </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">);<br  />while (list (</font><font  color="#0000BB">$key</font><font  color="#007700">, </font><font  color="#0000BB">$val</font><font  color="#007700">) = </font><font  color="#0000BB">each </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"$key = $val\n"</font><font  color="#007700">;<br  />}<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       本例将显示：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >d = lemon
c = apple
b = banana
a = orange</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     可以用可选参数 <TT  CLASS="parameter" ><I  >sort_flags</I
></TT
> 改变排序的行为，详情见 <SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>。
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >asort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >arsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >ksort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >natsort()</B
></A
> 和 <SPAN HREF="#"><B  CLASS="function" >rsort()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>ksort</name>
            <signature><![CDATA[int ksort ( array array [, int sort_flags])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10085" ></A
><H2  >说明</H2
>int <B  CLASS="methodname" >ksort</B
> ( array array [, int sort_flags])<BR  ></BR
><P  >     对数组按照键名排序，保留键名到数据的关联。本函数主要用于结合数组。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10098" ></A
><P  ><B  >例子 1. <B  CLASS="function" >ksort()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$fruits </font><font  color="#007700">= array (</font><font  color="#DD0000">"d"</font><font  color="#007700">=></font><font  color="#DD0000">"lemon"</font><font  color="#007700">, </font><font  color="#DD0000">"a"</font><font  color="#007700">=></font><font  color="#DD0000">"orange"</font><font  color="#007700">, </font><font  color="#DD0000">"b"</font><font  color="#007700">=></font><font  color="#DD0000">"banana"</font><font  color="#007700">, </font><font  color="#DD0000">"c"</font><font  color="#007700">=></font><font  color="#DD0000">"apple"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">ksort </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">);<br  /></font><font  color="#0000BB">reset </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">);<br  />while (list (</font><font  color="#0000BB">$key</font><font  color="#007700">, </font><font  color="#0000BB">$val</font><font  color="#007700">) = </font><font  color="#0000BB">each </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"$key = $val\n"</font><font  color="#007700">;<br  />}<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       本例将显示：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >a = orange
b = banana
c = apple
d = lemon</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     可以用可选参数 <TT  CLASS="parameter" ><I  >sort_flags</I
></TT
>
     改变排序的行为，详情见 <SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>。
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >asort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >arsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >krsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >uksort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >natsort()</B
></A
> 和 <SPAN HREF="#"><B  CLASS="function" >rsort()</B
></A
>。
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      第二个参数是 PHP 4 新加的。
     </P
></BLOCKQUOTE
></DIV
></DIV
>]]></description>
        </method>
        <method>
            <name>list</name>
            <signature><![CDATA[void list ( mixed ...)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10121" ></A
><H2  >说明</H2
>void <B  CLASS="methodname" >list</B
> ( mixed ...)<BR  ></BR
><P  >     像 <SPAN HREF="#"><B  CLASS="function" >array()</B
></A
> 一样，这不是真正的函数，而是语言结构。<B  CLASS="function" >list()</B
>
     用一步操作给一组变量进行赋值。
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      <B  CLASS="function" >list()</B
> 仅能用于数字索引的数组并假定数字索引从 0 开始。
     </P
></BLOCKQUOTE
></DIV
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10136" ></A
><P  ><B  >例子 1. <B  CLASS="function" >list()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /><br  />$info </font><font  color="#007700">= array(</font><font  color="#DD0000">'coffee'</font><font  color="#007700">, </font><font  color="#DD0000">'brown'</font><font  color="#007700">, </font><font  color="#DD0000">'caffeine'</font><font  color="#007700">);<br  /><br  /></font><font  color="#FF8000">// Listing all the variables<br  /></font><font  color="#007700">list(</font><font  color="#0000BB">$drink</font><font  color="#007700">, </font><font  color="#0000BB">$color</font><font  color="#007700">, </font><font  color="#0000BB">$power</font><font  color="#007700">) = </font><font  color="#0000BB">$info</font><font  color="#007700">;<br  />print </font><font  color="#DD0000">"$drink is $color and $power makes it special.\n"</font><font  color="#007700">;<br  /><br  /></font><font  color="#FF8000">// Listing some of them<br  /></font><font  color="#007700">list(</font><font  color="#0000BB">$drink</font><font  color="#007700">, , </font><font  color="#0000BB">$power</font><font  color="#007700">) = </font><font  color="#0000BB">$info</font><font  color="#007700">;<br  />print </font><font  color="#DD0000">"$drink has $power.\n"</font><font  color="#007700">;<br  /><br  /></font><font  color="#FF8000">// Or let's skip to only the third one<br  /></font><font  color="#007700">list( , , </font><font  color="#0000BB">$power</font><font  color="#007700">) = </font><font  color="#0000BB">$info</font><font  color="#007700">;<br  />print </font><font  color="#DD0000">"I need $power!\n"</font><font  color="#007700">;<br  /><br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10141" ></A
><P  ><B  >例子 2. 使用 <B  CLASS="function" >list()</B
> 的例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<table><br  /> <tr><br  />  <th>Employee name</th><br  />  <th>Salary</th><br  /> </tr><br  /><br  /><font  color="#0000BB"><?php<br  /><br  />$result </font><font  color="#007700">= </font><font  color="#0000BB">mysql_query </font><font  color="#007700">(</font><font  color="#DD0000">"SELECT id, name, salary FROM employees"</font><font  color="#007700">,</font><font  color="#0000BB">$conn</font><font  color="#007700">);<br  />while (list (</font><font  color="#0000BB">$id</font><font  color="#007700">, </font><font  color="#0000BB">$name</font><font  color="#007700">, </font><font  color="#0000BB">$salary</font><font  color="#007700">) = </font><font  color="#0000BB">mysql_fetch_row </font><font  color="#007700">(</font><font  color="#0000BB">$result</font><font  color="#007700">)) {<br  />    print (</font><font  color="#DD0000">" <tr>\n"</font><font  color="#007700">.<br  />           </font><font  color="#DD0000">"  <td><a href=\"info.php?id=$id\">$name</a></td>\n"</font><font  color="#007700">.<br  />           </font><font  color="#DD0000">"  <td>$salary</td>\n"</font><font  color="#007700">.<br  />           </font><font  color="#DD0000">" </tr>\n"</font><font  color="#007700">);<br  />}<br  /><br  /></font><font  color="#0000BB">?><br  /></font><br  /></table></font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><DIV  CLASS="warning" ><P  ></P
><TABLE  CLASS="warning" BORDER="1" WIDTH="100%" ><TR  ><TD  ALIGN="CENTER" ><B  >警告</B
></TD
></TR
><TR  ><TD  ALIGN="LEFT" ><P  >     <B  CLASS="function" >list()</B
> 从最右边一个参数开始赋值。如果你用单纯的变量，不用担心这一点。但是如果你用了具有索引的数组，通常你期望得到的结果和在
     <B  CLASS="function" >list()</B
> 中写的一样是从左到右的，但实际上不是。是以相反顺序赋值的。
    </P
></TD
></TR
></TABLE
></DIV
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10150" ></A
><P  ><B  >例子 3. 在 <B  CLASS="function" >list()</B
> 中使用数组索引</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$info </font><font  color="#007700">= array(</font><font  color="#DD0000">'coffee'</font><font  color="#007700">, </font><font  color="#DD0000">'brown'</font><font  color="#007700">, </font><font  color="#DD0000">'caffeine'</font><font  color="#007700">);<br  />list(</font><font  color="#0000BB">$a</font><font  color="#007700">[</font><font  color="#0000BB">0</font><font  color="#007700">], </font><font  color="#0000BB">$a</font><font  color="#007700">[</font><font  color="#0000BB">1</font><font  color="#007700">], </font><font  color="#0000BB">$a</font><font  color="#007700">[</font><font  color="#0000BB">2</font><font  color="#007700">]) = </font><font  color="#0000BB">$info</font><font  color="#007700">;<br  /></font><font  color="#0000BB">var_dump</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       产生如下输出（注意单元顺序和 <B  CLASS="function" >list()</B
> 语法中所写的顺序的比较）：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >array(3) {
  [2]=>
  string(8) "caffeine"
  [1]=>
  string(5) "brown"
  [0]=>
  string(6) "coffee"
}</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >each()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >extract()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>natcasesort</name>
            <signature><![CDATA[void natcasesort ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10165" ></A
><H2  >说明</H2
>void <B  CLASS="methodname" >natcasesort</B
> ( array array)<BR  ></BR
><P  >     本函数实现了一个和人们通常对字母数字字符串进行排序的方法一样的排序算法，这被称为“自然排序”。
    </P
><P  >     <B  CLASS="function" >natcasesort()</B
> 是 <SPAN HREF="#"><B  CLASS="function" >natsort()</B
></A
>
     函数的不区分大小写字母的版本。见 <SPAN HREF="#"><B  CLASS="function" >natsort()</B
></A
>
     中说明本算法和通常的计算机字符串排序算法的区别的例子。
    </P
><P  >     更多信息见 Martin Pool 的 <SPAN HREF="#">Natural Order String Comparison</A
> 页面。
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >natsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >strnatcmp()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >strnatcasecmp()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>natsort</name>
            <signature><![CDATA[void natsort ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10189" ></A
><H2  >说明</H2
>void <B  CLASS="methodname" >natsort</B
> ( array array)<BR  ></BR
><P  >     本函数实现了一个和人们通常对字母数字字符串进行排序的方法一样的排序算法，这被称为“自然排序”。本算法和通常的计算机字符串排序算法（用于
     <SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>）的区别示例如下：
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10200" ></A
><P  ><B  >例子 1. <B  CLASS="function" >natsort()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$array1 </font><font  color="#007700">= </font><font  color="#0000BB">$array2 </font><font  color="#007700">= array (</font><font  color="#DD0000">"img12.png"</font><font  color="#007700">, </font><font  color="#DD0000">"img10.png"</font><font  color="#007700">, </font><font  color="#DD0000">"img2.png"</font><font  color="#007700">, </font><font  color="#DD0000">"img1.png"</font><font  color="#007700">);<br  /><br  /></font><font  color="#0000BB">sort</font><font  color="#007700">(</font><font  color="#0000BB">$array1</font><font  color="#007700">);<br  />echo </font><font  color="#DD0000">"Standard sorting\n"</font><font  color="#007700">;<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$array1</font><font  color="#007700">);<br  /><br  /></font><font  color="#0000BB">natsort</font><font  color="#007700">(</font><font  color="#0000BB">$array2</font><font  color="#007700">);<br  />echo </font><font  color="#DD0000">"\nNatural order sorting\n"</font><font  color="#007700">;<br  /></font><font  color="#0000BB">print_r</font><font  color="#007700">(</font><font  color="#0000BB">$array2</font><font  color="#007700">);<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       以上代码显示结果为：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >Standard sorting
Array
(
    [0] => img1.png
    [1] => img10.png
    [2] => img12.png
    [3] => img2.png
)

Natural order sorting
Array
(
    [3] => img1.png
    [2] => img2.png
    [1] => img10.png
    [0] => img12.png
)</PRE
></TD
></TR
></TABLE
><P  >       更多信息见 Martin Pool 的 <SPAN HREF="#">Natural Order String Comparison</A
> 页面。
      </P
></DIV
></TD
></TR
></TABLE
>
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      如果你想保持索引／值的关联，考虑使用 <TT  CLASS="literal" >uasort($arr, 'strnatcmp')</TT
>。
     </P
></BLOCKQUOTE
></DIV
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >natcasesort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >strnatcmp()</B
></A
> 和
     <SPAN HREF="#"><B  CLASS="function" >strnatcasecmp()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>next</name>
            <signature><![CDATA[mixed next ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10219" ></A
><H2  >说明</H2
>mixed <B  CLASS="methodname" >next</B
> ( array array)<BR  ></BR
><P  >     返回数组内部指针指向的下一个单元的值，或当没有更多单元时返回 <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。
    </P
><P  >     <B  CLASS="function" >next()</B
> 和 <SPAN HREF="#"><B  CLASS="function" >current()</B
></A
>
     的行为类似，只有一点区别，在返回值之前将内部指针向前移动一位。这意味着它返回的是下一个数组单元的值并将数组指针向前移动了一位。如果移动指针的结果是超出了数组单元的末端，则
     <B  CLASS="function" >next()</B
> 返回 <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。
     </P><DIV  CLASS="warning" ><P  ></P
><TABLE  CLASS="warning" BORDER="1" WIDTH="100%" ><TR  ><TD  ALIGN="CENTER" ><B  >警告</B
></TD
></TR
><TR  ><TD  ALIGN="LEFT" ><P  >       如果数组包含空的单元，或者单元的值是 0 则本函数碰到这些单元也返回
       <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。要正确遍历可能含有空单元或者单元值为 0 的数组，参见
       <SPAN HREF="#"><B  CLASS="function" >each()</B
></A
> 函数。
      </P
></TD
></TR
></TABLE
></DIV
>
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10239" ></A
><P  ><B  >例子 1. <B  CLASS="function" >next()</B
> 及相关函数的用法示例</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$transport </font><font  color="#007700">= array(</font><font  color="#DD0000">'foot'</font><font  color="#007700">, </font><font  color="#DD0000">'bike'</font><font  color="#007700">, </font><font  color="#DD0000">'car'</font><font  color="#007700">, </font><font  color="#DD0000">'plane'</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">current</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">); </font><font  color="#FF8000">// $mode = 'foot';<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">next</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">);    </font><font  color="#FF8000">// $mode = 'bike';<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">next</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">);    </font><font  color="#FF8000">// $mode = 'car';<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">prev</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">);    </font><font  color="#FF8000">// $mode = 'bike';<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">end</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">);     </font><font  color="#FF8000">// $mode = 'plane';<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见
     <SPAN HREF="#"><B  CLASS="function" >current()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >end()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >prev()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >reset()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>pos</name>
            <signature><![CDATA[mixed pos ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10252" ></A
><H2  >说明</H2
>mixed <B  CLASS="methodname" >pos</B
> ( array array)<BR  ></BR
><P  >     本函数是 <SPAN HREF="#"><B  CLASS="function" >current()</B
></A
> 的<SPAN HREF="#">别名</A
>。
    </P
><P  >     参见
     <SPAN HREF="#"><B  CLASS="function" >end()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >next()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >prev()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >reset()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>prev</name>
            <signature><![CDATA[mixed prev ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10272" ></A
><H2  >说明</H2
>mixed <B  CLASS="methodname" >prev</B
> ( array array)<BR  ></BR
><P  >     返回数组内部指针指向的前一个单元的值，或当没有更多单元时返回 <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。
     </P><DIV  CLASS="warning" ><P  ></P
><TABLE  CLASS="warning" BORDER="1" WIDTH="100%" ><TR  ><TD  ALIGN="CENTER" ><B  >警告</B
></TD
></TR
><TR  ><TD  ALIGN="LEFT" ><P  >       如果数组包含空的单元，或者单元的值是 0 则本函数碰到这些单元也返回
       <TT  CLASS="constant" ><B  >FALSE</B
></TT
>。要正确遍历可能含有空单元或者单元值为 0 的数组，参见
       <SPAN HREF="#"><B  CLASS="function" >each()</B
></A
> 函数。
      </P
></TD
></TR
></TABLE
></DIV
>
    </P
><P  >     <B  CLASS="function" >prev()</B
> 和
     <SPAN HREF="#"><B  CLASS="function" >next()</B
></A
> 的行为类似，只除了它将内部指针倒回一位而不是前移一位。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10290" ></A
><P  ><B  >例子 1. <B  CLASS="function" >prev()</B
> 及相关函数用法示例</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$transport </font><font  color="#007700">= array(</font><font  color="#DD0000">'foot'</font><font  color="#007700">, </font><font  color="#DD0000">'bike'</font><font  color="#007700">, </font><font  color="#DD0000">'car'</font><font  color="#007700">, </font><font  color="#DD0000">'plane'</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">current</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">); </font><font  color="#FF8000">// $mode = 'foot';<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">next</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">);    </font><font  color="#FF8000">// $mode = 'bike';<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">next</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">);    </font><font  color="#FF8000">// $mode = 'car';<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">prev</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">);    </font><font  color="#FF8000">// $mode = 'bike';<br  /></font><font  color="#0000BB">$mode </font><font  color="#007700">= </font><font  color="#0000BB">end</font><font  color="#007700">(</font><font  color="#0000BB">$transport</font><font  color="#007700">);     </font><font  color="#FF8000">// $mode = 'plane';<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >current()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >end()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >next()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >reset()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>range</name>
            <signature><![CDATA[array range ( int low, int high [, int step])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10303" ></A
><H2  >说明</H2
>array <B  CLASS="methodname" >range</B
> ( int low, int high [, int step])<BR  ></BR
><P  >     <B  CLASS="function" >range()</B
> 返回数组中从
     <TT  CLASS="parameter" ><I  >low</I
></TT
> 到 <TT  CLASS="parameter" ><I  >high</I
></TT
> 的单元，包括它们本身。如果
     low > high，则序列将从 high 到 low。
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >新参数: </B
>
      可选的 <TT  CLASS="parameter" ><I  >step</I
></TT
> 参数是 PHP 5.0.0 新加的。
     </P
></BLOCKQUOTE
></DIV
><P  >     如果给出了 <TT  CLASS="parameter" ><I  >step</I
></TT
> 的值，它将被作为单元之间的步进值。<TT  CLASS="parameter" ><I  >step</I
></TT
>
     应该为正值。如果未指定，<TT  CLASS="parameter" ><I  >step</I
></TT
> 则默认为 1。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10330" ></A
><P  ><B  >例子 1. <B  CLASS="function" >range()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /></font><font  color="#FF8000">// array(0,1,2,3,4,5,6,7,8,9,10,11,12)<br  /></font><font  color="#007700">foreach(</font><font  color="#0000BB">range</font><font  color="#007700">(</font><font  color="#0000BB">0</font><font  color="#007700">, </font><font  color="#0000BB">12</font><font  color="#007700">) as </font><font  color="#0000BB">$number</font><font  color="#007700">) {<br  />    echo </font><font  color="#0000BB">$number</font><font  color="#007700">;<br  />}<br  /></font><font  color="#FF8000">// The step parameter was introduced in 5.0.0<br  />// array(0,10,20,30,40,50,60,70,80,90,100)<br  /></font><font  color="#007700">foreach(</font><font  color="#0000BB">range</font><font  color="#007700">(</font><font  color="#0000BB">0</font><font  color="#007700">, </font><font  color="#0000BB">100</font><font  color="#007700">, </font><font  color="#0000BB">10</font><font  color="#007700">) as </font><font  color="#0000BB">$number</font><font  color="#007700">) {<br  />    echo </font><font  color="#0000BB">$number</font><font  color="#007700">;<br  />}<br  /><br  /></font><font  color="#FF8000">// Use of character sequences introduced in 4.1.0<br  />// array('a','b','c','d','e','f','g','h','i');<br  /></font><font  color="#007700">foreach(</font><font  color="#0000BB">range</font><font  color="#007700">(</font><font  color="#DD0000">'a'</font><font  color="#007700">, </font><font  color="#DD0000">'i'</font><font  color="#007700">) as </font><font  color="#0000BB">$letter</font><font  color="#007700">) {<br  />    echo </font><font  color="#0000BB">$letter</font><font  color="#007700">;<br  />}<br  /></font><font  color="#FF8000">// array('c','b','a');<br  /></font><font  color="#007700">foreach(</font><font  color="#0000BB">range</font><font  color="#007700">(</font><font  color="#DD0000">'c'</font><font  color="#007700">, </font><font  color="#DD0000">'a'</font><font  color="#007700">) as </font><font  color="#0000BB">$letter</font><font  color="#007700">) {<br  />    echo </font><font  color="#0000BB">$letter</font><font  color="#007700">;<br  />}</font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      在版本 4.1.0 之前 <B  CLASS="function" >range()</B
>
      函数只产生递增的整数数组。对于字符序列和递减数组的支持是 4.1.0
      加入的。字符序列值的长度限定为一。如果输入的长度超过一，则只使用第一个字符。
     </P
></BLOCKQUOTE
></DIV
><DIV  CLASS="caution" ><P  ></P
><TABLE  CLASS="caution" BORDER="1" WIDTH="100%" ><TR  ><TD  ALIGN="CENTER" ><B  >注意</B
></TD
></TR
><TR  ><TD  ALIGN="LEFT" ><P  >      在 PHP 版本 4.1.0 到 4.3.2 中，<B  CLASS="function" >range()</B
>
      将数字字符串看作字符串而不是整数，因此将会被作为字符序列使用。例如，<TT  CLASS="literal" >"4242"</TT
>
      会被当作 <TT  CLASS="literal" >"4"</TT
> 来对待。
     </P
></TD
></TR
></TABLE
></DIV
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >shuffle()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_fill()</B
></A
>
     和 <SPAN HREF="#">foreach</A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>reset</name>
            <signature><![CDATA[mixed reset ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10350" ></A
><H2  >说明</H2
>mixed <B  CLASS="methodname" >reset</B
> ( array array)<BR  ></BR
><P  >     <B  CLASS="function" >reset()</B
> 将 <TT  CLASS="parameter" ><I  >array</I
></TT
>
     的内部指针倒回到第一个单元并返回第一个数组单元的值。
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >current()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >each()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >next()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >prev()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>rsort</name>
            <signature><![CDATA[void rsort ( array array [, int sort_flags])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10370" ></A
><H2  >说明</H2
>void <B  CLASS="methodname" >rsort</B
> ( array array [, int sort_flags])<BR  ></BR
><P  >     本函数对数组进行逆向排序（最高到最低）。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10383" ></A
><P  ><B  >例子 1. <B  CLASS="function" >rsort()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$fruits </font><font  color="#007700">= array (</font><font  color="#DD0000">"lemon"</font><font  color="#007700">, </font><font  color="#DD0000">"orange"</font><font  color="#007700">, </font><font  color="#DD0000">"banana"</font><font  color="#007700">, </font><font  color="#DD0000">"apple"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">rsort </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">);<br  /></font><font  color="#0000BB">reset </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">);<br  />while (list (</font><font  color="#0000BB">$key</font><font  color="#007700">, </font><font  color="#0000BB">$val</font><font  color="#007700">) = </font><font  color="#0000BB">each </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"$key = $val\n"</font><font  color="#007700">;<br  />}<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       本例将显示：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >0 = orange
1 = lemon
2 = banana
3 = apple</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     fruits 被按照字母顺序逆向排序。
    </P
><P  >     可以用可选参数 <TT  CLASS="parameter" ><I  >sort_flags</I
></TT
>
     改变排序的行为，详情见 <SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>。
    </P
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >arsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >asort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >ksort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >usort()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>shuffle</name>
            <signature><![CDATA[void shuffle ( array array)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10403" ></A
><H2  >说明</H2
>void <B  CLASS="methodname" >shuffle</B
> ( array array)<BR  ></BR
><P  >     本函数打乱（随机排列单元的顺序）一个数组。必须用 <SPAN HREF="#"><B  CLASS="function" >srand()</B
></A
>
     播下本函数的随机数发生器种子。
     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10413" ></A
><P  ><B  >例子 1. <B  CLASS="function" >shuffle()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  />$numbers </font><font  color="#007700">= </font><font  color="#0000BB">range </font><font  color="#007700">(</font><font  color="#0000BB">1</font><font  color="#007700">,</font><font  color="#0000BB">20</font><font  color="#007700">);<br  /></font><font  color="#0000BB">srand </font><font  color="#007700">((float)</font><font  color="#0000BB">microtime</font><font  color="#007700">()*</font><font  color="#0000BB">1000000</font><font  color="#007700">);<br  /></font><font  color="#0000BB">shuffle </font><font  color="#007700">(</font><font  color="#0000BB">$numbers</font><font  color="#007700">);<br  />while (list (, </font><font  color="#0000BB">$number</font><font  color="#007700">) = </font><font  color="#0000BB">each </font><font  color="#007700">(</font><font  color="#0000BB">$numbers</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"$number "</font><font  color="#007700">;<br  />}<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>在 PHP 4.2.0 中，无需用函数 <SPAN HREF="#"><B  CLASS="function" >srand()</B
></A
> 或
<SPAN HREF="#"><B  CLASS="function" >mt_srand()</B
></A
>来搜寻随机数生成器，它将被自动完成。
</P
></BLOCKQUOTE
></DIV
><P  >     参见
     <SPAN HREF="#"><B  CLASS="function" >arsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >asort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >ksort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >rsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >usort()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>sizeof</name>
            <signature><![CDATA[]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10433" ></A
><H2  >说明</H2
><P  >     本函数是 <SPAN HREF="#"><B  CLASS="function" >count()</B
></A
> 别名。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>sort</name>
            <signature><![CDATA[void sort ( array array [, int sort_flags])]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10441" ></A
><H2  >说明</H2
>void <B  CLASS="methodname" >sort</B
> ( array array [, int sort_flags])<BR  ></BR
><P  >     本函数对数组进行排序。当本函数结束时数组单元将被从最低到最高重新安排。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10454" ></A
><P  ><B  >例子 1. <B  CLASS="function" >sort()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /><br  />$fruits </font><font  color="#007700">= array (</font><font  color="#DD0000">"lemon"</font><font  color="#007700">, </font><font  color="#DD0000">"orange"</font><font  color="#007700">, </font><font  color="#DD0000">"banana"</font><font  color="#007700">, </font><font  color="#DD0000">"apple"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">sort </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">);<br  /></font><font  color="#0000BB">reset </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">);<br  />while (list (</font><font  color="#0000BB">$key</font><font  color="#007700">, </font><font  color="#0000BB">$val</font><font  color="#007700">) = </font><font  color="#0000BB">each </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"fruits["</font><font  color="#007700">.</font><font  color="#0000BB">$key</font><font  color="#007700">.</font><font  color="#DD0000">"] = "</font><font  color="#007700">.</font><font  color="#0000BB">$val</font><font  color="#007700">.</font><font  color="#DD0000">"\n"</font><font  color="#007700">;<br  />}<br  /><br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       本例将显示：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >fruits[0] = apple
fruits[1] = banana
fruits[2] = lemon
fruits[3] = orange</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     fruits 被按照字母顺序排序。
    </P
><P  >     可选的第二个参数 <TT  CLASS="parameter" ><I  >sort_flags</I
></TT
>
     可以用以下值改变排序的行为：
    </P
><P  >     排序类型标记：
     </P><P  ></P
><UL  ><LI  ><P  >SORT_REGULAR - 正常比较单元</P
></LI
><LI  ><P  >SORT_NUMERIC - 单元被作为数字来比较</P
></LI
><LI  ><P  >SORT_STRING - 单元被作为字符串来比较</P
></LI
></UL
>
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      第二个参数是 PHP 4 新加的。
     </P
></BLOCKQUOTE
></DIV
><P  >     参见
     <SPAN HREF="#"><B  CLASS="function" >arsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >asort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >ksort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >natsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >natcasesort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >rsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >usort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >array_multisort()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >uksort()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>uasort</name>
            <signature><![CDATA[void uasort ( array array, callback cmp_function)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10487" ></A
><H2  >说明</H2
>void <B  CLASS="methodname" >uasort</B
> ( array array, callback cmp_function)<BR  ></BR
><P  >     本函数对数组排序并保持索引和单元之间的关联。主要用于对那些单元顺序很重要的结合数组进行排序。比较函数是用户自定义的。
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      用户自定义比较函数的例子请参考 <SPAN HREF="#"><B  CLASS="function" >usort()</B
></A
> 和 <SPAN HREF="#"><B  CLASS="function" >uksort()</B
></A
>。
     </P
></BLOCKQUOTE
></DIV
><P  >     参见 <SPAN HREF="#"><B  CLASS="function" >usort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >uksort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >asort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >arsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >ksort()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >rsort()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>uksort</name>
            <signature><![CDATA[void uksort ( array array, callback cmp_function)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10515" ></A
><H2  >说明</H2
>void <B  CLASS="methodname" >uksort</B
> ( array array, callback cmp_function)<BR  ></BR
><P  >     本函数将使用用户提供的比较函数对数组中的键名进行排序。如果要排序的数组需要用一种不寻常的标准进行排序，那么应该使用此函数。
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10528" ></A
><P  ><B  >例子 1. <B  CLASS="function" >uksort()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /></font><font  color="#007700">function </font><font  color="#0000BB">cmp </font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">) {<br  />    if (</font><font  color="#0000BB">$a </font><font  color="#007700">== </font><font  color="#0000BB">$b</font><font  color="#007700">) return </font><font  color="#0000BB">0</font><font  color="#007700">;<br  />    return (</font><font  color="#0000BB">$a </font><font  color="#007700">> </font><font  color="#0000BB">$b</font><font  color="#007700">) ? -</font><font  color="#0000BB">1 </font><font  color="#007700">: </font><font  color="#0000BB">1</font><font  color="#007700">;<br  />}<br  /><br  /></font><font  color="#0000BB">$a </font><font  color="#007700">= array (</font><font  color="#0000BB">4 </font><font  color="#007700">=> </font><font  color="#DD0000">"four"</font><font  color="#007700">, </font><font  color="#0000BB">3 </font><font  color="#007700">=> </font><font  color="#DD0000">"three"</font><font  color="#007700">, </font><font  color="#0000BB">20 </font><font  color="#007700">=> </font><font  color="#DD0000">"twenty"</font><font  color="#007700">, </font><font  color="#0000BB">10 </font><font  color="#007700">=> </font><font  color="#DD0000">"ten"</font><font  color="#007700">);<br  /><br  /></font><font  color="#0000BB">uksort </font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#DD0000">"cmp"</font><font  color="#007700">);<br  /><br  />while (list (</font><font  color="#0000BB">$key</font><font  color="#007700">, </font><font  color="#0000BB">$value</font><font  color="#007700">) = </font><font  color="#0000BB">each </font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"$key: $value\n"</font><font  color="#007700">;<br  />}<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       本例将显示：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >20: twenty
10: ten
4: four
3: three</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见
     <SPAN HREF="#"><B  CLASS="function" >usort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >uasort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >asort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >arsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >ksort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >natsort()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >rsort()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
        <method>
            <name>usort</name>
            <signature><![CDATA[void usort ( array array, callback cmp_function)]]></signature>
            <description><![CDATA[<DIV  CLASS="refsect1" ><A  NAME="AEN10547" ></A
><H2  >说明</H2
>void <B  CLASS="methodname" >usort</B
> ( array array, callback cmp_function)<BR  ></BR
><P  >     本函数将用用户自定义的比较函数对一个数组中的值进行排序。如果要排序的数组需要用一种不寻常的标准进行排序，那么应该使用此函数。
    </P
><P  >     比较函数必须在第一个参数被认为小于，等于或大于第二个参数时分别返回一个小于，等于或大于零的整数。
    </P
><P  >     </P><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
       如果两个成员比较结果相同，则它们在排序后的数组中的顺序未经定义。直到
       PHP 4.0.6 为止，用户自定义函数将保留这些单元的原有顺序。但是由于在
       4.1.0 中引进了新的排序算法，结果将不是这样了，对此也没有一个有效的解决方案。
      </P
></BLOCKQUOTE
></DIV
>
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10564" ></A
><P  ><B  >例子 1. <B  CLASS="function" >usort()</B
> 例子</B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /></font><font  color="#007700">function </font><font  color="#0000BB">cmp </font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">) {<br  />    if (</font><font  color="#0000BB">$a </font><font  color="#007700">== </font><font  color="#0000BB">$b</font><font  color="#007700">) return </font><font  color="#0000BB">0</font><font  color="#007700">;<br  />    return (</font><font  color="#0000BB">$a </font><font  color="#007700">< </font><font  color="#0000BB">$b</font><font  color="#007700">) ? -</font><font  color="#0000BB">1 </font><font  color="#007700">: </font><font  color="#0000BB">1</font><font  color="#007700">;<br  />}<br  /><br  /></font><font  color="#0000BB">$a </font><font  color="#007700">= array (</font><font  color="#0000BB">3</font><font  color="#007700">, </font><font  color="#0000BB">2</font><font  color="#007700">, </font><font  color="#0000BB">5</font><font  color="#007700">, </font><font  color="#0000BB">6</font><font  color="#007700">, </font><font  color="#0000BB">1</font><font  color="#007700">);<br  /><br  /></font><font  color="#0000BB">usort </font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#DD0000">"cmp"</font><font  color="#007700">);<br  /><br  />while (list (</font><font  color="#0000BB">$key</font><font  color="#007700">, </font><font  color="#0000BB">$value</font><font  color="#007700">) = </font><font  color="#0000BB">each </font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"$key: $value\n"</font><font  color="#007700">;<br  />}<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       本例将显示：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >0: 1
1: 2
2: 3
3: 5
4: 6</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><DIV  CLASS="note" ><BLOCKQUOTE  CLASS="note" ><P  ><B  >注: </B
>
      很明显在这个小例子中用 <SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
> 函数更合适。
     </P
></BLOCKQUOTE
></DIV
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10574" ></A
><P  ><B  >例子 2. 
       使用多维数组的 <B  CLASS="function" >usort()</B
> 例子
      </B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /></font><font  color="#007700">function </font><font  color="#0000BB">cmp </font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">) {<br  />    return </font><font  color="#0000BB">strcmp</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">[</font><font  color="#DD0000">"fruit"</font><font  color="#007700">], </font><font  color="#0000BB">$b</font><font  color="#007700">[</font><font  color="#DD0000">"fruit"</font><font  color="#007700">]);<br  />}<br  /><br  /></font><font  color="#0000BB">$fruits</font><font  color="#007700">[</font><font  color="#0000BB">0</font><font  color="#007700">][</font><font  color="#DD0000">"fruit"</font><font  color="#007700">] = </font><font  color="#DD0000">"lemons"</font><font  color="#007700">;<br  /></font><font  color="#0000BB">$fruits</font><font  color="#007700">[</font><font  color="#0000BB">1</font><font  color="#007700">][</font><font  color="#DD0000">"fruit"</font><font  color="#007700">] = </font><font  color="#DD0000">"apples"</font><font  color="#007700">;<br  /></font><font  color="#0000BB">$fruits</font><font  color="#007700">[</font><font  color="#0000BB">2</font><font  color="#007700">][</font><font  color="#DD0000">"fruit"</font><font  color="#007700">] = </font><font  color="#DD0000">"grapes"</font><font  color="#007700">;<br  /><br  /></font><font  color="#0000BB">usort</font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">, </font><font  color="#DD0000">"cmp"</font><font  color="#007700">);<br  /><br  />while (list (</font><font  color="#0000BB">$key</font><font  color="#007700">, </font><font  color="#0000BB">$value</font><font  color="#007700">) = </font><font  color="#0000BB">each </font><font  color="#007700">(</font><font  color="#0000BB">$fruits</font><font  color="#007700">)) {<br  />    echo </font><font  color="#DD0000">"\$fruits[$key]: " </font><font  color="#007700">. </font><font  color="#0000BB">$value</font><font  color="#007700">[</font><font  color="#DD0000">"fruit"</font><font  color="#007700">] . </font><font  color="#DD0000">"\n"</font><font  color="#007700">;<br  />}<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       当排序多维数组时，$a 和 $b 包含到数组第一个索引的引用。
      </P
><P  >       本例将显示：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >$fruits[0]: apples
$fruits[1]: grapes
$fruits[2]: lemons</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     <TABLE  WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="EXAMPLE" ><TR  ><TD  ><DIV  CLASS="example" ><A  NAME="AEN10582" ></A
><P  ><B  >例子 3. 
       使用对象的成员函数的 <B  CLASS="function" >usort()</B
> 例子
      </B
></P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><code ><font  color="#000000">
<font  color="#0000BB"><?php<br  /></font><font  color="#007700">class </font><font  color="#0000BB">TestObj </font><font  color="#007700">{<br  />    var </font><font  color="#0000BB">$name</font><font  color="#007700">;<br  /><br  />    function </font><font  color="#0000BB">TestObj</font><font  color="#007700">(</font><font  color="#0000BB">$name</font><font  color="#007700">)<br  />    {<br  />        </font><font  color="#0000BB">$this</font><font  color="#007700">-></font><font  color="#0000BB">name </font><font  color="#007700">= </font><font  color="#0000BB">$name</font><font  color="#007700">;<br  />    }<br  /><br  />    </font><font  color="#FF8000">/* This is the static comparing function: */<br  />    </font><font  color="#007700">function </font><font  color="#0000BB">cmp_obj</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, </font><font  color="#0000BB">$b</font><font  color="#007700">)<br  />    {<br  />        </font><font  color="#0000BB">$al </font><font  color="#007700">= </font><font  color="#0000BB">strtolower</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">-></font><font  color="#0000BB">name</font><font  color="#007700">);<br  />        </font><font  color="#0000BB">$bl </font><font  color="#007700">= </font><font  color="#0000BB">strtolower</font><font  color="#007700">(</font><font  color="#0000BB">$b</font><font  color="#007700">-></font><font  color="#0000BB">name</font><font  color="#007700">);<br  />        if (</font><font  color="#0000BB">$al </font><font  color="#007700">== </font><font  color="#0000BB">$bl</font><font  color="#007700">) return </font><font  color="#0000BB">0</font><font  color="#007700">;<br  />        return (</font><font  color="#0000BB">$al </font><font  color="#007700">> </font><font  color="#0000BB">$bl</font><font  color="#007700">) ? +</font><font  color="#0000BB">1 </font><font  color="#007700">: -</font><font  color="#0000BB">1</font><font  color="#007700">;<br  />    }<br  />}<br  /><br  /></font><font  color="#0000BB">$a</font><font  color="#007700">[] = new </font><font  color="#0000BB">TestObj</font><font  color="#007700">(</font><font  color="#DD0000">"c"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$a</font><font  color="#007700">[] = new </font><font  color="#0000BB">TestObj</font><font  color="#007700">(</font><font  color="#DD0000">"b"</font><font  color="#007700">);<br  /></font><font  color="#0000BB">$a</font><font  color="#007700">[] = new </font><font  color="#0000BB">TestObj</font><font  color="#007700">(</font><font  color="#DD0000">"d"</font><font  color="#007700">);<br  /><br  /></font><font  color="#0000BB">usort</font><font  color="#007700">(</font><font  color="#0000BB">$a</font><font  color="#007700">, array (</font><font  color="#DD0000">"TestObj"</font><font  color="#007700">, </font><font  color="#DD0000">"cmp_obj"</font><font  color="#007700">));<br  /><br  />foreach (</font><font  color="#0000BB">$a </font><font  color="#007700">as </font><font  color="#0000BB">$item</font><font  color="#007700">) {<br  />    print </font><font  color="#0000BB">$item</font><font  color="#007700">-></font><font  color="#0000BB">name</font><font  color="#007700">.</font><font  color="#DD0000">"\n"</font><font  color="#007700">;<br  />}<br  /></font><font  color="#0000BB">?></font>
</font>
</code></TD
></TR
></TABLE
><P  >       本例将显示：
      </P
><TABLE  BORDER="0" BGCOLOR="#E0E0E0" CELLPADDING="5" ><TR  ><TD  ><PRE  CLASS="screen" >b
c
d</PRE
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
>
    </P
><P  >     参见
     <SPAN HREF="#"><B  CLASS="function" >uasort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >uksort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >sort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >asort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >arsort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >ksort()</B
></A
>，<SPAN HREF="#"><B  CLASS="function" >natsort()</B
></A
>
     和 <SPAN HREF="#"><B  CLASS="function" >rsort()</B
></A
>。
    </P
></DIV
>]]></description>
        </method>
    </methods>
</Root>

<?xml version="1.0" encoding="UTF-8"?>
<Root name="java.lang.Math">
    <fields>
        <field>
            <name>E</name>
            <signature><![CDATA[public static final double E]]></signature>
            <description><![CDATA[The double value that is closer than any other to
 e, the base of the natural logarithms.<dl><dt><span class="strong">See Also:</span></dt><dd><a href="#">Constant Field Values</a></dd></dl>]]></description>
        </field>
        <field>
            <name>PI</name>
            <signature><![CDATA[public static final double PI]]></signature>
            <description><![CDATA[The double value that is closer than any other to
 pi, the ratio of the circumference of a circle to its
 diameter.<dl><dt><span class="strong">See Also:</span></dt><dd><a href="#">Constant Field Values</a></dd></dl>]]></description>
        </field>
    </fields>
    <methods>
        <method>
            <name>sin</name>
            <signature><![CDATA[public static double sin(double a)]]></signature>
            <description><![CDATA[Returns the trigonometric sine of an angle.  Special cases:
 If the argument is NaN or an infinity, then the
 result is NaN.
 If the argument is zero, then the result is a zero with the
 same sign as the argument.

 The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - an angle, in radians.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the sine of the argument.</dd></dl>]]></description>
        </method>
        <method>
            <name>cos</name>
            <signature><![CDATA[public static double cos(double a)]]></signature>
            <description><![CDATA[Returns the trigonometric cosine of an angle. Special cases:
 If the argument is NaN or an infinity, then the
 result is NaN.

 The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - an angle, in radians.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the cosine of the argument.</dd></dl>]]></description>
        </method>
        <method>
            <name>tan</name>
            <signature><![CDATA[public static double tan(double a)]]></signature>
            <description><![CDATA[Returns the trigonometric tangent of an angle.  Special cases:
 If the argument is NaN or an infinity, then the result
 is NaN.
 If the argument is zero, then the result is a zero with the
 same sign as the argument.

 The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - an angle, in radians.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the tangent of the argument.</dd></dl>]]></description>
        </method>
        <method>
            <name>asin</name>
            <signature><![CDATA[public static double asin(double a)]]></signature>
            <description><![CDATA[Returns the arc sine of a value; the returned angle is in the
 range -pi/2 through pi/2.  Special cases:
 If the argument is NaN or its absolute value is greater
 than 1, then the result is NaN.
 If the argument is zero, then the result is a zero with the
 same sign as the argument.

 The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - the value whose arc sine is to be returned.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the arc sine of the argument.</dd></dl>]]></description>
        </method>
        <method>
            <name>acos</name>
            <signature><![CDATA[public static double acos(double a)]]></signature>
            <description><![CDATA[Returns the arc cosine of a value; the returned angle is in the
 range 0.0 through pi.  Special case:
 If the argument is NaN or its absolute value is greater
 than 1, then the result is NaN.

 The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - the value whose arc cosine is to be returned.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the arc cosine of the argument.</dd></dl>]]></description>
        </method>
        <method>
            <name>atan</name>
            <signature><![CDATA[public static double atan(double a)]]></signature>
            <description><![CDATA[Returns the arc tangent of a value; the returned angle is in the
 range -pi/2 through pi/2.  Special cases:
 If the argument is NaN, then the result is NaN.
 If the argument is zero, then the result is a zero with the
 same sign as the argument.

 The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - the value whose arc tangent is to be returned.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the arc tangent of the argument.</dd></dl>]]></description>
        </method>
        <method>
            <name>toRadians</name>
            <signature><![CDATA[public static double toRadians(double angdeg)]]></signature>
            <description><![CDATA[Converts an angle measured in degrees to an approximately
 equivalent angle measured in radians.  The conversion from
 degrees to radians is generally inexact.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>angdeg</code> - an angle, in degrees</dd>
<dt><span class="strong">Returns:</span></dt><dd>the measurement of the angle <code>angdeg</code>
          in radians.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.2</dd></dl>]]></description>
        </method>
        <method>
            <name>toDegrees</name>
            <signature><![CDATA[public static double toDegrees(double angrad)]]></signature>
            <description><![CDATA[Converts an angle measured in radians to an approximately
 equivalent angle measured in degrees.  The conversion from
 radians to degrees is generally inexact; users should
 not expect cos(toRadians(90.0)) to exactly
 equal 0.0.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>angrad</code> - an angle, in radians</dd>
<dt><span class="strong">Returns:</span></dt><dd>the measurement of the angle <code>angrad</code>
          in degrees.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.2</dd></dl>]]></description>
        </method>
        <method>
            <name>exp</name>
            <signature><![CDATA[public static double exp(double a)]]></signature>
            <description><![CDATA[Returns Euler's number e raised to the power of a
 double value.  Special cases:
 If the argument is NaN, the result is NaN.
 If the argument is positive infinity, then the result is
 positive infinity.
 If the argument is negative infinity, then the result is
 positive zero.

 The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - the exponent to raise <i>e</i> to.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the value <i>e</i><sup><code>a</code></sup>,
          where <i>e</i> is the base of the natural logarithms.</dd></dl>]]></description>
        </method>
        <method>
            <name>log</name>
            <signature><![CDATA[public static double log(double a)]]></signature>
            <description><![CDATA[Returns the natural logarithm (base e) of a double
 value.  Special cases:
 If the argument is NaN or less than zero, then the result
 is NaN.
 If the argument is positive infinity, then the result is
 positive infinity.
 If the argument is positive zero or negative zero, then the
 result is negative infinity.

 The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - a value</dd>
<dt><span class="strong">Returns:</span></dt><dd>the value ln <code>a</code>, the natural logarithm of
          <code>a</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>log10</name>
            <signature><![CDATA[public static double log10(double a)]]></signature>
            <description><![CDATA[Returns the base 10 logarithm of a double value.
 Special cases:

 If the argument is NaN or less than zero, then the result
 is NaN.
 If the argument is positive infinity, then the result is
 positive infinity.
 If the argument is positive zero or negative zero, then the
 result is negative infinity.
  If the argument is equal to 10n for
 integer n, then the result is n.
 

 The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - a value</dd>
<dt><span class="strong">Returns:</span></dt><dd>the base 10 logarithm of  <code>a</code>.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>sqrt</name>
            <signature><![CDATA[public static double sqrt(double a)]]></signature>
            <description><![CDATA[Returns the correctly rounded positive square root of a
 double value.
 Special cases:
 If the argument is NaN or less than zero, then the result
 is NaN.
 If the argument is positive infinity, then the result is positive
 infinity.
 If the argument is positive zero or negative zero, then the
 result is the same as the argument.
 Otherwise, the result is the double value closest to
 the true mathematical square root of the argument value.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - a value.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the positive square root of <code>a</code>.
          If the argument is NaN or less than zero, the result is NaN.</dd></dl>]]></description>
        </method>
        <method>
            <name>cbrt</name>
            <signature><![CDATA[public static double cbrt(double a)]]></signature>
            <description><![CDATA[Returns the cube root of a double value.  For
 positive finite x, cbrt(-x) ==
 -cbrt(x); that is, the cube root of a negative value is
 the negative of the cube root of that value's magnitude.

 Special cases:

 

 If the argument is NaN, then the result is NaN.

 If the argument is infinite, then the result is an infinity
 with the same sign as the argument.

 If the argument is zero, then the result is a zero with the
 same sign as the argument.

 

 The computed result must be within 1 ulp of the exact result.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - a value.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the cube root of <code>a</code>.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>IEEEremainder</name>
            <signature><![CDATA[public static double IEEEremainder(double f1,
                   double f2)]]></signature>
            <description><![CDATA[Computes the remainder operation on two arguments as prescribed
 by the IEEE 754 standard.
 The remainder value is mathematically equal to
 f1 - f2 × n,
 where n is the mathematical integer closest to the exact
 mathematical value of the quotient f1/f2, and if two
 mathematical integers are equally close to f1/f2,
 then n is the integer that is even. If the remainder is
 zero, its sign is the same as the sign of the first argument.
 Special cases:
 If either argument is NaN, or the first argument is infinite,
 or the second argument is positive zero or negative zero, then the
 result is NaN.
 If the first argument is finite and the second argument is
 infinite, then the result is the same as the first argument.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>f1</code> - the dividend.</dd><dd><code>f2</code> - the divisor.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the remainder when <code>f1</code> is divided by
          <code>f2</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>ceil</name>
            <signature><![CDATA[public static double ceil(double a)]]></signature>
            <description><![CDATA[Returns the smallest (closest to negative infinity)
 double value that is greater than or equal to the
 argument and is equal to a mathematical integer. Special cases:
 If the argument value is already equal to a
 mathematical integer, then the result is the same as the
 argument.  If the argument is NaN or an infinity or
 positive zero or negative zero, then the result is the same as
 the argument.  If the argument value is less than zero but
 greater than -1.0, then the result is negative zero. Note
 that the value of Math.ceil(x) is exactly the
 value of -Math.floor(-x).<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - a value.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the smallest (closest to negative infinity)
          floating-point value that is greater than or equal to
          the argument and is equal to a mathematical integer.</dd></dl>]]></description>
        </method>
        <method>
            <name>floor</name>
            <signature><![CDATA[public static double floor(double a)]]></signature>
            <description><![CDATA[Returns the largest (closest to positive infinity)
 double value that is less than or equal to the
 argument and is equal to a mathematical integer. Special cases:
 If the argument value is already equal to a
 mathematical integer, then the result is the same as the
 argument.  If the argument is NaN or an infinity or
 positive zero or negative zero, then the result is the same as
 the argument.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - a value.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the largest (closest to positive infinity)
          floating-point value that less than or equal to the argument
          and is equal to a mathematical integer.</dd></dl>]]></description>
        </method>
        <method>
            <name>rint</name>
            <signature><![CDATA[public static double rint(double a)]]></signature>
            <description><![CDATA[Returns the double value that is closest in value
 to the argument and is equal to a mathematical integer. If two
 double values that are mathematical integers are
 equally close, the result is the integer value that is
 even. Special cases:
 If the argument value is already equal to a mathematical
 integer, then the result is the same as the argument.
 If the argument is NaN or an infinity or positive zero or negative
 zero, then the result is the same as the argument.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - a <code>double</code> value.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the closest floating-point value to <code>a</code> that is
          equal to a mathematical integer.</dd></dl>]]></description>
        </method>
        <method>
            <name>atan2</name>
            <signature><![CDATA[public static double atan2(double y,
           double x)]]></signature>
            <description><![CDATA[Returns the angle theta from the conversion of rectangular
 coordinates (x, y) to polar
 coordinates (r, theta).
 This method computes the phase theta by computing an arc tangent
 of y/x in the range of -pi to pi. Special
 cases:
 If either argument is NaN, then the result is NaN.
 If the first argument is positive zero and the second argument
 is positive, or the first argument is positive and finite and the
 second argument is positive infinity, then the result is positive
 zero.
 If the first argument is negative zero and the second argument
 is positive, or the first argument is negative and finite and the
 second argument is positive infinity, then the result is negative zero.
 If the first argument is positive zero and the second argument
 is negative, or the first argument is positive and finite and the
 second argument is negative infinity, then the result is the
 double value closest to pi.
 If the first argument is negative zero and the second argument
 is negative, or the first argument is negative and finite and the
 second argument is negative infinity, then the result is the
 double value closest to -pi.
 If the first argument is positive and the second argument is
 positive zero or negative zero, or the first argument is positive
 infinity and the second argument is finite, then the result is the
 double value closest to pi/2.
 If the first argument is negative and the second argument is
 positive zero or negative zero, or the first argument is negative
 infinity and the second argument is finite, then the result is the
 double value closest to -pi/2.
 If both arguments are positive infinity, then the result is the
 double value closest to pi/4.
 If the first argument is positive infinity and the second argument
 is negative infinity, then the result is the double
 value closest to 3*pi/4.
 If the first argument is negative infinity and the second argument
 is positive infinity, then the result is the double value
 closest to -pi/4.
 If both arguments are negative infinity, then the result is the
 double value closest to -3*pi/4.

 The computed result must be within 2 ulps of the exact result.
 Results must be semi-monotonic.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>y</code> - the ordinate coordinate</dd><dd><code>x</code> - the abscissa coordinate</dd>
<dt><span class="strong">Returns:</span></dt><dd>the <i>theta</i> component of the point
          (<i>r</i>, <i>theta</i>)
          in polar coordinates that corresponds to the point
          (<i>x</i>, <i>y</i>) in Cartesian coordinates.</dd></dl>]]></description>
        </method>
        <method>
            <name>pow</name>
            <signature><![CDATA[public static double pow(double a,
         double b)]]></signature>
            <description><![CDATA[Returns the value of the first argument raised to the power of the
 second argument. Special cases:

 If the second argument is positive or negative zero, then the
 result is 1.0.
 If the second argument is 1.0, then the result is the same as the
 first argument.
 If the second argument is NaN, then the result is NaN.
 If the first argument is NaN and the second argument is nonzero,
 then the result is NaN.

 If
 
 the absolute value of the first argument is greater than 1
 and the second argument is positive infinity, or
 the absolute value of the first argument is less than 1 and
 the second argument is negative infinity,
 
 then the result is positive infinity.

 If
 
 the absolute value of the first argument is greater than 1 and
 the second argument is negative infinity, or
 the absolute value of the
 first argument is less than 1 and the second argument is positive
 infinity,
 
 then the result is positive zero.

 If the absolute value of the first argument equals 1 and the
 second argument is infinite, then the result is NaN.

 If
 
 the first argument is positive zero and the second argument
 is greater than zero, or
 the first argument is positive infinity and the second
 argument is less than zero,
 
 then the result is positive zero.

 If
 
 the first argument is positive zero and the second argument
 is less than zero, or
 the first argument is positive infinity and the second
 argument is greater than zero,
 
 then the result is positive infinity.

 If
 
 the first argument is negative zero and the second argument
 is greater than zero but not a finite odd integer, or
 the first argument is negative infinity and the second
 argument is less than zero but not a finite odd integer,
 
 then the result is positive zero.

 If
 
 the first argument is negative zero and the second argument
 is a positive finite odd integer, or
 the first argument is negative infinity and the second
 argument is a negative finite odd integer,
 
 then the result is negative zero.

 If
 
 the first argument is negative zero and the second argument
 is less than zero but not a finite odd integer, or
 the first argument is negative infinity and the second
 argument is greater than zero but not a finite odd integer,
 
 then the result is positive infinity.

 If
 
 the first argument is negative zero and the second argument
 is a negative finite odd integer, or
 the first argument is negative infinity and the second
 argument is a positive finite odd integer,
 
 then the result is negative infinity.

 If the first argument is finite and less than zero
 
  if the second argument is a finite even integer, the
 result is equal to the result of raising the absolute value of
 the first argument to the power of the second argument

 if the second argument is a finite odd integer, the result
 is equal to the negative of the result of raising the absolute
 value of the first argument to the power of the second
 argument

 if the second argument is finite and not an integer, then
 the result is NaN.
 

 If both arguments are integers, then the result is exactly equal
 to the mathematical result of raising the first argument to the power
 of the second argument if that result can in fact be represented
 exactly as a double value.

 (In the foregoing descriptions, a floating-point value is
 considered to be an integer if and only if it is finite and a
 fixed point of the method ceil or,
 equivalently, a fixed point of the method floor. A value is a fixed point of a one-argument
 method if and only if the result of applying the method to the
 value is equal to the value.)

 The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - the base.</dd><dd><code>b</code> - the exponent.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the value <code>a</code><sup><code>b</code></sup>.</dd></dl>]]></description>
        </method>
        <method>
            <name>round</name>
            <signature><![CDATA[public static int round(float a)]]></signature>
            <description><![CDATA[Returns the closest int to the argument, with ties
 rounding up.

 
 Special cases:
 If the argument is NaN, the result is 0.
 If the argument is negative infinity or any value less than or
 equal to the value of Integer.MIN_VALUE, the result is
 equal to the value of Integer.MIN_VALUE.
 If the argument is positive infinity or any value greater than or
 equal to the value of Integer.MAX_VALUE, the result is
 equal to the value of Integer.MAX_VALUE.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - a floating-point value to be rounded to an integer.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the value of the argument rounded to the nearest
          <code>int</code> value.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Integer.MAX_VALUE</code></a>, 
<a href="#"><code>Integer.MIN_VALUE</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>round</name>
            <signature><![CDATA[public static long round(double a)]]></signature>
            <description><![CDATA[Returns the closest long to the argument, with ties
 rounding up.

 Special cases:
 If the argument is NaN, the result is 0.
 If the argument is negative infinity or any value less than or
 equal to the value of Long.MIN_VALUE, the result is
 equal to the value of Long.MIN_VALUE.
 If the argument is positive infinity or any value greater than or
 equal to the value of Long.MAX_VALUE, the result is
 equal to the value of Long.MAX_VALUE.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - a floating-point value to be rounded to a
          <code>long</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the value of the argument rounded to the nearest
          <code>long</code> value.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Long.MAX_VALUE</code></a>, 
<a href="#"><code>Long.MIN_VALUE</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>random</name>
            <signature><![CDATA[public static double random()]]></signature>
            <description><![CDATA[Returns a double value with a positive sign, greater
 than or equal to 0.0 and less than 1.0.
 Returned values are chosen pseudorandomly with (approximately)
 uniform distribution from that range.

 When this method is first called, it creates a single new
 pseudorandom-number generator, exactly as if by the expression

 new java.util.Random()

 This new pseudorandom-number generator is used thereafter for
 all calls to this method and is used nowhere else.

 This method is properly synchronized to allow correct use by
 more than one thread. However, if many threads need to generate
 pseudorandom numbers at a great rate, it may reduce contention
 for each thread to have its own pseudorandom-number generator.<dl><dt><span class="strong">Returns:</span></dt><dd>a pseudorandom <code>double</code> greater than or equal
 to <code>0.0</code> and less than <code>1.0</code>.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Random.nextDouble()</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>abs</name>
            <signature><![CDATA[public static int abs(int a)]]></signature>
            <description><![CDATA[Returns the absolute value of an int value.
 If the argument is not negative, the argument is returned.
 If the argument is negative, the negation of the argument is returned.

 Note that if the argument is equal to the value of
 Integer.MIN_VALUE, the most negative representable
 int value, the result is that same value, which is
 negative.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - the argument whose absolute value is to be determined</dd>
<dt><span class="strong">Returns:</span></dt><dd>the absolute value of the argument.</dd></dl>]]></description>
        </method>
        <method>
            <name>abs</name>
            <signature><![CDATA[public static long abs(long a)]]></signature>
            <description><![CDATA[Returns the absolute value of a long value.
 If the argument is not negative, the argument is returned.
 If the argument is negative, the negation of the argument is returned.

 Note that if the argument is equal to the value of
 Long.MIN_VALUE, the most negative representable
 long value, the result is that same value, which
 is negative.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - the argument whose absolute value is to be determined</dd>
<dt><span class="strong">Returns:</span></dt><dd>the absolute value of the argument.</dd></dl>]]></description>
        </method>
        <method>
            <name>abs</name>
            <signature><![CDATA[public static float abs(float a)]]></signature>
            <description><![CDATA[Returns the absolute value of a float value.
 If the argument is not negative, the argument is returned.
 If the argument is negative, the negation of the argument is returned.
 Special cases:
 If the argument is positive zero or negative zero, the
 result is positive zero.
 If the argument is infinite, the result is positive infinity.
 If the argument is NaN, the result is NaN.
 In other words, the result is the same as the value of the expression:
 Float.intBitsToFloat(0x7fffffff & Float.floatToIntBits(a))<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - the argument whose absolute value is to be determined</dd>
<dt><span class="strong">Returns:</span></dt><dd>the absolute value of the argument.</dd></dl>]]></description>
        </method>
        <method>
            <name>abs</name>
            <signature><![CDATA[public static double abs(double a)]]></signature>
            <description><![CDATA[Returns the absolute value of a double value.
 If the argument is not negative, the argument is returned.
 If the argument is negative, the negation of the argument is returned.
 Special cases:
 If the argument is positive zero or negative zero, the result
 is positive zero.
 If the argument is infinite, the result is positive infinity.
 If the argument is NaN, the result is NaN.
 In other words, the result is the same as the value of the expression:
 Double.longBitsToDouble((Double.doubleToLongBits(a)<<1)>>>1)<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - the argument whose absolute value is to be determined</dd>
<dt><span class="strong">Returns:</span></dt><dd>the absolute value of the argument.</dd></dl>]]></description>
        </method>
        <method>
            <name>max</name>
            <signature><![CDATA[public static int max(int a,
      int b)]]></signature>
            <description><![CDATA[Returns the greater of two int values. That is, the
 result is the argument closer to the value of
 Integer.MAX_VALUE. If the arguments have the same value,
 the result is that same value.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - an argument.</dd><dd><code>b</code> - another argument.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the larger of <code>a</code> and <code>b</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>max</name>
            <signature><![CDATA[public static long max(long a,
       long b)]]></signature>
            <description><![CDATA[Returns the greater of two long values. That is, the
 result is the argument closer to the value of
 Long.MAX_VALUE. If the arguments have the same value,
 the result is that same value.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - an argument.</dd><dd><code>b</code> - another argument.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the larger of <code>a</code> and <code>b</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>max</name>
            <signature><![CDATA[public static float max(float a,
        float b)]]></signature>
            <description><![CDATA[Returns the greater of two float values.  That is,
 the result is the argument closer to positive infinity. If the
 arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero. If one
 argument is positive zero and the other negative zero, the
 result is positive zero.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - an argument.</dd><dd><code>b</code> - another argument.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the larger of <code>a</code> and <code>b</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>max</name>
            <signature><![CDATA[public static double max(double a,
         double b)]]></signature>
            <description><![CDATA[Returns the greater of two double values.  That
 is, the result is the argument closer to positive infinity. If
 the arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero. If one
 argument is positive zero and the other negative zero, the
 result is positive zero.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - an argument.</dd><dd><code>b</code> - another argument.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the larger of <code>a</code> and <code>b</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>min</name>
            <signature><![CDATA[public static int min(int a,
      int b)]]></signature>
            <description><![CDATA[Returns the smaller of two int values. That is,
 the result the argument closer to the value of
 Integer.MIN_VALUE.  If the arguments have the same
 value, the result is that same value.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - an argument.</dd><dd><code>b</code> - another argument.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the smaller of <code>a</code> and <code>b</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>min</name>
            <signature><![CDATA[public static long min(long a,
       long b)]]></signature>
            <description><![CDATA[Returns the smaller of two long values. That is,
 the result is the argument closer to the value of
 Long.MIN_VALUE. If the arguments have the same
 value, the result is that same value.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - an argument.</dd><dd><code>b</code> - another argument.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the smaller of <code>a</code> and <code>b</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>min</name>
            <signature><![CDATA[public static float min(float a,
        float b)]]></signature>
            <description><![CDATA[Returns the smaller of two float values.  That is,
 the result is the value closer to negative infinity. If the
 arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero.  If
 one argument is positive zero and the other is negative zero,
 the result is negative zero.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - an argument.</dd><dd><code>b</code> - another argument.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the smaller of <code>a</code> and <code>b</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>min</name>
            <signature><![CDATA[public static double min(double a,
         double b)]]></signature>
            <description><![CDATA[Returns the smaller of two double values.  That
 is, the result is the value closer to negative infinity. If the
 arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero. If one
 argument is positive zero and the other is negative zero, the
 result is negative zero.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - an argument.</dd><dd><code>b</code> - another argument.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the smaller of <code>a</code> and <code>b</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>ulp</name>
            <signature><![CDATA[public static double ulp(double d)]]></signature>
            <description><![CDATA[Returns the size of an ulp of the argument.  An ulp of a
 double value is the positive distance between this
 floating-point value and the double value next
 larger in magnitude.  Note that for non-NaN x,
 ulp(-x) == ulp(x).

 Special Cases:
 
  If the argument is NaN, then the result is NaN.
  If the argument is positive or negative infinity, then the
 result is positive infinity.
  If the argument is positive or negative zero, then the result is
 Double.MIN_VALUE.
  If the argument is ±Double.MAX_VALUE, then
 the result is equal to 2971.
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>d</code> - the floating-point value whose ulp is to be returned</dd>
<dt><span class="strong">Returns:</span></dt><dd>the size of an ulp of the argument</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>ulp</name>
            <signature><![CDATA[public static float ulp(float f)]]></signature>
            <description><![CDATA[Returns the size of an ulp of the argument.  An ulp of a
 float value is the positive distance between this
 floating-point value and the float value next
 larger in magnitude.  Note that for non-NaN x,
 ulp(-x) == ulp(x).

 Special Cases:
 
  If the argument is NaN, then the result is NaN.
  If the argument is positive or negative infinity, then the
 result is positive infinity.
  If the argument is positive or negative zero, then the result is
 Float.MIN_VALUE.
  If the argument is ±Float.MAX_VALUE, then
 the result is equal to 2104.
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>f</code> - the floating-point value whose ulp is to be returned</dd>
<dt><span class="strong">Returns:</span></dt><dd>the size of an ulp of the argument</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>signum</name>
            <signature><![CDATA[public static double signum(double d)]]></signature>
            <description><![CDATA[Returns the signum function of the argument; zero if the argument
 is zero, 1.0 if the argument is greater than zero, -1.0 if the
 argument is less than zero.

 Special Cases:
 
  If the argument is NaN, then the result is NaN.
  If the argument is positive zero or negative zero, then the
      result is the same as the argument.
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>d</code> - the floating-point value whose signum is to be returned</dd>
<dt><span class="strong">Returns:</span></dt><dd>the signum function of the argument</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>signum</name>
            <signature><![CDATA[public static float signum(float f)]]></signature>
            <description><![CDATA[Returns the signum function of the argument; zero if the argument
 is zero, 1.0f if the argument is greater than zero, -1.0f if the
 argument is less than zero.

 Special Cases:
 
  If the argument is NaN, then the result is NaN.
  If the argument is positive zero or negative zero, then the
      result is the same as the argument.
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>f</code> - the floating-point value whose signum is to be returned</dd>
<dt><span class="strong">Returns:</span></dt><dd>the signum function of the argument</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>sinh</name>
            <signature><![CDATA[public static double sinh(double x)]]></signature>
            <description><![CDATA[Returns the hyperbolic sine of a double value.
 The hyperbolic sine of x is defined to be
 (ex - e-x)/2
 where e is Euler's number.

 Special cases:
 

 If the argument is NaN, then the result is NaN.

 If the argument is infinite, then the result is an infinity
 with the same sign as the argument.

 If the argument is zero, then the result is a zero with the
 same sign as the argument.

 

 The computed result must be within 2.5 ulps of the exact result.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>x</code> - The number whose hyperbolic sine is to be returned.</dd>
<dt><span class="strong">Returns:</span></dt><dd>The hyperbolic sine of <code>x</code>.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>cosh</name>
            <signature><![CDATA[public static double cosh(double x)]]></signature>
            <description><![CDATA[Returns the hyperbolic cosine of a double value.
 The hyperbolic cosine of x is defined to be
 (ex + e-x)/2
 where e is Euler's number.

 Special cases:
 

 If the argument is NaN, then the result is NaN.

 If the argument is infinite, then the result is positive
 infinity.

 If the argument is zero, then the result is 1.0.

 

 The computed result must be within 2.5 ulps of the exact result.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>x</code> - The number whose hyperbolic cosine is to be returned.</dd>
<dt><span class="strong">Returns:</span></dt><dd>The hyperbolic cosine of <code>x</code>.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>tanh</name>
            <signature><![CDATA[public static double tanh(double x)]]></signature>
            <description><![CDATA[Returns the hyperbolic tangent of a double value.
 The hyperbolic tangent of x is defined to be
 (ex - e-x)/(ex + e-x),
 in other words, sinh(x)/cosh(x).  Note
 that the absolute value of the exact tanh is always less than
 1.

 Special cases:
 

 If the argument is NaN, then the result is NaN.

 If the argument is zero, then the result is a zero with the
 same sign as the argument.

 If the argument is positive infinity, then the result is
 +1.0.

 If the argument is negative infinity, then the result is
 -1.0.

 

 The computed result must be within 2.5 ulps of the exact result.
 The result of tanh for any finite input must have
 an absolute value less than or equal to 1.  Note that once the
 exact result of tanh is within 1/2 of an ulp of the limit value
 of ±1, correctly signed ±1.0 should
 be returned.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>x</code> - The number whose hyperbolic tangent is to be returned.</dd>
<dt><span class="strong">Returns:</span></dt><dd>The hyperbolic tangent of <code>x</code>.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>hypot</name>
            <signature><![CDATA[public static double hypot(double x,
           double y)]]></signature>
            <description><![CDATA[Returns sqrt(x2 +y2)
 without intermediate overflow or underflow.

 Special cases:
 

  If either argument is infinite, then the result
 is positive infinity.

  If either argument is NaN and neither argument is infinite,
 then the result is NaN.

 

 The computed result must be within 1 ulp of the exact
 result.  If one parameter is held constant, the results must be
 semi-monotonic in the other parameter.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>x</code> - a value</dd><dd><code>y</code> - a value</dd>
<dt><span class="strong">Returns:</span></dt><dd>sqrt(<i>x</i><sup>2</sup> +<i>y</i><sup>2</sup>)
 without intermediate overflow or underflow</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>expm1</name>
            <signature><![CDATA[public static double expm1(double x)]]></signature>
            <description><![CDATA[Returns ex -1.  Note that for values of
 x near 0, the exact sum of
 expm1(x) + 1 is much closer to the true
 result of ex than exp(x).

 Special cases:
 
 If the argument is NaN, the result is NaN.

 If the argument is positive infinity, then the result is
 positive infinity.

 If the argument is negative infinity, then the result is
 -1.0.

 If the argument is zero, then the result is a zero with the
 same sign as the argument.

 

 The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.  The result of
 expm1 for any finite input must be greater than or
 equal to -1.0.  Note that once the exact result of
 ex - 1 is within 1/2
 ulp of the limit value -1, -1.0 should be
 returned.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>x</code> - the exponent to raise <i>e</i> to in the computation of
              <i>e</i><sup><code>x</code></sup> -1.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the value <i>e</i><sup><code>x</code></sup> - 1.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>log1p</name>
            <signature><![CDATA[public static double log1p(double x)]]></signature>
            <description><![CDATA[Returns the natural logarithm of the sum of the argument and 1.
 Note that for small values x, the result of
 log1p(x) is much closer to the true result of ln(1
 + x) than the floating-point evaluation of
 log(1.0+x).

 Special cases:

 

 If the argument is NaN or less than -1, then the result is
 NaN.

 If the argument is positive infinity, then the result is
 positive infinity.

 If the argument is negative one, then the result is
 negative infinity.

 If the argument is zero, then the result is a zero with the
 same sign as the argument.

 

 The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>x</code> - a value</dd>
<dt><span class="strong">Returns:</span></dt><dd>the value ln(<code>x</code> + 1), the natural
 log of <code>x</code> + 1</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>copySign</name>
            <signature><![CDATA[public static double copySign(double magnitude,
              double sign)]]></signature>
            <description><![CDATA[Returns the first floating-point argument with the sign of the
 second floating-point argument.  Note that unlike the StrictMath.copySign
 method, this method does not require NaN sign
 arguments to be treated as positive values; implementations are
 permitted to treat some NaN arguments as positive and other NaN
 arguments as negative to allow greater performance.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>magnitude</code> - the parameter providing the magnitude of the result</dd><dd><code>sign</code> - the parameter providing the sign of the result</dd>
<dt><span class="strong">Returns:</span></dt><dd>a value with the magnitude of <code>magnitude</code>
 and the sign of <code>sign</code>.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>copySign</name>
            <signature><![CDATA[public static float copySign(float magnitude,
             float sign)]]></signature>
            <description><![CDATA[Returns the first floating-point argument with the sign of the
 second floating-point argument.  Note that unlike the StrictMath.copySign
 method, this method does not require NaN sign
 arguments to be treated as positive values; implementations are
 permitted to treat some NaN arguments as positive and other NaN
 arguments as negative to allow greater performance.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>magnitude</code> - the parameter providing the magnitude of the result</dd><dd><code>sign</code> - the parameter providing the sign of the result</dd>
<dt><span class="strong">Returns:</span></dt><dd>a value with the magnitude of <code>magnitude</code>
 and the sign of <code>sign</code>.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>getExponent</name>
            <signature><![CDATA[public static int getExponent(float f)]]></signature>
            <description><![CDATA[Returns the unbiased exponent used in the representation of a
 float.  Special cases:

 
 If the argument is NaN or infinite, then the result is
 Float.MAX_EXPONENT + 1.
 If the argument is zero or subnormal, then the result is
 Float.MIN_EXPONENT -1.
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>f</code> - a <code>float</code> value</dd>
<dt><span class="strong">Returns:</span></dt><dd>the unbiased exponent of the argument</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>getExponent</name>
            <signature><![CDATA[public static int getExponent(double d)]]></signature>
            <description><![CDATA[Returns the unbiased exponent used in the representation of a
 double.  Special cases:

 
 If the argument is NaN or infinite, then the result is
 Double.MAX_EXPONENT + 1.
 If the argument is zero or subnormal, then the result is
 Double.MIN_EXPONENT -1.
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>d</code> - a <code>double</code> value</dd>
<dt><span class="strong">Returns:</span></dt><dd>the unbiased exponent of the argument</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>nextAfter</name>
            <signature><![CDATA[public static double nextAfter(double start,
               double direction)]]></signature>
            <description><![CDATA[Returns the floating-point number adjacent to the first
 argument in the direction of the second argument.  If both
 arguments compare as equal the second argument is returned.

 
 Special cases:
 
  If either argument is a NaN, then NaN is returned.

  If both arguments are signed zeros, direction
 is returned unchanged (as implied by the requirement of
 returning the second argument if the arguments compare as
 equal).

  If start is
 ±Double.MIN_VALUE and direction
 has a value such that the result should have a smaller
 magnitude, then a zero with the same sign as start
 is returned.

  If start is infinite and
 direction has a value such that the result should
 have a smaller magnitude, Double.MAX_VALUE with the
 same sign as start is returned.

  If start is equal to ±
 Double.MAX_VALUE and direction has a
 value such that the result should have a larger magnitude, an
 infinity with same sign as start is returned.
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - starting floating-point value</dd><dd><code>direction</code> - value indicating which of
 <code>start</code>'s neighbors or <code>start</code> should
 be returned</dd>
<dt><span class="strong">Returns:</span></dt><dd>The floating-point number adjacent to <code>start</code> in the
 direction of <code>direction</code>.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>nextAfter</name>
            <signature><![CDATA[public static float nextAfter(float start,
              double direction)]]></signature>
            <description><![CDATA[Returns the floating-point number adjacent to the first
 argument in the direction of the second argument.  If both
 arguments compare as equal a value equivalent to the second argument
 is returned.

 
 Special cases:
 
  If either argument is a NaN, then NaN is returned.

  If both arguments are signed zeros, a value equivalent
 to direction is returned.

  If start is
 ±Float.MIN_VALUE and direction
 has a value such that the result should have a smaller
 magnitude, then a zero with the same sign as start
 is returned.

  If start is infinite and
 direction has a value such that the result should
 have a smaller magnitude, Float.MAX_VALUE with the
 same sign as start is returned.

  If start is equal to ±
 Float.MAX_VALUE and direction has a
 value such that the result should have a larger magnitude, an
 infinity with same sign as start is returned.
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - starting floating-point value</dd><dd><code>direction</code> - value indicating which of
 <code>start</code>'s neighbors or <code>start</code> should
 be returned</dd>
<dt><span class="strong">Returns:</span></dt><dd>The floating-point number adjacent to <code>start</code> in the
 direction of <code>direction</code>.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>nextUp</name>
            <signature><![CDATA[public static double nextUp(double d)]]></signature>
            <description><![CDATA[Returns the floating-point value adjacent to d in
 the direction of positive infinity.  This method is
 semantically equivalent to nextAfter(d,
 Double.POSITIVE_INFINITY); however, a nextUp
 implementation may run faster than its equivalent
 nextAfter call.

 Special Cases:
 
  If the argument is NaN, the result is NaN.

  If the argument is positive infinity, the result is
 positive infinity.

  If the argument is zero, the result is
 Double.MIN_VALUE

 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>d</code> - starting floating-point value</dd>
<dt><span class="strong">Returns:</span></dt><dd>The adjacent floating-point value closer to positive
 infinity.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>nextUp</name>
            <signature><![CDATA[public static float nextUp(float f)]]></signature>
            <description><![CDATA[Returns the floating-point value adjacent to f in
 the direction of positive infinity.  This method is
 semantically equivalent to nextAfter(f,
 Float.POSITIVE_INFINITY); however, a nextUp
 implementation may run faster than its equivalent
 nextAfter call.

 Special Cases:
 
  If the argument is NaN, the result is NaN.

  If the argument is positive infinity, the result is
 positive infinity.

  If the argument is zero, the result is
 Float.MIN_VALUE

 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>f</code> - starting floating-point value</dd>
<dt><span class="strong">Returns:</span></dt><dd>The adjacent floating-point value closer to positive
 infinity.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>scalb</name>
            <signature><![CDATA[public static double scalb(double d,
           int scaleFactor)]]></signature>
            <description><![CDATA[Return d ×
 2scaleFactor rounded as if performed
 by a single correctly rounded floating-point multiply to a
 member of the double value set.  See the Java
 Language Specification for a discussion of floating-point
 value sets.  If the exponent of the result is between Double.MIN_EXPONENT and Double.MAX_EXPONENT, the
 answer is calculated exactly.  If the exponent of the result
 would be larger than Double.MAX_EXPONENT, an
 infinity is returned.  Note that if the result is subnormal,
 precision may be lost; that is, when scalb(x, n)
 is subnormal, scalb(scalb(x, n), -n) may not equal
 x.  When the result is non-NaN, the result has the same
 sign as d.

 Special cases:
 
  If the first argument is NaN, NaN is returned.
  If the first argument is infinite, then an infinity of the
 same sign is returned.
  If the first argument is zero, then a zero of the same
 sign is returned.
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>d</code> - number to be scaled by a power of two.</dd><dd><code>scaleFactor</code> - power of 2 used to scale <code>d</code></dd>
<dt><span class="strong">Returns:</span></dt><dd><code>d</code> × 2<sup><code>scaleFactor</code></sup></dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>scalb</name>
            <signature><![CDATA[public static float scalb(float f,
          int scaleFactor)]]></signature>
            <description><![CDATA[Return f ×
 2scaleFactor rounded as if performed
 by a single correctly rounded floating-point multiply to a
 member of the float value set.  See the Java
 Language Specification for a discussion of floating-point
 value sets.  If the exponent of the result is between Float.MIN_EXPONENT and Float.MAX_EXPONENT, the
 answer is calculated exactly.  If the exponent of the result
 would be larger than Float.MAX_EXPONENT, an
 infinity is returned.  Note that if the result is subnormal,
 precision may be lost; that is, when scalb(x, n)
 is subnormal, scalb(scalb(x, n), -n) may not equal
 x.  When the result is non-NaN, the result has the same
 sign as f.

 Special cases:
 
  If the first argument is NaN, NaN is returned.
  If the first argument is infinite, then an infinity of the
 same sign is returned.
  If the first argument is zero, then a zero of the same
 sign is returned.
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>f</code> - number to be scaled by a power of two.</dd><dd><code>scaleFactor</code> - power of 2 used to scale <code>f</code></dd>
<dt><span class="strong">Returns:</span></dt><dd><code>f</code> × 2<sup><code>scaleFactor</code></sup></dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
    </methods>
</Root>

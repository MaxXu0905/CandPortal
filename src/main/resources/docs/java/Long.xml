<?xml version="1.0" encoding="UTF-8"?>
<Root name="java.lang.Long">
    <fields>
        <field>
            <name>MIN_VALUE</name>
            <signature><![CDATA[public static final long MIN_VALUE]]></signature>
            <description><![CDATA[A constant holding the minimum value a long can
 have, -263.<dl><dt><span class="strong">See Also:</span></dt><dd><a href="#">Constant Field Values</a></dd></dl>]]></description>
        </field>
        <field>
            <name>MAX_VALUE</name>
            <signature><![CDATA[public static final long MAX_VALUE]]></signature>
            <description><![CDATA[A constant holding the maximum value a long can
 have, 263-1.<dl><dt><span class="strong">See Also:</span></dt><dd><a href="#">Constant Field Values</a></dd></dl>]]></description>
        </field>
        <field>
            <name>TYPE</name>
            <signature><![CDATA[public static final Class<Long> TYPE]]></signature>
            <description><![CDATA[The Class instance representing the primitive type
 long.<dl><dt><span class="strong">Since:</span></dt>
  <dd>JDK1.1</dd></dl>]]></description>
        </field>
        <field>
            <name>SIZE</name>
            <signature><![CDATA[public static final int SIZE]]></signature>
            <description><![CDATA[The number of bits used to represent a long value in two's
 complement binary form.<dl><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#">Constant Field Values</a></dd></dl>]]></description>
        </field>
    </fields>
    <constructors>
        <constructor>
            <name>Long</name>
            <signature><![CDATA[public Long(long value)]]></signature>
            <description><![CDATA[Constructs a newly allocated Long object that
 represents the specified long argument.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>value</code> - the value to be represented by the
          <code>Long</code> object.</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Long</name>
            <signature><![CDATA[public Long(String s)
     throws NumberFormatException]]></signature>
            <description><![CDATA[Constructs a newly allocated Long object that
 represents the long value indicated by the
 String parameter. The string is converted to a
 long value in exactly the manner used by the
 parseLong method for radix 10.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - the <code>String</code> to be converted to a
             <code>Long</code>.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NumberFormatException</a></code> - if the <code>String</code> does not
             contain a parsable <code>long</code>.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>parseLong(java.lang.String, int)</code></a></dd></dl>]]></description>
        </constructor>
    </constructors>
    <methods>
        <method>
            <name>toString</name>
            <signature><![CDATA[public static String toString(long i,
              int radix)]]></signature>
            <description><![CDATA[Returns a string representation of the first argument in the
 radix specified by the second argument.

 If the radix is smaller than Character.MIN_RADIX
 or larger than Character.MAX_RADIX, then the radix
 10 is used instead.

 If the first argument is negative, the first element of the
 result is the ASCII minus sign '-'
 ('\u002d'). If the first argument is not
 negative, no sign character appears in the result.

 The remaining characters of the result represent the magnitude
 of the first argument. If the magnitude is zero, it is
 represented by a single zero character '0'
 ('\u0030'); otherwise, the first character of
 the representation of the magnitude will not be the zero
 character.  The following ASCII characters are used as digits:

 
   0123456789abcdefghijklmnopqrstuvwxyz
 

 These are '\u0030' through
 '\u0039' and '\u0061' through
 '\u007a'. If radix is
 N, then the first N of these characters
 are used as radix-N digits in the order shown. Thus,
 the digits for hexadecimal (radix 16) are
 0123456789abcdef. If uppercase letters are
 desired, the String.toUpperCase() method may
 be called on the result:

 
  Long.toString(n, 16).toUpperCase()
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>i</code> - a <code>long</code> to be converted to a string.</dd><dd><code>radix</code> - the radix to use in the string representation.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a string representation of the argument in the specified radix.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Character.MAX_RADIX</code></a>, 
<a href="#"><code>Character.MIN_RADIX</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>toHexString</name>
            <signature><![CDATA[public static String toHexString(long i)]]></signature>
            <description><![CDATA[Returns a string representation of the long
 argument as an unsigned integer in base 16.

 The unsigned long value is the argument plus
 264 if the argument is negative; otherwise, it is
 equal to the argument.  This value is converted to a string of
 ASCII digits in hexadecimal (base 16) with no extra
 leading 0s.  If the unsigned magnitude is zero, it
 is represented by a single zero character '0'
 ('\u0030'); otherwise, the first character of
 the representation of the unsigned magnitude will not be the
 zero character. The following characters are used as
 hexadecimal digits:

 
  0123456789abcdef
 

 These are the characters '\u0030' through
 '\u0039' and  '\u0061' through
 '\u0066'.  If uppercase letters are desired,
 the String.toUpperCase() method may be called
 on the result:

 
  Long.toHexString(n).toUpperCase()
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>i</code> - a <code>long</code> to be converted to a string.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the string representation of the unsigned <code>long</code>
          value represented by the argument in hexadecimal
          (base 16).</dd><dt><span class="strong">Since:</span></dt>
  <dd>JDK 1.0.2</dd></dl>]]></description>
        </method>
        <method>
            <name>toOctalString</name>
            <signature><![CDATA[public static String toOctalString(long i)]]></signature>
            <description><![CDATA[Returns a string representation of the long
 argument as an unsigned integer in base 8.

 The unsigned long value is the argument plus
 264 if the argument is negative; otherwise, it is
 equal to the argument.  This value is converted to a string of
 ASCII digits in octal (base 8) with no extra leading
 0s.

 If the unsigned magnitude is zero, it is represented by a
 single zero character '0'
 ('\u0030'); otherwise, the first character of
 the representation of the unsigned magnitude will not be the
 zero character. The following characters are used as octal
 digits:

 
  01234567
 

 These are the characters '\u0030' through
 '\u0037'.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>i</code> - a <code>long</code> to be converted to a string.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the string representation of the unsigned <code>long</code>
          value represented by the argument in octal (base 8).</dd><dt><span class="strong">Since:</span></dt>
  <dd>JDK 1.0.2</dd></dl>]]></description>
        </method>
        <method>
            <name>toBinaryString</name>
            <signature><![CDATA[public static String toBinaryString(long i)]]></signature>
            <description><![CDATA[Returns a string representation of the long
 argument as an unsigned integer in base 2.

 The unsigned long value is the argument plus
 264 if the argument is negative; otherwise, it is
 equal to the argument.  This value is converted to a string of
 ASCII digits in binary (base 2) with no extra leading
 0s.  If the unsigned magnitude is zero, it is
 represented by a single zero character '0'
 ('\u0030'); otherwise, the first character of
 the representation of the unsigned magnitude will not be the
 zero character. The characters '0'
 ('\u0030') and '1'
 ('\u0031') are used as binary digits.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>i</code> - a <code>long</code> to be converted to a string.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the string representation of the unsigned <code>long</code>
          value represented by the argument in binary (base 2).</dd><dt><span class="strong">Since:</span></dt>
  <dd>JDK 1.0.2</dd></dl>]]></description>
        </method>
        <method>
            <name>toString</name>
            <signature><![CDATA[public static String toString(long i)]]></signature>
            <description><![CDATA[Returns a String object representing the specified
 long.  The argument is converted to signed decimal
 representation and returned as a string, exactly as if the
 argument and the radix 10 were given as arguments to the toString(long, int) method.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>i</code> - a <code>long</code> to be converted.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a string representation of the argument in base 10.</dd></dl>]]></description>
        </method>
        <method>
            <name>parseLong</name>
            <signature><![CDATA[public static long parseLong(String s,
             int radix)
                      throws NumberFormatException]]></signature>
            <description><![CDATA[Parses the string argument as a signed long in the
 radix specified by the second argument. The characters in the
 string must all be digits of the specified radix (as determined
 by whether Character.digit(char, int) returns
 a nonnegative value), except that the first character may be an
 ASCII minus sign '-' ('\u002D') to
 indicate a negative value or an ASCII plus sign '+'
 ('\u002B') to indicate a positive value. The
 resulting long value is returned.

 Note that neither the character L
 ('\u004C') nor l
 ('\u006C') is permitted to appear at the end
 of the string as a type indicator, as would be permitted in
 Java programming language source code - except that either
 L or l may appear as a digit for a
 radix greater than 22.

 An exception of type NumberFormatException is
 thrown if any of the following situations occurs:
 

 The first argument is null or is a string of
 length zero.

 The radix is either smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX.

 Any character of the string is not a digit of the specified
 radix, except that the first character may be a minus sign
 '-' ('\u002d') or plus sign '+' ('\u002B') provided that the string is
 longer than length 1.

 The value represented by the string is not a value of type
      long.
 

 Examples:
 
 parseLong("0", 10) returns 0L
 parseLong("473", 10) returns 473L
 parseLong("+42", 10) returns 42L
 parseLong("-0", 10) returns 0L
 parseLong("-FF", 16) returns -255L
 parseLong("1100110", 2) returns 102L
 parseLong("99", 8) throws a NumberFormatException
 parseLong("Hazelnut", 10) throws a NumberFormatException
 parseLong("Hazelnut", 36) returns 1356099454469L
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - the <code>String</code> containing the
                     <code>long</code> representation to be parsed.</dd><dd><code>radix</code> - the radix to be used while parsing <code>s</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the <code>long</code> represented by the string argument in
             the specified radix.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NumberFormatException</a></code> - if the string does not contain a
             parsable <code>long</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>parseLong</name>
            <signature><![CDATA[public static long parseLong(String s)
                      throws NumberFormatException]]></signature>
            <description><![CDATA[Parses the string argument as a signed decimal long.
 The characters in the string must all be decimal digits, except
 that the first character may be an ASCII minus sign '-'
 (\u002D') to indicate a negative value or an
 ASCII plus sign '+' ('\u002B') to
 indicate a positive value. The resulting long value is
 returned, exactly as if the argument and the radix 10
 were given as arguments to the parseLong(java.lang.String, int) method.

 Note that neither the character L
 ('\u004C') nor l
 ('\u006C') is permitted to appear at the end
 of the string as a type indicator, as would be permitted in
 Java programming language source code.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - a <code>String</code> containing the <code>long</code>
             representation to be parsed</dd>
<dt><span class="strong">Returns:</span></dt><dd>the <code>long</code> represented by the argument in
             decimal.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NumberFormatException</a></code> - if the string does not contain a
             parsable <code>long</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>valueOf</name>
            <signature><![CDATA[public static Long valueOf(String s,
           int radix)
                    throws NumberFormatException]]></signature>
            <description><![CDATA[Returns a Long object holding the value
 extracted from the specified String when parsed
 with the radix given by the second argument.  The first
 argument is interpreted as representing a signed
 long in the radix specified by the second
 argument, exactly as if the arguments were given to the parseLong(java.lang.String, int) method. The result is a
 Long object that represents the long
 value specified by the string.

 In other words, this method returns a Long object equal
 to the value of:

 
  new Long(Long.parseLong(s, radix))
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - the string to be parsed</dd><dd><code>radix</code> - the radix to be used in interpreting <code>s</code></dd>
<dt><span class="strong">Returns:</span></dt><dd>a <code>Long</code> object holding the value
             represented by the string argument in the specified
             radix.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NumberFormatException</a></code> - If the <code>String</code> does not
             contain a parsable <code>long</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>valueOf</name>
            <signature><![CDATA[public static Long valueOf(String s)
                    throws NumberFormatException]]></signature>
            <description><![CDATA[Returns a Long object holding the value
 of the specified String. The argument is
 interpreted as representing a signed decimal long,
 exactly as if the argument were given to the parseLong(java.lang.String) method. The result is a
 Long object that represents the integer value
 specified by the string.

 In other words, this method returns a Long object
 equal to the value of:

 
  new Long(Long.parseLong(s))
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - the string to be parsed.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a <code>Long</code> object holding the value
             represented by the string argument.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NumberFormatException</a></code> - If the string cannot be parsed
             as a <code>long</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>valueOf</name>
            <signature><![CDATA[public static Long valueOf(long l)]]></signature>
            <description><![CDATA[Returns a Long instance representing the specified
 long value.
 If a new Long instance is not required, this method
 should generally be used in preference to the constructor
 Long(long), as this method is likely to yield
 significantly better space and time performance by caching
 frequently requested values.

 Note that unlike the corresponding method in the Integer class, this method
 is not required to cache values within a particular
 range.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>l</code> - a long value.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a <code>Long</code> instance representing <code>l</code>.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>decode</name>
            <signature><![CDATA[public static Long decode(String nm)
                   throws NumberFormatException]]></signature>
            <description><![CDATA[Decodes a String into a Long.
 Accepts decimal, hexadecimal, and octal numbers given by the
 following grammar:

 
 
 DecodableString:
 Signopt DecimalNumeral
 Signopt 0x HexDigits
 Signopt 0X HexDigits
 Signopt # HexDigits
 Signopt 0 OctalDigits
 
 Sign:
 -
 +
 
 

 DecimalNumeral, HexDigits, and OctalDigits
 are as defined in section 3.10.1 of
 The Java™ Language Specification,
 except that underscores are not accepted between digits.

 The sequence of characters following an optional
 sign and/or radix specifier ("0x", "0X",
 "#", or leading zero) is parsed as by the Long.parseLong method with the indicated radix (10, 16, or 8).
 This sequence of characters must represent a positive value or
 a NumberFormatException will be thrown.  The result is
 negated if first character of the specified String is
 the minus sign.  No whitespace characters are permitted in the
 String.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>nm</code> - the <code>String</code> to decode.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a <code>Long</code> object holding the <code>long</code>
            value represented by <code>nm</code></dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NumberFormatException</a></code> - if the <code>String</code> does not
            contain a parsable <code>long</code>.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.2</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>parseLong(String, int)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>byteValue</name>
            <signature><![CDATA[public byte byteValue()]]></signature>
            <description><![CDATA[Returns the value of this Long as a
 byte.<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">byteValue</a></code> in class <code><a href="#">Number</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the numeric value represented by this object after conversion
          to type <code>byte</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>shortValue</name>
            <signature><![CDATA[public short shortValue()]]></signature>
            <description><![CDATA[Returns the value of this Long as a
 short.<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">shortValue</a></code> in class <code><a href="#">Number</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the numeric value represented by this object after conversion
          to type <code>short</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>intValue</name>
            <signature><![CDATA[public int intValue()]]></signature>
            <description><![CDATA[Returns the value of this Long as an
 int.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">intValue</a></code> in class <code><a href="#">Number</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the numeric value represented by this object after conversion
          to type <code>int</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>longValue</name>
            <signature><![CDATA[public long longValue()]]></signature>
            <description><![CDATA[Returns the value of this Long as a
 long value.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">longValue</a></code> in class <code><a href="#">Number</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the numeric value represented by this object after conversion
          to type <code>long</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>floatValue</name>
            <signature><![CDATA[public float floatValue()]]></signature>
            <description><![CDATA[Returns the value of this Long as a
 float.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">floatValue</a></code> in class <code><a href="#">Number</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the numeric value represented by this object after conversion
          to type <code>float</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>doubleValue</name>
            <signature><![CDATA[public double doubleValue()]]></signature>
            <description><![CDATA[Returns the value of this Long as a
 double.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">doubleValue</a></code> in class <code><a href="#">Number</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the numeric value represented by this object after conversion
          to type <code>double</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>toString</name>
            <signature><![CDATA[public String toString()]]></signature>
            <description><![CDATA[Returns a String object representing this
 Long's value.  The value is converted to signed
 decimal representation and returned as a string, exactly as if
 the long value were given as an argument to the
 toString(long) method.<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">toString</a></code> in class <code><a href="#">Object</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>a string representation of the value of this object in
          base 10.</dd></dl>]]></description>
        </method>
        <method>
            <name>hashCode</name>
            <signature><![CDATA[public int hashCode()]]></signature>
            <description><![CDATA[Returns a hash code for this Long. The result is
 the exclusive OR of the two halves of the primitive
 long value held by this Long
 object. That is, the hashcode is the value of the expression:

 
  (int)(this.longValue()^(this.longValue()>>>32))
 <dl>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">hashCode</a></code> in class <code><a href="#">Object</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>a hash code value for this object.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Object.equals(java.lang.Object)</code></a>, 
<a href="#"><code>System.identityHashCode(java.lang.Object)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>equals</name>
            <signature><![CDATA[public boolean equals(Object obj)]]></signature>
            <description><![CDATA[Compares this object to the specified object.  The result is
 true if and only if the argument is not
 null and is a Long object that
 contains the same long value as this object.<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">equals</a></code> in class <code><a href="#">Object</a></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>obj</code> - the object to compare with.</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if the objects are the same;
          <code>false</code> otherwise.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Object.hashCode()</code></a>, 
<a href="#"><code>HashMap</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>getLong</name>
            <signature><![CDATA[public static Long getLong(String nm)]]></signature>
            <description><![CDATA[Determines the long value of the system property
 with the specified name.

 The first argument is treated as the name of a system property.
 System properties are accessible through the System.getProperty(java.lang.String) method. The
 string value of this property is then interpreted as a
 long value and a Long object
 representing this value is returned.  Details of possible
 numeric formats can be found with the definition of
 getProperty.

 If there is no property with the specified name, if the
 specified name is empty or null, or if the
 property does not have the correct numeric format, then
 null is returned.

 In other words, this method returns a Long object equal to
 the value of:

 
  getLong(nm, null)
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>nm</code> - property name.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the <code>Long</code> value of the property.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>System.getProperty(java.lang.String)</code></a>, 
<a href="#"><code>System.getProperty(java.lang.String, java.lang.String)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>getLong</name>
            <signature><![CDATA[public static Long getLong(String nm,
           long val)]]></signature>
            <description><![CDATA[Determines the long value of the system property
 with the specified name.

 The first argument is treated as the name of a system property.
 System properties are accessible through the System.getProperty(java.lang.String) method. The
 string value of this property is then interpreted as a
 long value and a Long object
 representing this value is returned.  Details of possible
 numeric formats can be found with the definition of
 getProperty.

 The second argument is the default value. A Long object
 that represents the value of the second argument is returned if there
 is no property of the specified name, if the property does not have
 the correct numeric format, or if the specified name is empty or null.

 In other words, this method returns a Long object equal
 to the value of:

 
  getLong(nm, new Long(val))
 

 but in practice it may be implemented in a manner such as:

 
 Long result = getLong(nm, null);
 return (result == null) ? new Long(val) : result;
 

 to avoid the unnecessary allocation of a Long object when
 the default value is not needed.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>nm</code> - property name.</dd><dd><code>val</code> - default value.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the <code>Long</code> value of the property.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>System.getProperty(java.lang.String)</code></a>, 
<a href="#"><code>System.getProperty(java.lang.String, java.lang.String)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>getLong</name>
            <signature><![CDATA[public static Long getLong(String nm,
           Long val)]]></signature>
            <description><![CDATA[Returns the long value of the system property with
 the specified name.  The first argument is treated as the name
 of a system property.  System properties are accessible through
 the System.getProperty(java.lang.String)
 method. The string value of this property is then interpreted
 as a long value, as per the
 Long.decode method, and a Long object
 representing this value is returned.

 
 If the property value begins with the two ASCII characters
 0x or the ASCII character #, not followed by
 a minus sign, then the rest of it is parsed as a hexadecimal integer
 exactly as for the method valueOf(java.lang.String, int)
 with radix 16.
 If the property value begins with the ASCII character
 0 followed by another character, it is parsed as
 an octal integer exactly as by the method valueOf(java.lang.String, int) with radix 8.
 Otherwise the property value is parsed as a decimal
 integer exactly as by the method
 valueOf(java.lang.String, int) with radix 10.
 

 Note that, in every case, neither L
 ('\u004C') nor l
 ('\u006C') is permitted to appear at the end
 of the property value as a type indicator, as would be
 permitted in Java programming language source code.

 The second argument is the default value. The default value is
 returned if there is no property of the specified name, if the
 property does not have the correct numeric format, or if the
 specified name is empty or null.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>nm</code> - property name.</dd><dd><code>val</code> - default value.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the <code>Long</code> value of the property.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>System.getProperty(java.lang.String)</code></a>, 
<a href="#"><code>System.getProperty(java.lang.String, java.lang.String)</code></a>, 
<a href="#"><code>decode(java.lang.String)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>compareTo</name>
            <signature><![CDATA[public int compareTo(Long anotherLong)]]></signature>
            <description><![CDATA[Compares two Long objects numerically.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">compareTo</a></code> in interface <code><a href="#">Comparable</a><<a href="#">Long</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>anotherLong</code> - the <code>Long</code> to be compared.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the value <code>0</code> if this <code>Long</code> is
          equal to the argument <code>Long</code>; a value less than
          <code>0</code> if this <code>Long</code> is numerically less
          than the argument <code>Long</code>; and a value greater
          than <code>0</code> if this <code>Long</code> is numerically
           greater than the argument <code>Long</code> (signed
           comparison).</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.2</dd></dl>]]></description>
        </method>
        <method>
            <name>compare</name>
            <signature><![CDATA[public static int compare(long x,
          long y)]]></signature>
            <description><![CDATA[Compares two long values numerically.
 The value returned is identical to what would be returned by:
 
    Long.valueOf(x).compareTo(Long.valueOf(y))
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>x</code> - the first <code>long</code> to compare</dd><dd><code>y</code> - the second <code>long</code> to compare</dd>
<dt><span class="strong">Returns:</span></dt><dd>the value <code>0</code> if <code>x == y</code>;
         a value less than <code>0</code> if <code>x < y</code>; and
         a value greater than <code>0</code> if <code>x > y</code></dd><dt><span class="strong">Since:</span></dt>
  <dd>1.7</dd></dl>]]></description>
        </method>
        <method>
            <name>highestOneBit</name>
            <signature><![CDATA[public static long highestOneBit(long i)]]></signature>
            <description><![CDATA[Returns a long value with at most a single one-bit, in the
 position of the highest-order ("leftmost") one-bit in the specified
 long value.  Returns zero if the specified value has no
 one-bits in its two's complement binary representation, that is, if it
 is equal to zero.<dl><dt><span class="strong">Returns:</span></dt><dd>a <code>long</code> value with a single one-bit, in the position
     of the highest-order one-bit in the specified value, or zero if
     the specified value is itself equal to zero.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>lowestOneBit</name>
            <signature><![CDATA[public static long lowestOneBit(long i)]]></signature>
            <description><![CDATA[Returns a long value with at most a single one-bit, in the
 position of the lowest-order ("rightmost") one-bit in the specified
 long value.  Returns zero if the specified value has no
 one-bits in its two's complement binary representation, that is, if it
 is equal to zero.<dl><dt><span class="strong">Returns:</span></dt><dd>a <code>long</code> value with a single one-bit, in the position
     of the lowest-order one-bit in the specified value, or zero if
     the specified value is itself equal to zero.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>numberOfLeadingZeros</name>
            <signature><![CDATA[public static int numberOfLeadingZeros(long i)]]></signature>
            <description><![CDATA[Returns the number of zero bits preceding the highest-order
 ("leftmost") one-bit in the two's complement binary representation
 of the specified long value.  Returns 64 if the
 specified value has no one-bits in its two's complement representation,
 in other words if it is equal to zero.

 Note that this method is closely related to the logarithm base 2.
 For all positive long values x:
 
 floor(log2(x)) = 63 - numberOfLeadingZeros(x)
 ceil(log2(x)) = 64 - numberOfLeadingZeros(x - 1)
 <dl><dt><span class="strong">Returns:</span></dt><dd>the number of zero bits preceding the highest-order
     ("leftmost") one-bit in the two's complement binary representation
     of the specified <code>long</code> value, or 64 if the value
     is equal to zero.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>numberOfTrailingZeros</name>
            <signature><![CDATA[public static int numberOfTrailingZeros(long i)]]></signature>
            <description><![CDATA[Returns the number of zero bits following the lowest-order ("rightmost")
 one-bit in the two's complement binary representation of the specified
 long value.  Returns 64 if the specified value has no
 one-bits in its two's complement representation, in other words if it is
 equal to zero.<dl><dt><span class="strong">Returns:</span></dt><dd>the number of zero bits following the lowest-order ("rightmost")
     one-bit in the two's complement binary representation of the
     specified <code>long</code> value, or 64 if the value is equal
     to zero.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>bitCount</name>
            <signature><![CDATA[public static int bitCount(long i)]]></signature>
            <description><![CDATA[Returns the number of one-bits in the two's complement binary
 representation of the specified long value.  This function is
 sometimes referred to as the population count.<dl><dt><span class="strong">Returns:</span></dt><dd>the number of one-bits in the two's complement binary
     representation of the specified <code>long</code> value.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>rotateLeft</name>
            <signature><![CDATA[public static long rotateLeft(long i,
              int distance)]]></signature>
            <description><![CDATA[Returns the value obtained by rotating the two's complement binary
 representation of the specified long value left by the
 specified number of bits.  (Bits shifted out of the left hand, or
 high-order, side reenter on the right, or low-order.)

 Note that left rotation with a negative distance is equivalent to
 right rotation: rotateLeft(val, -distance) == rotateRight(val,
 distance).  Note also that rotation by any multiple of 64 is a
 no-op, so all but the last six bits of the rotation distance can be
 ignored, even if the distance is negative: rotateLeft(val,
 distance) == rotateLeft(val, distance & 0x3F).<dl><dt><span class="strong">Returns:</span></dt><dd>the value obtained by rotating the two's complement binary
     representation of the specified <code>long</code> value left by the
     specified number of bits.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>rotateRight</name>
            <signature><![CDATA[public static long rotateRight(long i,
               int distance)]]></signature>
            <description><![CDATA[Returns the value obtained by rotating the two's complement binary
 representation of the specified long value right by the
 specified number of bits.  (Bits shifted out of the right hand, or
 low-order, side reenter on the left, or high-order.)

 Note that right rotation with a negative distance is equivalent to
 left rotation: rotateRight(val, -distance) == rotateLeft(val,
 distance).  Note also that rotation by any multiple of 64 is a
 no-op, so all but the last six bits of the rotation distance can be
 ignored, even if the distance is negative: rotateRight(val,
 distance) == rotateRight(val, distance & 0x3F).<dl><dt><span class="strong">Returns:</span></dt><dd>the value obtained by rotating the two's complement binary
     representation of the specified <code>long</code> value right by the
     specified number of bits.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>reverse</name>
            <signature><![CDATA[public static long reverse(long i)]]></signature>
            <description><![CDATA[Returns the value obtained by reversing the order of the bits in the
 two's complement binary representation of the specified long
 value.<dl><dt><span class="strong">Returns:</span></dt><dd>the value obtained by reversing order of the bits in the
     specified <code>long</code> value.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>signum</name>
            <signature><![CDATA[public static int signum(long i)]]></signature>
            <description><![CDATA[Returns the signum function of the specified long value.  (The
 return value is -1 if the specified value is negative; 0 if the
 specified value is zero; and 1 if the specified value is positive.)<dl><dt><span class="strong">Returns:</span></dt><dd>the signum function of the specified <code>long</code> value.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>reverseBytes</name>
            <signature><![CDATA[public static long reverseBytes(long i)]]></signature>
            <description><![CDATA[Returns the value obtained by reversing the order of the bytes in the
 two's complement representation of the specified long value.<dl><dt><span class="strong">Returns:</span></dt><dd>the value obtained by reversing the bytes in the specified
     <code>long</code> value.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
    </methods>
</Root>

<?xml version="1.0" encoding="UTF-8"?>
<Root name="java.util.Formatter">
    <constructors>
        <constructor>
            <name>Formatter</name>
            <signature><![CDATA[public Formatter()]]></signature>
            <description><![CDATA[Constructs a new formatter.

  The destination of the formatted output is a StringBuilder
 which may be retrieved by invoking out() and whose
 current content may be converted into a string by invoking toString().  The locale used is the default locale for this instance of the Java
 virtual machine.]]></description>
        </constructor>
        <constructor>
            <name>Formatter</name>
            <signature><![CDATA[public Formatter(Appendable a)]]></signature>
            <description><![CDATA[Constructs a new formatter with the specified destination.

  The locale used is the default
 locale for this instance of the Java virtual machine.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Destination for the formatted output.  If <code>a</code> is
         <code>null</code> then a <a href="#"><code>StringBuilder</code></a> will be created.</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Formatter</name>
            <signature><![CDATA[public Formatter(Locale l)]]></signature>
            <description><![CDATA[Constructs a new formatter with the specified locale.

  The destination of the formatted output is a StringBuilder
 which may be retrieved by invoking out() and whose current
 content may be converted into a string by invoking toString().<dl><dt><span class="strong">Parameters:</span></dt><dd><code>l</code> - The <a href="#">locale</a> to apply during
         formatting.  If <code>l</code> is <code>null</code> then no localization
         is applied.</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Formatter</name>
            <signature><![CDATA[public Formatter(Appendable a,
         Locale l)]]></signature>
            <description><![CDATA[Constructs a new formatter with the specified destination and locale.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Destination for the formatted output.  If <code>a</code> is
         <code>null</code> then a <a href="#"><code>StringBuilder</code></a> will be created.</dd><dd><code>l</code> - The <a href="#">locale</a> to apply during
         formatting.  If <code>l</code> is <code>null</code> then no localization
         is applied.</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Formatter</name>
            <signature><![CDATA[public Formatter(String fileName)
          throws FileNotFoundException]]></signature>
            <description><![CDATA[Constructs a new formatter with the specified file name.

  The charset used is the default charset for this
 instance of the Java virtual machine.

  The locale used is the default
 locale for this instance of the Java virtual machine.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>fileName</code> - The name of the file to use as the destination of this
         formatter.  If the file exists then it will be truncated to
         zero size; otherwise, a new file will be created.  The output
         will be written to the file and is buffered.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">SecurityException</a></code> - If a security manager is present and <a href="#"><code>checkWrite(fileName)</code></a> denies write
          access to the file</dd>
<dd><code><a href="#">FileNotFoundException</a></code> - If the given file name does not denote an existing, writable
          regular file and a new regular file of that name cannot be
          created, or if some other error occurs while opening or
          creating the file</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Formatter</name>
            <signature><![CDATA[public Formatter(String fileName,
         String csn)
          throws FileNotFoundException,
                 UnsupportedEncodingException]]></signature>
            <description><![CDATA[Constructs a new formatter with the specified file name and charset.

  The locale used is the default
 locale for this instance of the Java virtual machine.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>fileName</code> - The name of the file to use as the destination of this
         formatter.  If the file exists then it will be truncated to
         zero size; otherwise, a new file will be created.  The output
         will be written to the file and is buffered.</dd><dd><code>csn</code> - The name of a supported <a href="#">charset</a></dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">FileNotFoundException</a></code> - If the given file name does not denote an existing, writable
          regular file and a new regular file of that name cannot be
          created, or if some other error occurs while opening or
          creating the file</dd>
<dd><code><a href="#">SecurityException</a></code> - If a security manager is present and <a href="#"><code>checkWrite(fileName)</code></a> denies write
          access to the file</dd>
<dd><code><a href="#">UnsupportedEncodingException</a></code> - If the named charset is not supported</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Formatter</name>
            <signature><![CDATA[public Formatter(String fileName,
         String csn,
         Locale l)
          throws FileNotFoundException,
                 UnsupportedEncodingException]]></signature>
            <description><![CDATA[Constructs a new formatter with the specified file name, charset, and
 locale.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>fileName</code> - The name of the file to use as the destination of this
         formatter.  If the file exists then it will be truncated to
         zero size; otherwise, a new file will be created.  The output
         will be written to the file and is buffered.</dd><dd><code>csn</code> - The name of a supported <a href="#">charset</a></dd><dd><code>l</code> - The <a href="#">locale</a> to apply during
         formatting.  If <code>l</code> is <code>null</code> then no localization
         is applied.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">FileNotFoundException</a></code> - If the given file name does not denote an existing, writable
          regular file and a new regular file of that name cannot be
          created, or if some other error occurs while opening or
          creating the file</dd>
<dd><code><a href="#">SecurityException</a></code> - If a security manager is present and <a href="#"><code>checkWrite(fileName)</code></a> denies write
          access to the file</dd>
<dd><code><a href="#">UnsupportedEncodingException</a></code> - If the named charset is not supported</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Formatter</name>
            <signature><![CDATA[public Formatter(File file)
          throws FileNotFoundException]]></signature>
            <description><![CDATA[Constructs a new formatter with the specified file.

  The charset used is the default charset for this
 instance of the Java virtual machine.

  The locale used is the default
 locale for this instance of the Java virtual machine.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>file</code> - The file to use as the destination of this formatter.  If the
         file exists then it will be truncated to zero size; otherwise,
         a new file will be created.  The output will be written to the
         file and is buffered.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">SecurityException</a></code> - If a security manager is present and <a href="#"><code>checkWrite(file.getPath())</code></a> denies
          write access to the file</dd>
<dd><code><a href="#">FileNotFoundException</a></code> - If the given file object does not denote an existing, writable
          regular file and a new regular file of that name cannot be
          created, or if some other error occurs while opening or
          creating the file</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Formatter</name>
            <signature><![CDATA[public Formatter(File file,
         String csn)
          throws FileNotFoundException,
                 UnsupportedEncodingException]]></signature>
            <description><![CDATA[Constructs a new formatter with the specified file and charset.

  The locale used is the default
 locale for this instance of the Java virtual machine.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>file</code> - The file to use as the destination of this formatter.  If the
         file exists then it will be truncated to zero size; otherwise,
         a new file will be created.  The output will be written to the
         file and is buffered.</dd><dd><code>csn</code> - The name of a supported <a href="#">charset</a></dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">FileNotFoundException</a></code> - If the given file object does not denote an existing, writable
          regular file and a new regular file of that name cannot be
          created, or if some other error occurs while opening or
          creating the file</dd>
<dd><code><a href="#">SecurityException</a></code> - If a security manager is present and <a href="#"><code>checkWrite(file.getPath())</code></a> denies
          write access to the file</dd>
<dd><code><a href="#">UnsupportedEncodingException</a></code> - If the named charset is not supported</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Formatter</name>
            <signature><![CDATA[public Formatter(File file,
         String csn,
         Locale l)
          throws FileNotFoundException,
                 UnsupportedEncodingException]]></signature>
            <description><![CDATA[Constructs a new formatter with the specified file, charset, and
 locale.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>file</code> - The file to use as the destination of this formatter.  If the
         file exists then it will be truncated to zero size; otherwise,
         a new file will be created.  The output will be written to the
         file and is buffered.</dd><dd><code>csn</code> - The name of a supported <a href="#">charset</a></dd><dd><code>l</code> - The <a href="#">locale</a> to apply during
         formatting.  If <code>l</code> is <code>null</code> then no localization
         is applied.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">FileNotFoundException</a></code> - If the given file object does not denote an existing, writable
          regular file and a new regular file of that name cannot be
          created, or if some other error occurs while opening or
          creating the file</dd>
<dd><code><a href="#">SecurityException</a></code> - If a security manager is present and <a href="#"><code>checkWrite(file.getPath())</code></a> denies
          write access to the file</dd>
<dd><code><a href="#">UnsupportedEncodingException</a></code> - If the named charset is not supported</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Formatter</name>
            <signature><![CDATA[public Formatter(PrintStream ps)]]></signature>
            <description><![CDATA[Constructs a new formatter with the specified print stream.

  The locale used is the default
 locale for this instance of the Java virtual machine.

  Characters are written to the given PrintStream object and are therefore encoded using that object's
 charset.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>ps</code> - The stream to use as the destination of this formatter.</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Formatter</name>
            <signature><![CDATA[public Formatter(OutputStream os)]]></signature>
            <description><![CDATA[Constructs a new formatter with the specified output stream.

  The charset used is the default charset for this
 instance of the Java virtual machine.

  The locale used is the default
 locale for this instance of the Java virtual machine.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>os</code> - The output stream to use as the destination of this formatter.
         The output will be buffered.</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Formatter</name>
            <signature><![CDATA[public Formatter(OutputStream os,
         String csn)
          throws UnsupportedEncodingException]]></signature>
            <description><![CDATA[Constructs a new formatter with the specified output stream and
 charset.

  The locale used is the default
 locale for this instance of the Java virtual machine.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>os</code> - The output stream to use as the destination of this formatter.
         The output will be buffered.</dd><dd><code>csn</code> - The name of a supported <a href="#">charset</a></dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">UnsupportedEncodingException</a></code> - If the named charset is not supported</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Formatter</name>
            <signature><![CDATA[public Formatter(OutputStream os,
         String csn,
         Locale l)
          throws UnsupportedEncodingException]]></signature>
            <description><![CDATA[Constructs a new formatter with the specified output stream, charset,
 and locale.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>os</code> - The output stream to use as the destination of this formatter.
         The output will be buffered.</dd><dd><code>csn</code> - The name of a supported <a href="#">charset</a></dd><dd><code>l</code> - The <a href="#">locale</a> to apply during
         formatting.  If <code>l</code> is <code>null</code> then no localization
         is applied.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">UnsupportedEncodingException</a></code> - If the named charset is not supported</dd></dl>]]></description>
        </constructor>
    </constructors>
    <methods>
        <method>
            <name>locale</name>
            <signature><![CDATA[public Locale locale()]]></signature>
            <description><![CDATA[Returns the locale set by the construction of this formatter.

  The format method
 for this object which has a locale argument does not change this value.<dl><dt><span class="strong">Returns:</span></dt><dd><code>null</code> if no localization is applied, otherwise a
          locale</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">FormatterClosedException</a></code> - If this formatter has been closed by invoking its <a href="#"><code>close()</code></a> method</dd></dl>]]></description>
        </method>
        <method>
            <name>out</name>
            <signature><![CDATA[public Appendable out()]]></signature>
            <description><![CDATA[Returns the destination for the output.<dl><dt><span class="strong">Returns:</span></dt><dd>The destination for the output</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">FormatterClosedException</a></code> - If this formatter has been closed by invoking its <a href="#"><code>close()</code></a> method</dd></dl>]]></description>
        </method>
        <method>
            <name>toString</name>
            <signature><![CDATA[public String toString()]]></signature>
            <description><![CDATA[Returns the result of invoking toString() on the destination
 for the output.  For example, the following code formats text into a
 StringBuilder then retrieves the resultant string:

 
   Formatter f = new Formatter();
   f.format("Last reboot at %tc", lastRebootDate);
   String s = f.toString();
   // -> s == "Last reboot at Sat Jan 01 00:00:00 PST 2000"
 

  An invocation of this method behaves in exactly the same way as the
 invocation

 
     out().toString() 

  Depending on the specification of toString for the Appendable, the returned string may or may not contain the characters
 written to the destination.  For instance, buffers typically return
 their contents in toString(), but streams cannot since the
 data is discarded.<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">toString</a></code> in class <code><a href="#">Object</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>The result of invoking <code>toString()</code> on the destination
          for the output</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">FormatterClosedException</a></code> - If this formatter has been closed by invoking its <a href="#"><code>close()</code></a> method</dd></dl>]]></description>
        </method>
        <method>
            <name>flush</name>
            <signature><![CDATA[public void flush()]]></signature>
            <description><![CDATA[Flushes this formatter.  If the destination implements the Flushable interface, its flush method will be invoked.

  Flushing a formatter writes any buffered output in the destination
 to the underlying stream.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">flush</a></code> in interface <code><a href="#">Flushable</a></code></dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">FormatterClosedException</a></code> - If this formatter has been closed by invoking its <a href="#"><code>close()</code></a> method</dd></dl>]]></description>
        </method>
        <method>
            <name>close</name>
            <signature><![CDATA[public void close()]]></signature>
            <description><![CDATA[Closes this formatter.  If the destination implements the Closeable interface, its close method will be invoked.

  Closing a formatter allows it to release resources it may be holding
 (such as open files).  If the formatter is already closed, then invoking
 this method has no effect.

  Attempting to invoke any methods except ioException() in
 this formatter after it has been closed will result in a FormatterClosedException.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">close</a></code> in interface <code><a href="#">Closeable</a></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">close</a></code> in interface <code><a href="#">AutoCloseable</a></code></dd>
</dl>]]></description>
        </method>
        <method>
            <name>ioException</name>
            <signature><![CDATA[public IOException ioException()]]></signature>
            <description><![CDATA[Returns the IOException last thrown by this formatter's Appendable.

  If the destination's append() method never throws
 IOException, then this method will always return null.<dl><dt><span class="strong">Returns:</span></dt><dd>The last exception thrown by the Appendable or <code>null</code> if
          no such exception exists.</dd></dl>]]></description>
        </method>
        <method>
            <name>format</name>
            <signature><![CDATA[public Formatter format(String format,
               Object... args)]]></signature>
            <description><![CDATA[Writes a formatted string to this object's destination using the
 specified format string and arguments.  The locale used is the one
 defined during the construction of this formatter.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>format</code> - A format string as described in <a href="#">Format string
         syntax</a>.</dd><dd><code>args</code> - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         <cite>The Java™ Virtual Machine Specification</cite>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>This formatter</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IllegalFormatException</a></code> - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the <a href="#">Details</a>
          section of the formatter class specification.</dd>
<dd><code><a href="#">FormatterClosedException</a></code> - If this formatter has been closed by invoking its <a href="#"><code>close()</code></a> method</dd></dl>]]></description>
        </method>
        <method>
            <name>format</name>
            <signature><![CDATA[public Formatter format(Locale l,
               String format,
               Object... args)]]></signature>
            <description><![CDATA[Writes a formatted string to this object's destination using the
 specified locale, format string, and arguments.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>l</code> - The <a href="#">locale</a> to apply during
         formatting.  If <code>l</code> is <code>null</code> then no localization
         is applied.  This does not change this object's locale that was
         set during construction.</dd><dd><code>format</code> - A format string as described in <a href="#">Format string
         syntax</a></dd><dd><code>args</code> - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         <cite>The Java™ Virtual Machine Specification</cite>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>This formatter</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IllegalFormatException</a></code> - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the <a href="#">Details</a>
          section of the formatter class specification.</dd>
<dd><code><a href="#">FormatterClosedException</a></code> - If this formatter has been closed by invoking its <a href="#"><code>close()</code></a> method</dd></dl>]]></description>
        </method>
    </methods>
</Root>

<?xml version="1.0" encoding="UTF-8"?>
<Root name="java.util.LinkedList&lt;E&gt;">
    <constructors>
        <constructor>
            <name>LinkedList</name>
            <signature><![CDATA[public LinkedList()]]></signature>
            <description><![CDATA[Constructs an empty list.]]></description>
        </constructor>
        <constructor>
            <name>LinkedList</name>
            <signature><![CDATA[public LinkedList(Collection<? extends E> c)]]></signature>
            <description><![CDATA[Constructs a list containing the elements of the specified
 collection, in the order they are returned by the collection's
 iterator.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>c</code> - the collection whose elements are to be placed into this list</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if the specified collection is null</dd></dl>]]></description>
        </constructor>
    </constructors>
    <methods>
        <method>
            <name>getFirst</name>
            <signature><![CDATA[public E getFirst()]]></signature>
            <description><![CDATA[Returns the first element in this list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">getFirst</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the first element in this list</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NoSuchElementException</a></code> - if this list is empty</dd></dl>]]></description>
        </method>
        <method>
            <name>getLast</name>
            <signature><![CDATA[public E getLast()]]></signature>
            <description><![CDATA[Returns the last element in this list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">getLast</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the last element in this list</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NoSuchElementException</a></code> - if this list is empty</dd></dl>]]></description>
        </method>
        <method>
            <name>removeFirst</name>
            <signature><![CDATA[public E removeFirst()]]></signature>
            <description><![CDATA[Removes and returns the first element from this list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">removeFirst</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the first element from this list</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NoSuchElementException</a></code> - if this list is empty</dd></dl>]]></description>
        </method>
        <method>
            <name>removeLast</name>
            <signature><![CDATA[public E removeLast()]]></signature>
            <description><![CDATA[Removes and returns the last element from this list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">removeLast</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the last element from this list</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NoSuchElementException</a></code> - if this list is empty</dd></dl>]]></description>
        </method>
        <method>
            <name>addFirst</name>
            <signature><![CDATA[public void addFirst(E e)]]></signature>
            <description><![CDATA[Inserts the specified element at the beginning of this list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">addFirst</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>e</code> - the element to add</dd></dl>]]></description>
        </method>
        <method>
            <name>addLast</name>
            <signature><![CDATA[public void addLast(E e)]]></signature>
            <description><![CDATA[Appends the specified element to the end of this list.

 This method is equivalent to add(E).<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">addLast</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>e</code> - the element to add</dd></dl>]]></description>
        </method>
        <method>
            <name>contains</name>
            <signature><![CDATA[public boolean contains(Object o)]]></signature>
            <description><![CDATA[Returns true if this list contains the specified element.
 More formally, returns true if and only if this list contains
 at least one element e such that
 (o==null ? e==null : o.equals(e)).<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">contains</a></code> in interface <code><a href="#">Collection</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">contains</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">contains</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">contains</a></code> in class <code><a href="#">AbstractCollection</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>o</code> - element whose presence in this list is to be tested</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if this list contains the specified element</dd></dl>]]></description>
        </method>
        <method>
            <name>size</name>
            <signature><![CDATA[public int size()]]></signature>
            <description><![CDATA[Returns the number of elements in this list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">size</a></code> in interface <code><a href="#">Collection</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">size</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">size</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">size</a></code> in class <code><a href="#">AbstractCollection</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the number of elements in this list</dd></dl>]]></description>
        </method>
        <method>
            <name>add</name>
            <signature><![CDATA[public boolean add(E e)]]></signature>
            <description><![CDATA[Appends the specified element to the end of this list.

 This method is equivalent to addLast(E).<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">add</a></code> in interface <code><a href="#">Collection</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">add</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">add</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">add</a></code> in interface <code><a href="#">Queue</a><<a href="#">E</a>></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">add</a></code> in class <code><a href="#">AbstractList</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>e</code> - element to be appended to this list</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> (as specified by <a href="#"><code>Collection.add(E)</code></a>)</dd></dl>]]></description>
        </method>
        <method>
            <name>remove</name>
            <signature><![CDATA[public boolean remove(Object o)]]></signature>
            <description><![CDATA[Removes the first occurrence of the specified element from this list,
 if it is present.  If this list does not contain the element, it is
 unchanged.  More formally, removes the element with the lowest index
 i such that
 (o==null ? get(i)==null : o.equals(get(i)))
 (if such an element exists).  Returns true if this list
 contained the specified element (or equivalently, if this list
 changed as a result of the call).<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">remove</a></code> in interface <code><a href="#">Collection</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">remove</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">remove</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">remove</a></code> in class <code><a href="#">AbstractCollection</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>o</code> - element to be removed from this list, if present</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if this list contained the specified element</dd></dl>]]></description>
        </method>
        <method>
            <name>addAll</name>
            <signature><![CDATA[public boolean addAll(Collection<? extends E> c)]]></signature>
            <description><![CDATA[Appends all of the elements in the specified collection to the end of
 this list, in the order that they are returned by the specified
 collection's iterator.  The behavior of this operation is undefined if
 the specified collection is modified while the operation is in
 progress.  (Note that this will occur if the specified collection is
 this list, and it's nonempty.)<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">addAll</a></code> in interface <code><a href="#">Collection</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">addAll</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">addAll</a></code> in class <code><a href="#">AbstractCollection</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>c</code> - collection containing elements to be added to this list</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if this list changed as a result of the call</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if the specified collection is null</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>AbstractCollection.add(Object)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>addAll</name>
            <signature><![CDATA[public boolean addAll(int index,
             Collection<? extends E> c)]]></signature>
            <description><![CDATA[Inserts all of the elements in the specified collection into this
 list, starting at the specified position.  Shifts the element
 currently at that position (if any) and any subsequent elements to
 the right (increases their indices).  The new elements will appear
 in the list in the order that they are returned by the
 specified collection's iterator.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">addAll</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">addAll</a></code> in class <code><a href="#">AbstractSequentialList</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - index at which to insert the first element
              from the specified collection</dd><dd><code>c</code> - collection containing elements to be added to this list</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if this list changed as a result of the call</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the index is out of range
         (<tt>index < 0 || index > size()</tt>)</dd>
<dd><code><a href="#">NullPointerException</a></code> - if the specified collection is null</dd></dl>]]></description>
        </method>
        <method>
            <name>clear</name>
            <signature><![CDATA[public void clear()]]></signature>
            <description><![CDATA[Removes all of the elements from this list.
 The list will be empty after this call returns.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">clear</a></code> in interface <code><a href="#">Collection</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">clear</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">clear</a></code> in class <code><a href="#">AbstractList</a><<a href="#">E</a>></code></dd>
</dl>]]></description>
        </method>
        <method>
            <name>get</name>
            <signature><![CDATA[public E get(int index)]]></signature>
            <description><![CDATA[Returns the element at the specified position in this list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">get</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">get</a></code> in class <code><a href="#">AbstractSequentialList</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - index of the element to return</dd>
<dt><span class="strong">Returns:</span></dt><dd>the element at the specified position in this list</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the index is out of range
         (<tt>index < 0 || index >= size()</tt>)</dd></dl>]]></description>
        </method>
        <method>
            <name>set</name>
            <signature><![CDATA[public E set(int index,
    E element)]]></signature>
            <description><![CDATA[Replaces the element at the specified position in this list with the
 specified element.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">set</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">set</a></code> in class <code><a href="#">AbstractSequentialList</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - index of the element to replace</dd><dd><code>element</code> - element to be stored at the specified position</dd>
<dt><span class="strong">Returns:</span></dt><dd>the element previously at the specified position</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the index is out of range
         (<tt>index < 0 || index >= size()</tt>)</dd></dl>]]></description>
        </method>
        <method>
            <name>add</name>
            <signature><![CDATA[public void add(int index,
       E element)]]></signature>
            <description><![CDATA[Inserts the specified element at the specified position in this list.
 Shifts the element currently at that position (if any) and any
 subsequent elements to the right (adds one to their indices).<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">add</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">add</a></code> in class <code><a href="#">AbstractSequentialList</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - index at which the specified element is to be inserted</dd><dd><code>element</code> - element to be inserted</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the index is out of range
         (<tt>index < 0 || index > size()</tt>)</dd></dl>]]></description>
        </method>
        <method>
            <name>remove</name>
            <signature><![CDATA[public E remove(int index)]]></signature>
            <description><![CDATA[Removes the element at the specified position in this list.  Shifts any
 subsequent elements to the left (subtracts one from their indices).
 Returns the element that was removed from the list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">remove</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">remove</a></code> in class <code><a href="#">AbstractSequentialList</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - the index of the element to be removed</dd>
<dt><span class="strong">Returns:</span></dt><dd>the element previously at the specified position</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the index is out of range
         (<tt>index < 0 || index >= size()</tt>)</dd></dl>]]></description>
        </method>
        <method>
            <name>indexOf</name>
            <signature><![CDATA[public int indexOf(Object o)]]></signature>
            <description><![CDATA[Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
 More formally, returns the lowest index i such that
 (o==null ? get(i)==null : o.equals(get(i))),
 or -1 if there is no such index.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">indexOf</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">indexOf</a></code> in class <code><a href="#">AbstractList</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>o</code> - element to search for</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index of the first occurrence of the specified element in
         this list, or -1 if this list does not contain the element</dd></dl>]]></description>
        </method>
        <method>
            <name>lastIndexOf</name>
            <signature><![CDATA[public int lastIndexOf(Object o)]]></signature>
            <description><![CDATA[Returns the index of the last occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
 More formally, returns the highest index i such that
 (o==null ? get(i)==null : o.equals(get(i))),
 or -1 if there is no such index.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">lastIndexOf</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">lastIndexOf</a></code> in class <code><a href="#">AbstractList</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>o</code> - element to search for</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index of the last occurrence of the specified element in
         this list, or -1 if this list does not contain the element</dd></dl>]]></description>
        </method>
        <method>
            <name>peek</name>
            <signature><![CDATA[public E peek()]]></signature>
            <description><![CDATA[Retrieves, but does not remove, the head (first element) of this list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">peek</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">peek</a></code> in interface <code><a href="#">Queue</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the head of this list, or <code>null</code> if this list is empty</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>element</name>
            <signature><![CDATA[public E element()]]></signature>
            <description><![CDATA[Retrieves, but does not remove, the head (first element) of this list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">element</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">element</a></code> in interface <code><a href="#">Queue</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the head of this list</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NoSuchElementException</a></code> - if this list is empty</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>poll</name>
            <signature><![CDATA[public E poll()]]></signature>
            <description><![CDATA[Retrieves and removes the head (first element) of this list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">poll</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">poll</a></code> in interface <code><a href="#">Queue</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the head of this list, or <code>null</code> if this list is empty</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>remove</name>
            <signature><![CDATA[public E remove()]]></signature>
            <description><![CDATA[Retrieves and removes the head (first element) of this list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">remove</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">remove</a></code> in interface <code><a href="#">Queue</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the head of this list</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NoSuchElementException</a></code> - if this list is empty</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>offer</name>
            <signature><![CDATA[public boolean offer(E e)]]></signature>
            <description><![CDATA[Adds the specified element as the tail (last element) of this list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">offer</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">offer</a></code> in interface <code><a href="#">Queue</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>e</code> - the element to add</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> (as specified by <a href="#"><code>Queue.offer(E)</code></a>)</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>offerFirst</name>
            <signature><![CDATA[public boolean offerFirst(E e)]]></signature>
            <description><![CDATA[Inserts the specified element at the front of this list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">offerFirst</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>e</code> - the element to insert</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> (as specified by <a href="#"><code>Deque.offerFirst(E)</code></a>)</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>offerLast</name>
            <signature><![CDATA[public boolean offerLast(E e)]]></signature>
            <description><![CDATA[Inserts the specified element at the end of this list.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">offerLast</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>e</code> - the element to insert</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> (as specified by <a href="#"><code>Deque.offerLast(E)</code></a>)</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>peekFirst</name>
            <signature><![CDATA[public E peekFirst()]]></signature>
            <description><![CDATA[Retrieves, but does not remove, the first element of this list,
 or returns null if this list is empty.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">peekFirst</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the first element of this list, or <code>null</code>
         if this list is empty</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>peekLast</name>
            <signature><![CDATA[public E peekLast()]]></signature>
            <description><![CDATA[Retrieves, but does not remove, the last element of this list,
 or returns null if this list is empty.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">peekLast</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the last element of this list, or <code>null</code>
         if this list is empty</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>pollFirst</name>
            <signature><![CDATA[public E pollFirst()]]></signature>
            <description><![CDATA[Retrieves and removes the first element of this list,
 or returns null if this list is empty.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">pollFirst</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the first element of this list, or <code>null</code> if
     this list is empty</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>pollLast</name>
            <signature><![CDATA[public E pollLast()]]></signature>
            <description><![CDATA[Retrieves and removes the last element of this list,
 or returns null if this list is empty.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">pollLast</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the last element of this list, or <code>null</code> if
     this list is empty</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>push</name>
            <signature><![CDATA[public void push(E e)]]></signature>
            <description><![CDATA[Pushes an element onto the stack represented by this list.  In other
 words, inserts the element at the front of this list.

 This method is equivalent to addFirst(E).<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">push</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>e</code> - the element to push</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>pop</name>
            <signature><![CDATA[public E pop()]]></signature>
            <description><![CDATA[Pops an element from the stack represented by this list.  In other
 words, removes and returns the first element of this list.

 This method is equivalent to removeFirst().<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">pop</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the element at the front of this list (which is the top
         of the stack represented by this list)</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NoSuchElementException</a></code> - if this list is empty</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>removeFirstOccurrence</name>
            <signature><![CDATA[public boolean removeFirstOccurrence(Object o)]]></signature>
            <description><![CDATA[Removes the first occurrence of the specified element in this
 list (when traversing the list from head to tail).  If the list
 does not contain the element, it is unchanged.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">removeFirstOccurrence</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>o</code> - element to be removed from this list, if present</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if the list contained the specified element</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>removeLastOccurrence</name>
            <signature><![CDATA[public boolean removeLastOccurrence(Object o)]]></signature>
            <description><![CDATA[Removes the last occurrence of the specified element in this
 list (when traversing the list from head to tail).  If the list
 does not contain the element, it is unchanged.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">removeLastOccurrence</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>o</code> - element to be removed from this list, if present</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if the list contained the specified element</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>listIterator</name>
            <signature><![CDATA[public ListIterator<E> listIterator(int index)]]></signature>
            <description><![CDATA[Returns a list-iterator of the elements in this list (in proper
 sequence), starting at the specified position in the list.
 Obeys the general contract of List.listIterator(int).

 The list-iterator is fail-fast: if the list is structurally
 modified at any time after the Iterator is created, in any way except
 through the list-iterator's own remove or add
 methods, the list-iterator will throw a
 ConcurrentModificationException.  Thus, in the face of
 concurrent modification, the iterator fails quickly and cleanly, rather
 than risking arbitrary, non-deterministic behavior at an undetermined
 time in the future.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">listIterator</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">listIterator</a></code> in class <code><a href="#">AbstractSequentialList</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - index of the first element to be returned from the
              list-iterator (by a call to <code>next</code>)</dd>
<dt><span class="strong">Returns:</span></dt><dd>a ListIterator of the elements in this list (in proper
         sequence), starting at the specified position in the list</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the index is out of range
         (<code>index < 0 || index > size()</code>)</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>List.listIterator(int)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>descendingIterator</name>
            <signature><![CDATA[public Iterator<E> descendingIterator()]]></signature>
            <description><![CDATA[Description copied from interface: DequeReturns an iterator over the elements in this deque in reverse
 sequential order.  The elements will be returned in order from
 last (tail) to first (head).<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">descendingIterator</a></code> in interface <code><a href="#">Deque</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>an iterator over the elements in this deque in reverse
 sequence</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>clone</name>
            <signature><![CDATA[public Object clone()]]></signature>
            <description><![CDATA[Returns a shallow copy of this LinkedList. (The elements
 themselves are not cloned.)<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">clone</a></code> in class <code><a href="#">Object</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>a shallow copy of this <code>LinkedList</code> instance</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Cloneable</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>toArray</name>
            <signature><![CDATA[public Object[] toArray()]]></signature>
            <description><![CDATA[Returns an array containing all of the elements in this list
 in proper sequence (from first to last element).

 The returned array will be "safe" in that no references to it are
 maintained by this list.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">toArray</a></code> in interface <code><a href="#">Collection</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">toArray</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">toArray</a></code> in class <code><a href="#">AbstractCollection</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>an array containing all of the elements in this list
         in proper sequence</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Arrays.asList(Object[])</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>toArray</name>
            <signature><![CDATA[public <T> T[] toArray(T[] a)]]></signature>
            <description><![CDATA[Returns an array containing all of the elements in this list in
 proper sequence (from first to last element); the runtime type of
 the returned array is that of the specified array.  If the list fits
 in the specified array, it is returned therein.  Otherwise, a new
 array is allocated with the runtime type of the specified array and
 the size of this list.

 If the list fits in the specified array with room to spare (i.e.,
 the array has more elements than the list), the element in the array
 immediately following the end of the list is set to null.
 (This is useful in determining the length of the list only if
 the caller knows that the list does not contain any null elements.)

 Like the toArray() method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 Suppose x is a list known to contain only strings.
 The following code can be used to dump the list into a newly
 allocated array of String:

 
     String[] y = x.toArray(new String[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">toArray</a></code> in interface <code><a href="#">Collection</a><<a href="#">E</a>></code></dd>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">toArray</a></code> in interface <code><a href="#">List</a><<a href="#">E</a>></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">toArray</a></code> in class <code><a href="#">AbstractCollection</a><<a href="#">E</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - the array into which the elements of the list are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose.</dd>
<dt><span class="strong">Returns:</span></dt><dd>an array containing the elements of the list</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">ArrayStoreException</a></code> - if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this list</dd>
<dd><code><a href="#">NullPointerException</a></code> - if the specified array is null</dd></dl>]]></description>
        </method>
    </methods>
</Root>

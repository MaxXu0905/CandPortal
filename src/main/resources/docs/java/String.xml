<?xml version="1.0" encoding="UTF-8"?>
<Root name="java.lang.String">
    <fields>
        <field>
            <name>CASE_INSENSITIVE_ORDER</name>
            <signature><![CDATA[public static final Comparator<String> CASE_INSENSITIVE_ORDER]]></signature>
            <description><![CDATA[A Comparator that orders String objects as by
 compareToIgnoreCase. This comparator is serializable.
 
 Note that this Comparator does not take locale into account,
 and will result in an unsatisfactory ordering for certain locales.
 The java.text package provides Collators to allow
 locale-sensitive ordering.<dl><dt><span class="strong">Since:</span></dt>
  <dd>1.2</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Collator.compare(String, String)</code></a></dd></dl>]]></description>
        </field>
    </fields>
    <constructors>
        <constructor>
            <name>String</name>
            <signature><![CDATA[public String()]]></signature>
            <description><![CDATA[Initializes a newly created String object so that it represents
 an empty character sequence.  Note that use of this constructor is
 unnecessary since Strings are immutable.]]></description>
        </constructor>
        <constructor>
            <name>String</name>
            <signature><![CDATA[public String(String original)]]></signature>
            <description><![CDATA[Initializes a newly created String object so that it represents
 the same sequence of characters as the argument; in other words, the
 newly created string is a copy of the argument string. Unless an
 explicit copy of original is needed, use of this constructor is
 unnecessary since Strings are immutable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>original</code> - A <code>String</code></dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>String</name>
            <signature><![CDATA[public String(char[] value)]]></signature>
            <description><![CDATA[Allocates a new String so that it represents the sequence of
 characters currently contained in the character array argument. The
 contents of the character array are copied; subsequent modification of
 the character array does not affect the newly created string.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>value</code> - The initial value of the string</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>String</name>
            <signature><![CDATA[public String(char[] value,
      int offset,
      int count)]]></signature>
            <description><![CDATA[Allocates a new String that contains characters from a subarray
 of the character array argument. The offset argument is the
 index of the first character of the subarray and the count
 argument specifies the length of the subarray. The contents of the
 subarray are copied; subsequent modification of the character array does
 not affect the newly created string.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>value</code> - Array that is the source of characters</dd><dd><code>offset</code> - The initial offset</dd><dd><code>count</code> - The length</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - If the <code>offset</code> and <code>count</code> arguments index
          characters outside the bounds of the <code>value</code> array</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>String</name>
            <signature><![CDATA[public String(int[] codePoints,
      int offset,
      int count)]]></signature>
            <description><![CDATA[Allocates a new String that contains characters from a subarray
 of the Unicode code point array
 argument.  The offset argument is the index of the first code
 point of the subarray and the count argument specifies the
 length of the subarray.  The contents of the subarray are converted to
 chars; subsequent modification of the int array does not
 affect the newly created string.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>codePoints</code> - Array that is the source of Unicode code points</dd><dd><code>offset</code> - The initial offset</dd><dd><code>count</code> - The length</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IllegalArgumentException</a></code> - If any invalid Unicode code point is found in <code>codePoints</code></dd>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - If the <code>offset</code> and <code>count</code> arguments index
          characters outside the bounds of the <code>codePoints</code> array</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>String</name>
            <signature><![CDATA[@Deprecated
public String(byte[] ascii,
                 int hibyte,
                 int offset,
                 int count)]]></signature>
            <description><![CDATA[Deprecated. This method does not properly convert bytes into characters.
 As of JDK 1.1, the preferred way to do this is via the
 String constructors that take a Charset, charset name, or that use the platform's
 default charset.Allocates a new String constructed from a subarray of an array
 of 8-bit integer values.

  The offset argument is the index of the first byte of the
 subarray, and the count argument specifies the length of the
 subarray.

  Each byte in the subarray is converted to a char as
 specified in the method above.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>ascii</code> - The bytes to be converted to characters</dd><dd><code>hibyte</code> - The top 8 bits of each 16-bit Unicode code unit</dd><dd><code>offset</code> - The initial offset</dd><dd><code>count</code> - The length</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - If the <code>offset</code> or <code>count</code> argument is invalid</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>String(byte[], int)</code></a>, 
<a href="#"><code>String(byte[], int, int, java.lang.String)</code></a>, 
<a href="#"><code>String(byte[], int, int, java.nio.charset.Charset)</code></a>, 
<a href="#"><code>String(byte[], int, int)</code></a>, 
<a href="#"><code>String(byte[], java.lang.String)</code></a>, 
<a href="#"><code>String(byte[], java.nio.charset.Charset)</code></a>, 
<a href="#"><code>String(byte[])</code></a></dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>String</name>
            <signature><![CDATA[@Deprecated
public String(byte[] ascii,
                 int hibyte)]]></signature>
            <description><![CDATA[Deprecated. This method does not properly convert bytes into
 characters.  As of JDK 1.1, the preferred way to do this is via the
 String constructors that take a Charset, charset name, or that use the platform's
 default charset.Allocates a new String containing characters constructed from
 an array of 8-bit integer values. Each character cin the
 resulting string is constructed from the corresponding component
 b in the byte array such that:

 
     c == (char)(((hibyte & 0xff) << 8)
                         | (b & 0xff))
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>ascii</code> - The bytes to be converted to characters</dd><dd><code>hibyte</code> - The top 8 bits of each 16-bit Unicode code unit</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>String(byte[], int, int, java.lang.String)</code></a>, 
<a href="#"><code>String(byte[], int, int, java.nio.charset.Charset)</code></a>, 
<a href="#"><code>String(byte[], int, int)</code></a>, 
<a href="#"><code>String(byte[], java.lang.String)</code></a>, 
<a href="#"><code>String(byte[], java.nio.charset.Charset)</code></a>, 
<a href="#"><code>String(byte[])</code></a></dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>String</name>
            <signature><![CDATA[public String(byte[] bytes,
      int offset,
      int length,
      String charsetName)
       throws UnsupportedEncodingException]]></signature>
            <description><![CDATA[Constructs a new String by decoding the specified subarray of
 bytes using the specified charset.  The length of the new String
 is a function of the charset, and hence may not be equal to the length
 of the subarray.

  The behavior of this constructor when the given bytes are not valid
 in the given charset is unspecified.  The CharsetDecoder class should be used when more control
 over the decoding process is required.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>bytes</code> - The bytes to be decoded into characters</dd><dd><code>offset</code> - The index of the first byte to decode</dd><dd><code>length</code> - The number of bytes to decode</dd><dd><code>charsetName</code> - The name of a supported <a href="#">charset</a></dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">UnsupportedEncodingException</a></code> - If the named charset is not supported</dd>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - If the <code>offset</code> and <code>length</code> arguments index
          characters outside the bounds of the <code>bytes</code> array</dd><dt><span class="strong">Since:</span></dt>
  <dd>JDK1.1</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>String</name>
            <signature><![CDATA[public String(byte[] bytes,
      int offset,
      int length,
      Charset charset)]]></signature>
            <description><![CDATA[Constructs a new String by decoding the specified subarray of
 bytes using the specified charset.
 The length of the new String is a function of the charset, and
 hence may not be equal to the length of the subarray.

  This method always replaces malformed-input and unmappable-character
 sequences with this charset's default replacement string.  The CharsetDecoder class should be used when more control
 over the decoding process is required.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>bytes</code> - The bytes to be decoded into characters</dd><dd><code>offset</code> - The index of the first byte to decode</dd><dd><code>length</code> - The number of bytes to decode</dd><dd><code>charset</code> - The <a href="#">charset</a> to be used to
         decode the <code>bytes</code></dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - If the <code>offset</code> and <code>length</code> arguments index
          characters outside the bounds of the <code>bytes</code> array</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>String</name>
            <signature><![CDATA[public String(byte[] bytes,
      String charsetName)
       throws UnsupportedEncodingException]]></signature>
            <description><![CDATA[Constructs a new String by decoding the specified array of bytes
 using the specified charset.  The
 length of the new String is a function of the charset, and hence
 may not be equal to the length of the byte array.

  The behavior of this constructor when the given bytes are not valid
 in the given charset is unspecified.  The CharsetDecoder class should be used when more control
 over the decoding process is required.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>bytes</code> - The bytes to be decoded into characters</dd><dd><code>charsetName</code> - The name of a supported <a href="#">charset</a></dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">UnsupportedEncodingException</a></code> - If the named charset is not supported</dd><dt><span class="strong">Since:</span></dt>
  <dd>JDK1.1</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>String</name>
            <signature><![CDATA[public String(byte[] bytes,
      Charset charset)]]></signature>
            <description><![CDATA[Constructs a new String by decoding the specified array of
 bytes using the specified charset.
 The length of the new String is a function of the charset, and
 hence may not be equal to the length of the byte array.

  This method always replaces malformed-input and unmappable-character
 sequences with this charset's default replacement string.  The CharsetDecoder class should be used when more control
 over the decoding process is required.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>bytes</code> - The bytes to be decoded into characters</dd><dd><code>charset</code> - The <a href="#">charset</a> to be used to
         decode the <code>bytes</code></dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>String</name>
            <signature><![CDATA[public String(byte[] bytes,
      int offset,
      int length)]]></signature>
            <description><![CDATA[Constructs a new String by decoding the specified subarray of
 bytes using the platform's default charset.  The length of the new
 String is a function of the charset, and hence may not be equal
 to the length of the subarray.

  The behavior of this constructor when the given bytes are not valid
 in the default charset is unspecified.  The CharsetDecoder class should be used when more control
 over the decoding process is required.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>bytes</code> - The bytes to be decoded into characters</dd><dd><code>offset</code> - The index of the first byte to decode</dd><dd><code>length</code> - The number of bytes to decode</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - If the <code>offset</code> and the <code>length</code> arguments index
          characters outside the bounds of the <code>bytes</code> array</dd><dt><span class="strong">Since:</span></dt>
  <dd>JDK1.1</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>String</name>
            <signature><![CDATA[public String(byte[] bytes)]]></signature>
            <description><![CDATA[Constructs a new String by decoding the specified array of bytes
 using the platform's default charset.  The length of the new String is a function of the charset, and hence may not be equal to the
 length of the byte array.

  The behavior of this constructor when the given bytes are not valid
 in the default charset is unspecified.  The CharsetDecoder class should be used when more control
 over the decoding process is required.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>bytes</code> - The bytes to be decoded into characters</dd><dt><span class="strong">Since:</span></dt>
  <dd>JDK1.1</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>String</name>
            <signature><![CDATA[public String(StringBuffer buffer)]]></signature>
            <description><![CDATA[Allocates a new string that contains the sequence of characters
 currently contained in the string buffer argument. The contents of the
 string buffer are copied; subsequent modification of the string buffer
 does not affect the newly created string.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>buffer</code> - A <code>StringBuffer</code></dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>String</name>
            <signature><![CDATA[public String(StringBuilder builder)]]></signature>
            <description><![CDATA[Allocates a new string that contains the sequence of characters
 currently contained in the string builder argument. The contents of the
 string builder are copied; subsequent modification of the string builder
 does not affect the newly created string.

  This constructor is provided to ease migration to StringBuilder. Obtaining a string from a string builder via the toString method is likely to run faster and is generally preferred.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>builder</code> - A <code>StringBuilder</code></dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </constructor>
    </constructors>
    <methods>
        <method>
            <name>length</name>
            <signature><![CDATA[public int length()]]></signature>
            <description><![CDATA[Returns the length of this string.
 The length is equal to the number of Unicode
 code units in the string.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">length</a></code> in interface <code><a href="#">CharSequence</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the length of the sequence of characters represented by this
          object.</dd></dl>]]></description>
        </method>
        <method>
            <name>isEmpty</name>
            <signature><![CDATA[public boolean isEmpty()]]></signature>
            <description><![CDATA[Returns true if, and only if, length() is 0.<dl><dt><span class="strong">Returns:</span></dt><dd><tt>true</tt> if <a href="#"><code>length()</code></a> is <tt>0</tt>, otherwise
 <tt>false</tt></dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>charAt</name>
            <signature><![CDATA[public char charAt(int index)]]></signature>
            <description><![CDATA[Returns the char value at the
 specified index. An index ranges from 0 to
 length() - 1. The first char value of the sequence
 is at index 0, the next at index 1,
 and so on, as for array indexing.

 If the char value specified by the index is a
 surrogate, the surrogate
 value is returned.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">charAt</a></code> in interface <code><a href="#">CharSequence</a></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - the index of the <code>char</code> value.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the <code>char</code> value at the specified index of this string.
             The first <code>char</code> value is at index <code>0</code>.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the <code>index</code>
             argument is negative or not less than the length of this
             string.</dd></dl>]]></description>
        </method>
        <method>
            <name>codePointAt</name>
            <signature><![CDATA[public int codePointAt(int index)]]></signature>
            <description><![CDATA[Returns the character (Unicode code point) at the specified
 index. The index refers to char values
 (Unicode code units) and ranges from 0 to
 length() - 1.

  If the char value specified at the given index
 is in the high-surrogate range, the following index is less
 than the length of this String, and the
 char value at the following index is in the
 low-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the char value at the given index is returned.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - the index to the <code>char</code> values</dd>
<dt><span class="strong">Returns:</span></dt><dd>the code point value of the character at the
             <code>index</code></dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the <code>index</code>
             argument is negative or not less than the length of this
             string.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>codePointBefore</name>
            <signature><![CDATA[public int codePointBefore(int index)]]></signature>
            <description><![CDATA[Returns the character (Unicode code point) before the specified
 index. The index refers to char values
 (Unicode code units) and ranges from 1 to length.

  If the char value at (index - 1)
 is in the low-surrogate range, (index - 2) is not
 negative, and the char value at (index -
 2) is in the high-surrogate range, then the
 supplementary code point value of the surrogate pair is
 returned. If the char value at index -
 1 is an unpaired low-surrogate or a high-surrogate, the
 surrogate value is returned.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - the index following the code point that should be returned</dd>
<dt><span class="strong">Returns:</span></dt><dd>the Unicode code point value before the given index.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the <code>index</code>
            argument is less than 1 or greater than the length
            of this string.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>codePointCount</name>
            <signature><![CDATA[public int codePointCount(int beginIndex,
                 int endIndex)]]></signature>
            <description><![CDATA[Returns the number of Unicode code points in the specified text
 range of this String. The text range begins at the
 specified beginIndex and extends to the
 char at index endIndex - 1. Thus the
 length (in chars) of the text range is
 endIndex-beginIndex. Unpaired surrogates within
 the text range count as one code point each.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>beginIndex</code> - the index to the first <code>char</code> of
 the text range.</dd><dd><code>endIndex</code> - the index after the last <code>char</code> of
 the text range.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the number of Unicode code points in the specified text
 range</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the
 <code>beginIndex</code> is negative, or <code>endIndex</code>
 is larger than the length of this <code>String</code>, or
 <code>beginIndex</code> is larger than <code>endIndex</code>.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>offsetByCodePoints</name>
            <signature><![CDATA[public int offsetByCodePoints(int index,
                     int codePointOffset)]]></signature>
            <description><![CDATA[Returns the index within this String that is
 offset from the given index by
 codePointOffset code points. Unpaired surrogates
 within the text range given by index and
 codePointOffset count as one code point each.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - the index to be offset</dd><dd><code>codePointOffset</code> - the offset in code points</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index within this <code>String</code></dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if <code>index</code>
   is negative or larger then the length of this
   <code>String</code>, or if <code>codePointOffset</code> is positive
   and the substring starting with <code>index</code> has fewer
   than <code>codePointOffset</code> code points,
   or if <code>codePointOffset</code> is negative and the substring
   before <code>index</code> has fewer than the absolute value
   of <code>codePointOffset</code> code points.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>getChars</name>
            <signature><![CDATA[public void getChars(int srcBegin,
            int srcEnd,
            char[] dst,
            int dstBegin)]]></signature>
            <description><![CDATA[Copies characters from this string into the destination character
 array.
 
 The first character to be copied is at index srcBegin;
 the last character to be copied is at index srcEnd-1
 (thus the total number of characters to be copied is
 srcEnd-srcBegin). The characters are copied into the
 subarray of dst starting at index dstBegin
 and ending at index:
 
     dstbegin + (srcEnd-srcBegin) - 1
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>srcBegin</code> - index of the first character in the string
                        to copy.</dd><dd><code>srcEnd</code> - index after the last character in the string
                        to copy.</dd><dd><code>dst</code> - the destination array.</dd><dd><code>dstBegin</code> - the start offset in the destination array.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - If any of the following
            is true:
            <ul><li><code>srcBegin</code> is negative.
            </li><li><code>srcBegin</code> is greater than <code>srcEnd</code>
            </li><li><code>srcEnd</code> is greater than the length of this
                string
            </li><li><code>dstBegin</code> is negative
            </li><li><code>dstBegin+(srcEnd-srcBegin)</code> is larger than
                <code>dst.length</code></li></ul></dd></dl>]]></description>
        </method>
        <method>
            <name>getBytes</name>
            <signature><![CDATA[@Deprecated
public void getBytes(int srcBegin,
                       int srcEnd,
                       byte[] dst,
                       int dstBegin)]]></signature>
            <description><![CDATA[Deprecated. This method does not properly convert characters into
 bytes.  As of JDK 1.1, the preferred way to do this is via the
 getBytes() method, which uses the platform's default charset.Copies characters from this string into the destination byte array. Each
 byte receives the 8 low-order bits of the corresponding character. The
 eight high-order bits of each character are not copied and do not
 participate in the transfer in any way.

  The first character to be copied is at index srcBegin; the
 last character to be copied is at index srcEnd-1.  The total
 number of characters to be copied is srcEnd-srcBegin. The
 characters, converted to bytes, are copied into the subarray of dst starting at index dstBegin and ending at index:

 
     dstbegin + (srcEnd-srcBegin) - 1
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>srcBegin</code> - Index of the first character in the string to copy</dd><dd><code>srcEnd</code> - Index after the last character in the string to copy</dd><dd><code>dst</code> - The destination array</dd><dd><code>dstBegin</code> - The start offset in the destination array</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - If any of the following is true:
          <ul>
            <li> <code>srcBegin</code> is negative
            </li><li> <code>srcBegin</code> is greater than <code>srcEnd</code>
            </li><li> <code>srcEnd</code> is greater than the length of this String
            </li><li> <code>dstBegin</code> is negative
            </li><li> <code>dstBegin+(srcEnd-srcBegin)</code> is larger than <code>dst.length</code>
          </li></ul></dd></dl>]]></description>
        </method>
        <method>
            <name>getBytes</name>
            <signature><![CDATA[public byte[] getBytes(String charsetName)
                throws UnsupportedEncodingException]]></signature>
            <description><![CDATA[Encodes this String into a sequence of bytes using the named
 charset, storing the result into a new byte array.

  The behavior of this method when this string cannot be encoded in
 the given charset is unspecified.  The CharsetEncoder class should be used when more control
 over the encoding process is required.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>charsetName</code> - The name of a supported <a href="#">charset</a></dd>
<dt><span class="strong">Returns:</span></dt><dd>The resultant byte array</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">UnsupportedEncodingException</a></code> - If the named charset is not supported</dd><dt><span class="strong">Since:</span></dt>
  <dd>JDK1.1</dd></dl>]]></description>
        </method>
        <method>
            <name>getBytes</name>
            <signature><![CDATA[public byte[] getBytes(Charset charset)]]></signature>
            <description><![CDATA[Encodes this String into a sequence of bytes using the given
 charset, storing the result into a
 new byte array.

  This method always replaces malformed-input and unmappable-character
 sequences with this charset's default replacement byte array.  The
 CharsetEncoder class should be used when more
 control over the encoding process is required.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>charset</code> - The <a href="#">Charset</a> to be used to encode
         the <code>String</code></dd>
<dt><span class="strong">Returns:</span></dt><dd>The resultant byte array</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>getBytes</name>
            <signature><![CDATA[public byte[] getBytes()]]></signature>
            <description><![CDATA[Encodes this String into a sequence of bytes using the
 platform's default charset, storing the result into a new byte array.

  The behavior of this method when this string cannot be encoded in
 the default charset is unspecified.  The CharsetEncoder class should be used when more control
 over the encoding process is required.<dl><dt><span class="strong">Returns:</span></dt><dd>The resultant byte array</dd><dt><span class="strong">Since:</span></dt>
  <dd>JDK1.1</dd></dl>]]></description>
        </method>
        <method>
            <name>equals</name>
            <signature><![CDATA[public boolean equals(Object anObject)]]></signature>
            <description><![CDATA[Compares this string to the specified object.  The result is true if and only if the argument is not null and is a String object that represents the same sequence of characters as this
 object.<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">equals</a></code> in class <code><a href="#">Object</a></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>anObject</code> - The object to compare this <code>String</code> against</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if the given object represents a <code>String</code>
          equivalent to this string, <code>false</code> otherwise</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>compareTo(String)</code></a>, 
<a href="#"><code>equalsIgnoreCase(String)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>contentEquals</name>
            <signature><![CDATA[public boolean contentEquals(StringBuffer sb)]]></signature>
            <description><![CDATA[Compares this string to the specified StringBuffer.  The result
 is true if and only if this String represents the same
 sequence of characters as the specified StringBuffer.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>sb</code> - The <code>StringBuffer</code> to compare this <code>String</code> against</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if this <code>String</code> represents the same
          sequence of characters as the specified <code>StringBuffer</code>,
          <code>false</code> otherwise</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.4</dd></dl>]]></description>
        </method>
        <method>
            <name>contentEquals</name>
            <signature><![CDATA[public boolean contentEquals(CharSequence cs)]]></signature>
            <description><![CDATA[Compares this string to the specified CharSequence.  The result
 is true if and only if this String represents the same
 sequence of char values as the specified sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>cs</code> - The sequence to compare this <code>String</code> against</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if this <code>String</code> represents the same
          sequence of char values as the specified sequence, <code>false</code> otherwise</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>equalsIgnoreCase</name>
            <signature><![CDATA[public boolean equalsIgnoreCase(String anotherString)]]></signature>
            <description><![CDATA[Compares this String to another String, ignoring case
 considerations.  Two strings are considered equal ignoring case if they
 are of the same length and corresponding characters in the two strings
 are equal ignoring case.

  Two characters c1 and c2 are considered the same
 ignoring case if at least one of the following is true:
 
    The two characters are the same (as compared by the
        == operator)
    Applying the method Character.toUpperCase(char) to each character
        produces the same result
    Applying the method Character.toLowerCase(char) to each character
        produces the same result
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>anotherString</code> - The <code>String</code> to compare this <code>String</code> against</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if the argument is not <code>null</code> and it
          represents an equivalent <code>String</code> ignoring case; <code>false</code> otherwise</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>equals(Object)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>compareTo</name>
            <signature><![CDATA[public int compareTo(String anotherString)]]></signature>
            <description><![CDATA[Compares two strings lexicographically.
 The comparison is based on the Unicode value of each character in
 the strings. The character sequence represented by this
 String object is compared lexicographically to the
 character sequence represented by the argument string. The result is
 a negative integer if this String object
 lexicographically precedes the argument string. The result is a
 positive integer if this String object lexicographically
 follows the argument string. The result is zero if the strings
 are equal; compareTo returns 0 exactly when
 the equals(Object) method would return true.
 
 This is the definition of lexicographic ordering. If two strings are
 different, then either they have different characters at some index
 that is a valid index for both strings, or their lengths are different,
 or both. If they have different characters at one or more index
 positions, let k be the smallest such index; then the string
 whose character at position k has the smaller value, as
 determined by using the < operator, lexicographically precedes the
 other string. In this case, compareTo returns the
 difference of the two character values at position k in
 the two string -- that is, the value:
 
 this.charAt(k)-anotherString.charAt(k)
 
 If there is no index position at which they differ, then the shorter
 string lexicographically precedes the longer string. In this case,
 compareTo returns the difference of the lengths of the
 strings -- that is, the value:
 
 this.length()-anotherString.length()
 <dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">compareTo</a></code> in interface <code><a href="#">Comparable</a><<a href="#">String</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>anotherString</code> - the <code>String</code> to be compared.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the value <code>0</code> if the argument string is equal to
          this string; a value less than <code>0</code> if this string
          is lexicographically less than the string argument; and a
          value greater than <code>0</code> if this string is
          lexicographically greater than the string argument.</dd></dl>]]></description>
        </method>
        <method>
            <name>compareToIgnoreCase</name>
            <signature><![CDATA[public int compareToIgnoreCase(String str)]]></signature>
            <description><![CDATA[Compares two strings lexicographically, ignoring case
 differences. This method returns an integer whose sign is that of
 calling compareTo with normalized versions of the strings
 where case differences have been eliminated by calling
 Character.toLowerCase(Character.toUpperCase(character)) on
 each character.
 
 Note that this method does not take locale into account,
 and will result in an unsatisfactory ordering for certain locales.
 The java.text package provides collators to allow
 locale-sensitive ordering.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>str</code> - the <code>String</code> to be compared.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a negative integer, zero, or a positive integer as the
          specified String is greater than, equal to, or less
          than this String, ignoring case considerations.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.2</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Collator.compare(String, String)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>regionMatches</name>
            <signature><![CDATA[public boolean regionMatches(int toffset,
                    String other,
                    int ooffset,
                    int len)]]></signature>
            <description><![CDATA[Tests if two string regions are equal.
 
 A substring of this String object is compared to a substring
 of the argument other. The result is true if these substrings
 represent identical character sequences. The substring of this
 String object to be compared begins at index toffset
 and has length len. The substring of other to be compared
 begins at index ooffset and has length len. The
 result is false if and only if at least one of the following
 is true:
 toffset is negative.
 ooffset is negative.
 toffset+len is greater than the length of this
 String object.
 ooffset+len is greater than the length of the other
 argument.
 There is some nonnegative integer k less than len
 such that:
 this.charAt(toffset+k) != other.charAt(ooffset+k)
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>toffset</code> - the starting offset of the subregion in this string.</dd><dd><code>other</code> - the string argument.</dd><dd><code>ooffset</code> - the starting offset of the subregion in the string
                    argument.</dd><dd><code>len</code> - the number of characters to compare.</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if the specified subregion of this string
          exactly matches the specified subregion of the string argument;
          <code>false</code> otherwise.</dd></dl>]]></description>
        </method>
        <method>
            <name>regionMatches</name>
            <signature><![CDATA[public boolean regionMatches(boolean ignoreCase,
                    int toffset,
                    String other,
                    int ooffset,
                    int len)]]></signature>
            <description><![CDATA[Tests if two string regions are equal.
 
 A substring of this String object is compared to a substring
 of the argument other. The result is true if these
 substrings represent character sequences that are the same, ignoring
 case if and only if ignoreCase is true. The substring of
 this String object to be compared begins at index
 toffset and has length len. The substring of
 other to be compared begins at index ooffset and
 has length len. The result is false if and only if
 at least one of the following is true:
 toffset is negative.
 ooffset is negative.
 toffset+len is greater than the length of this
 String object.
 ooffset+len is greater than the length of the other
 argument.
 ignoreCase is false and there is some nonnegative
 integer k less than len such that:
 
 this.charAt(toffset+k) != other.charAt(ooffset+k)
 
 ignoreCase is true and there is some nonnegative
 integer k less than len such that:
 
 Character.toLowerCase(this.charAt(toffset+k)) !=
     Character.toLowerCase(other.charAt(ooffset+k))
 
 and:
 
 Character.toUpperCase(this.charAt(toffset+k)) !=
         Character.toUpperCase(other.charAt(ooffset+k))
 
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>ignoreCase</code> - if <code>true</code>, ignore case when comparing
                       characters.</dd><dd><code>toffset</code> - the starting offset of the subregion in this
                       string.</dd><dd><code>other</code> - the string argument.</dd><dd><code>ooffset</code> - the starting offset of the subregion in the string
                       argument.</dd><dd><code>len</code> - the number of characters to compare.</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if the specified subregion of this string
          matches the specified subregion of the string argument;
          <code>false</code> otherwise. Whether the matching is exact
          or case insensitive depends on the <code>ignoreCase</code>
          argument.</dd></dl>]]></description>
        </method>
        <method>
            <name>startsWith</name>
            <signature><![CDATA[public boolean startsWith(String prefix,
                 int toffset)]]></signature>
            <description><![CDATA[Tests if the substring of this string beginning at the
 specified index starts with the specified prefix.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>prefix</code> - the prefix.</dd><dd><code>toffset</code> - where to begin looking in this string.</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if the character sequence represented by the
          argument is a prefix of the substring of this object starting
          at index <code>toffset</code>; <code>false</code> otherwise.
          The result is <code>false</code> if <code>toffset</code> is
          negative or greater than the length of this
          <code>String</code> object; otherwise the result is the same
          as the result of the expression
          <pre>
          this.substring(toffset).startsWith(prefix)
          </pre></dd></dl>]]></description>
        </method>
        <method>
            <name>startsWith</name>
            <signature><![CDATA[public boolean startsWith(String prefix)]]></signature>
            <description><![CDATA[Tests if this string starts with the specified prefix.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>prefix</code> - the prefix.</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if the character sequence represented by the
          argument is a prefix of the character sequence represented by
          this string; <code>false</code> otherwise.
          Note also that <code>true</code> will be returned if the
          argument is an empty string or is equal to this
          <code>String</code> object as determined by the
          <a href="#"><code>equals(Object)</code></a> method.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1. 0</dd></dl>]]></description>
        </method>
        <method>
            <name>endsWith</name>
            <signature><![CDATA[public boolean endsWith(String suffix)]]></signature>
            <description><![CDATA[Tests if this string ends with the specified suffix.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>suffix</code> - the suffix.</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if the character sequence represented by the
          argument is a suffix of the character sequence represented by
          this object; <code>false</code> otherwise. Note that the
          result will be <code>true</code> if the argument is the
          empty string or is equal to this <code>String</code> object
          as determined by the <a href="#"><code>equals(Object)</code></a> method.</dd></dl>]]></description>
        </method>
        <method>
            <name>hashCode</name>
            <signature><![CDATA[public int hashCode()]]></signature>
            <description><![CDATA[Returns a hash code for this string. The hash code for a
 String object is computed as
 
 s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
 
 using int arithmetic, where s[i] is the
 ith character of the string, n is the length of
 the string, and ^ indicates exponentiation.
 (The hash value of the empty string is zero.)<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">hashCode</a></code> in class <code><a href="#">Object</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>a hash code value for this object.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Object.equals(java.lang.Object)</code></a>, 
<a href="#"><code>System.identityHashCode(java.lang.Object)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>indexOf</name>
            <signature><![CDATA[public int indexOf(int ch)]]></signature>
            <description><![CDATA[Returns the index within this string of the first occurrence of
 the specified character. If a character with value
 ch occurs in the character sequence represented by
 this String object, then the index (in Unicode
 code units) of the first such occurrence is returned. For
 values of ch in the range from 0 to 0xFFFF
 (inclusive), this is the smallest value k such that:
 
 this.charAt(k) == ch
 
 is true. For other values of ch, it is the
 smallest value k such that:
 
 this.codePointAt(k) == ch
 
 is true. In either case, if no such character occurs in this
 string, then -1 is returned.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>ch</code> - a character (Unicode code point).</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index of the first occurrence of the character in the
          character sequence represented by this object, or
          <code>-1</code> if the character does not occur.</dd></dl>]]></description>
        </method>
        <method>
            <name>indexOf</name>
            <signature><![CDATA[public int indexOf(int ch,
          int fromIndex)]]></signature>
            <description><![CDATA[Returns the index within this string of the first occurrence of the
 specified character, starting the search at the specified index.
 
 If a character with value ch occurs in the
 character sequence represented by this String
 object at an index no smaller than fromIndex, then
 the index of the first such occurrence is returned. For values
 of ch in the range from 0 to 0xFFFF (inclusive),
 this is the smallest value k such that:
 
 (this.charAt(k) == ch) && (k >= fromIndex)
 
 is true. For other values of ch, it is the
 smallest value k such that:
 
 (this.codePointAt(k) == ch) && (k >= fromIndex)
 
 is true. In either case, if no such character occurs in this
 string at or after position fromIndex, then
 -1 is returned.

 
 There is no restriction on the value of fromIndex. If it
 is negative, it has the same effect as if it were zero: this entire
 string may be searched. If it is greater than the length of this
 string, it has the same effect as if it were equal to the length of
 this string: -1 is returned.

 All indices are specified in char values
 (Unicode code units).<dl><dt><span class="strong">Parameters:</span></dt><dd><code>ch</code> - a character (Unicode code point).</dd><dd><code>fromIndex</code> - the index to start the search from.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index of the first occurrence of the character in the
          character sequence represented by this object that is greater
          than or equal to <code>fromIndex</code>, or <code>-1</code>
          if the character does not occur.</dd></dl>]]></description>
        </method>
        <method>
            <name>lastIndexOf</name>
            <signature><![CDATA[public int lastIndexOf(int ch)]]></signature>
            <description><![CDATA[Returns the index within this string of the last occurrence of
 the specified character. For values of ch in the
 range from 0 to 0xFFFF (inclusive), the index (in Unicode code
 units) returned is the largest value k such that:
 
 this.charAt(k) == ch
 
 is true. For other values of ch, it is the
 largest value k such that:
 
 this.codePointAt(k) == ch
 
 is true.  In either case, if no such character occurs in this
 string, then -1 is returned.  The
 String is searched backwards starting at the last
 character.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>ch</code> - a character (Unicode code point).</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index of the last occurrence of the character in the
          character sequence represented by this object, or
          <code>-1</code> if the character does not occur.</dd></dl>]]></description>
        </method>
        <method>
            <name>lastIndexOf</name>
            <signature><![CDATA[public int lastIndexOf(int ch,
              int fromIndex)]]></signature>
            <description><![CDATA[Returns the index within this string of the last occurrence of
 the specified character, searching backward starting at the
 specified index. For values of ch in the range
 from 0 to 0xFFFF (inclusive), the index returned is the largest
 value k such that:
 
 (this.charAt(k) == ch) && (k <= fromIndex)
 
 is true. For other values of ch, it is the
 largest value k such that:
 
 (this.codePointAt(k) == ch) && (k <= fromIndex)
 
 is true. In either case, if no such character occurs in this
 string at or before position fromIndex, then
 -1 is returned.

 All indices are specified in char values
 (Unicode code units).<dl><dt><span class="strong">Parameters:</span></dt><dd><code>ch</code> - a character (Unicode code point).</dd><dd><code>fromIndex</code> - the index to start the search from. There is no
          restriction on the value of <code>fromIndex</code>. If it is
          greater than or equal to the length of this string, it has
          the same effect as if it were equal to one less than the
          length of this string: this entire string may be searched.
          If it is negative, it has the same effect as if it were -1:
          -1 is returned.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index of the last occurrence of the character in the
          character sequence represented by this object that is less
          than or equal to <code>fromIndex</code>, or <code>-1</code>
          if the character does not occur before that point.</dd></dl>]]></description>
        </method>
        <method>
            <name>indexOf</name>
            <signature><![CDATA[public int indexOf(String str)]]></signature>
            <description><![CDATA[Returns the index within this string of the first occurrence of the
 specified substring.

 The returned index is the smallest value k for which:
 
 this.startsWith(str, k)
 
 If no such value of k exists, then -1 is returned.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>str</code> - the substring to search for.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index of the first occurrence of the specified substring,
          or <code>-1</code> if there is no such occurrence.</dd></dl>]]></description>
        </method>
        <method>
            <name>indexOf</name>
            <signature><![CDATA[public int indexOf(String str,
          int fromIndex)]]></signature>
            <description><![CDATA[Returns the index within this string of the first occurrence of the
 specified substring, starting at the specified index.

 The returned index is the smallest value k for which:
 
 k >= fromIndex && this.startsWith(str, k)
 
 If no such value of k exists, then -1 is returned.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>str</code> - the substring to search for.</dd><dd><code>fromIndex</code> - the index from which to start the search.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index of the first occurrence of the specified substring,
          starting at the specified index,
          or <code>-1</code> if there is no such occurrence.</dd></dl>]]></description>
        </method>
        <method>
            <name>lastIndexOf</name>
            <signature><![CDATA[public int lastIndexOf(String str)]]></signature>
            <description><![CDATA[Returns the index within this string of the last occurrence of the
 specified substring.  The last occurrence of the empty string ""
 is considered to occur at the index value this.length().

 The returned index is the largest value k for which:
 
 this.startsWith(str, k)
 
 If no such value of k exists, then -1 is returned.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>str</code> - the substring to search for.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index of the last occurrence of the specified substring,
          or <code>-1</code> if there is no such occurrence.</dd></dl>]]></description>
        </method>
        <method>
            <name>lastIndexOf</name>
            <signature><![CDATA[public int lastIndexOf(String str,
              int fromIndex)]]></signature>
            <description><![CDATA[Returns the index within this string of the last occurrence of the
 specified substring, searching backward starting at the specified index.

 The returned index is the largest value k for which:
 
 k <= fromIndex && this.startsWith(str, k)
 
 If no such value of k exists, then -1 is returned.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>str</code> - the substring to search for.</dd><dd><code>fromIndex</code> - the index to start the search from.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index of the last occurrence of the specified substring,
          searching backward from the specified index,
          or <code>-1</code> if there is no such occurrence.</dd></dl>]]></description>
        </method>
        <method>
            <name>substring</name>
            <signature><![CDATA[public String substring(int beginIndex)]]></signature>
            <description><![CDATA[Returns a new string that is a substring of this string. The
 substring begins with the character at the specified index and
 extends to the end of this string. 
 Examples:
 
 "unhappy".substring(2) returns "happy"
 "Harbison".substring(3) returns "bison"
 "emptiness".substring(9) returns "" (an empty string)
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>beginIndex</code> - the beginning index, inclusive.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the specified substring.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if
             <code>beginIndex</code> is negative or larger than the
             length of this <code>String</code> object.</dd></dl>]]></description>
        </method>
        <method>
            <name>substring</name>
            <signature><![CDATA[public String substring(int beginIndex,
               int endIndex)]]></signature>
            <description><![CDATA[Returns a new string that is a substring of this string. The
 substring begins at the specified beginIndex and
 extends to the character at index endIndex - 1.
 Thus the length of the substring is endIndex-beginIndex.
 
 Examples:
 
 "hamburger".substring(4, 8) returns "urge"
 "smiles".substring(1, 5) returns "mile"
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>beginIndex</code> - the beginning index, inclusive.</dd><dd><code>endIndex</code> - the ending index, exclusive.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the specified substring.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the
             <code>beginIndex</code> is negative, or
             <code>endIndex</code> is larger than the length of
             this <code>String</code> object, or
             <code>beginIndex</code> is larger than
             <code>endIndex</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>subSequence</name>
            <signature><![CDATA[public CharSequence subSequence(int beginIndex,
                       int endIndex)]]></signature>
            <description><![CDATA[Returns a new character sequence that is a subsequence of this sequence.

  An invocation of this method of the form

 
 str.subSequence(begin, end)

 behaves in exactly the same way as the invocation

 
 str.substring(begin, end)

 This method is defined so that the String class can implement
 the CharSequence interface. <dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">subSequence</a></code> in interface <code><a href="#">CharSequence</a></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>beginIndex</code> - the begin index, inclusive.</dd><dd><code>endIndex</code> - the end index, exclusive.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the specified subsequence.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if <tt>beginIndex</tt> or <tt>endIndex</tt> are negative,
          if <tt>endIndex</tt> is greater than <tt>length()</tt>,
          or if <tt>beginIndex</tt> is greater than <tt>startIndex</tt></dd><dt><span class="strong">Since:</span></dt>
  <dd>1.4</dd></dl>]]></description>
        </method>
        <method>
            <name>concat</name>
            <signature><![CDATA[public String concat(String str)]]></signature>
            <description><![CDATA[Concatenates the specified string to the end of this string.
 
 If the length of the argument string is 0, then this
 String object is returned. Otherwise, a new
 String object is created, representing a character
 sequence that is the concatenation of the character sequence
 represented by this String object and the character
 sequence represented by the argument string.
 Examples:
 
 "cares".concat("s") returns "caress"
 "to".concat("get").concat("her") returns "together"
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>str</code> - the <code>String</code> that is concatenated to the end
                of this <code>String</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a string that represents the concatenation of this object's
          characters followed by the string argument's characters.</dd></dl>]]></description>
        </method>
        <method>
            <name>replace</name>
            <signature><![CDATA[public String replace(char oldChar,
             char newChar)]]></signature>
            <description><![CDATA[Returns a new string resulting from replacing all occurrences of
 oldChar in this string with newChar.
 
 If the character oldChar does not occur in the
 character sequence represented by this String object,
 then a reference to this String object is returned.
 Otherwise, a new String object is created that
 represents a character sequence identical to the character sequence
 represented by this String object, except that every
 occurrence of oldChar is replaced by an occurrence
 of newChar.
 
 Examples:
 
 "mesquite in your cellar".replace('e', 'o')
         returns "mosquito in your collar"
 "the war of baronets".replace('r', 'y')
         returns "the way of bayonets"
 "sparring with a purple porpoise".replace('p', 't')
         returns "starring with a turtle tortoise"
 "JonL".replace('q', 'x') returns "JonL" (no change)
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>oldChar</code> - the old character.</dd><dd><code>newChar</code> - the new character.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a string derived from this string by replacing every
          occurrence of <code>oldChar</code> with <code>newChar</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>matches</name>
            <signature><![CDATA[public boolean matches(String regex)]]></signature>
            <description><![CDATA[Tells whether or not this string matches the given regular expression.

  An invocation of this method of the form
 str.matches(regex) yields exactly the
 same result as the expression

  Pattern.matches(regex, str)<dl><dt><span class="strong">Parameters:</span></dt><dd><code>regex</code> - the regular expression to which this string is to be matched</dd>
<dt><span class="strong">Returns:</span></dt><dd><tt>true</tt> if, and only if, this string matches the
          given regular expression</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">PatternSyntaxException</a></code> - if the regular expression's syntax is invalid</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.4</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Pattern</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>contains</name>
            <signature><![CDATA[public boolean contains(CharSequence s)]]></signature>
            <description><![CDATA[Returns true if and only if this string contains the specified
 sequence of char values.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - the sequence to search for</dd>
<dt><span class="strong">Returns:</span></dt><dd>true if this string contains <code>s</code>, false otherwise</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if <code>s</code> is <code>null</code></dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>replaceFirst</name>
            <signature><![CDATA[public String replaceFirst(String regex,
                  String replacement)]]></signature>
            <description><![CDATA[Replaces the first substring of this string that matches the given regular expression with the
 given replacement.

  An invocation of this method of the form
 str.replaceFirst(regex, repl)
 yields exactly the same result as the expression

 
 Pattern.compile(regex).matcher(str).replaceFirst(repl)


 Note that backslashes (\) and dollar signs ($) in the
 replacement string may cause the results to be different than if it were
 being treated as a literal replacement string; see
 Matcher.replaceFirst(java.lang.String).
 Use Matcher.quoteReplacement(java.lang.String) to suppress the special
 meaning of these characters, if desired.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>regex</code> - the regular expression to which this string is to be matched</dd><dd><code>replacement</code> - the string to be substituted for the first match</dd>
<dt><span class="strong">Returns:</span></dt><dd>The resulting <tt>String</tt></dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">PatternSyntaxException</a></code> - if the regular expression's syntax is invalid</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.4</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Pattern</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>replaceAll</name>
            <signature><![CDATA[public String replaceAll(String regex,
                String replacement)]]></signature>
            <description><![CDATA[Replaces each substring of this string that matches the given regular expression with the
 given replacement.

  An invocation of this method of the form
 str.replaceAll(regex, repl)
 yields exactly the same result as the expression

 
 Pattern.compile(regex).matcher(str).replaceAll(repl)


 Note that backslashes (\) and dollar signs ($) in the
 replacement string may cause the results to be different than if it were
 being treated as a literal replacement string; see
 Matcher.replaceAll.
 Use Matcher.quoteReplacement(java.lang.String) to suppress the special
 meaning of these characters, if desired.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>regex</code> - the regular expression to which this string is to be matched</dd><dd><code>replacement</code> - the string to be substituted for each match</dd>
<dt><span class="strong">Returns:</span></dt><dd>The resulting <tt>String</tt></dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">PatternSyntaxException</a></code> - if the regular expression's syntax is invalid</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.4</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Pattern</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>replace</name>
            <signature><![CDATA[public String replace(CharSequence target,
             CharSequence replacement)]]></signature>
            <description><![CDATA[Replaces each substring of this string that matches the literal target
 sequence with the specified literal replacement sequence. The
 replacement proceeds from the beginning of the string to the end, for
 example, replacing "aa" with "b" in the string "aaa" will result in
 "ba" rather than "ab".<dl><dt><span class="strong">Parameters:</span></dt><dd><code>target</code> - The sequence of char values to be replaced</dd><dd><code>replacement</code> - The replacement sequence of char values</dd>
<dt><span class="strong">Returns:</span></dt><dd>The resulting string</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if <code>target</code> or
         <code>replacement</code> is <code>null</code>.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>split</name>
            <signature><![CDATA[public String[] split(String regex,
             int limit)]]></signature>
            <description><![CDATA[Splits this string around matches of the given
 regular expression.

  The array returned by this method contains each substring of this
 string that is terminated by another substring that matches the given
 expression or is terminated by the end of the string.  The substrings in
 the array are in the order in which they occur in this string.  If the
 expression does not match any part of the input then the resulting array
 has just one element, namely this string.

  The limit parameter controls the number of times the
 pattern is applied and therefore affects the length of the resulting
 array.  If the limit n is greater than zero then the pattern
 will be applied at most n - 1 times, the array's
 length will be no greater than n, and the array's last entry
 will contain all input beyond the last matched delimiter.  If n
 is non-positive then the pattern will be applied as many times as
 possible and the array can have any length.  If n is zero then
 the pattern will be applied as many times as possible, the array can
 have any length, and trailing empty strings will be discarded.

  The string "boo:and:foo", for example, yields the
 following results with these parameters:

 
 
     Regex
     Limit
     Result
 
 :
     2
     { "boo", "and:foo" }
 :
     5
     { "boo", "and", "foo" }
 :
     -2
     { "boo", "and", "foo" }
 o
     5
     { "b", "", ":and:f", "", "" }
 o
     -2
     { "b", "", ":and:f", "", "" }
 o
     0
     { "b", "", ":and:f" }
 

  An invocation of this method of the form
 str.split(regex, n)
 yields the same result as the expression

 
 Pattern.compile(regex).split(str, n)
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>regex</code> - the delimiting regular expression</dd><dd><code>limit</code> - the result threshold, as described above</dd>
<dt><span class="strong">Returns:</span></dt><dd>the array of strings computed by splitting this string
          around matches of the given regular expression</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">PatternSyntaxException</a></code> - if the regular expression's syntax is invalid</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.4</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Pattern</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>split</name>
            <signature><![CDATA[public String[] split(String regex)]]></signature>
            <description><![CDATA[Splits this string around matches of the given regular expression.

  This method works as if by invoking the two-argument split method with the given expression and a limit
 argument of zero.  Trailing empty strings are therefore not included in
 the resulting array.

  The string "boo:and:foo", for example, yields the following
 results with these expressions:

 
 
  Regex
  Result
 
 :
     { "boo", "and", "foo" }
 o
     { "b", "", ":and:f" }
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>regex</code> - the delimiting regular expression</dd>
<dt><span class="strong">Returns:</span></dt><dd>the array of strings computed by splitting this string
          around matches of the given regular expression</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">PatternSyntaxException</a></code> - if the regular expression's syntax is invalid</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.4</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Pattern</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>toLowerCase</name>
            <signature><![CDATA[public String toLowerCase(Locale locale)]]></signature>
            <description><![CDATA[Converts all of the characters in this String to lower
 case using the rules of the given Locale.  Case mapping is based
 on the Unicode Standard version specified by the Character
 class. Since case mappings are not always 1:1 char mappings, the resulting
 String may be a different length than the original String.
 
 Examples of lowercase  mappings are in the following table:
 
 
   Language Code of Locale
   Upper Case
   Lower Case
   Description
 
 
   tr (Turkish)
   \u0130
   \u0069
   capital letter I with dot above -> small letter i
 
 
   tr (Turkish)
   \u0049
   \u0131
   capital letter I -> small letter dotless i 
 
 
   (all)
   French Fries
   french fries
   lowercased all chars in String
 
 
   (all)
   
       
       
   
       
       
   lowercased all chars in String
 
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>locale</code> - use the case transformation rules for this locale</dd>
<dt><span class="strong">Returns:</span></dt><dd>the <code>String</code>, converted to lowercase.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.1</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>toLowerCase()</code></a>, 
<a href="#"><code>toUpperCase()</code></a>, 
<a href="#"><code>toUpperCase(Locale)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>toLowerCase</name>
            <signature><![CDATA[public String toLowerCase()]]></signature>
            <description><![CDATA[Converts all of the characters in this String to lower
 case using the rules of the default locale. This is equivalent to calling
 toLowerCase(Locale.getDefault()).
 
 Note: This method is locale sensitive, and may produce unexpected
 results if used for strings that are intended to be interpreted locale
 independently.
 Examples are programming language identifiers, protocol keys, and HTML
 tags.
 For instance, "TITLE".toLowerCase() in a Turkish locale
 returns "t\u0131tle", where '\u0131' is the
 LATIN SMALL LETTER DOTLESS I character.
 To obtain correct results for locale insensitive strings, use
 toLowerCase(Locale.ENGLISH).
 <dl><dt><span class="strong">Returns:</span></dt><dd>the <code>String</code>, converted to lowercase.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>toLowerCase(Locale)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>toUpperCase</name>
            <signature><![CDATA[public String toUpperCase(Locale locale)]]></signature>
            <description><![CDATA[Converts all of the characters in this String to upper
 case using the rules of the given Locale. Case mapping is based
 on the Unicode Standard version specified by the Character
 class. Since case mappings are not always 1:1 char mappings, the resulting
 String may be a different length than the original String.
 
 Examples of locale-sensitive and 1:M case mappings are in the following table.
 
 
 
   Language Code of Locale
   Lower Case
   Upper Case
   Description
 
 
   tr (Turkish)
   \u0069
   \u0130
   small letter i -> capital letter I with dot above
 
 
   tr (Turkish)
   \u0131
   \u0049
   small letter dotless i -> capital letter I
 
 
   (all)
   \u00df
   \u0053 \u0053
   small letter sharp s -> two letters: SS
 
 
   (all)
   Fahrvergnügen
   FAHRVERGNÜGEN
   
 
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>locale</code> - use the case transformation rules for this locale</dd>
<dt><span class="strong">Returns:</span></dt><dd>the <code>String</code>, converted to uppercase.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.1</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>toUpperCase()</code></a>, 
<a href="#"><code>toLowerCase()</code></a>, 
<a href="#"><code>toLowerCase(Locale)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>toUpperCase</name>
            <signature><![CDATA[public String toUpperCase()]]></signature>
            <description><![CDATA[Converts all of the characters in this String to upper
 case using the rules of the default locale. This method is equivalent to
 toUpperCase(Locale.getDefault()).
 
 Note: This method is locale sensitive, and may produce unexpected
 results if used for strings that are intended to be interpreted locale
 independently.
 Examples are programming language identifiers, protocol keys, and HTML
 tags.
 For instance, "title".toUpperCase() in a Turkish locale
 returns "T\u0130TLE", where '\u0130' is the
 LATIN CAPITAL LETTER I WITH DOT ABOVE character.
 To obtain correct results for locale insensitive strings, use
 toUpperCase(Locale.ENGLISH).
 <dl><dt><span class="strong">Returns:</span></dt><dd>the <code>String</code>, converted to uppercase.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>toUpperCase(Locale)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>trim</name>
            <signature><![CDATA[public String trim()]]></signature>
            <description><![CDATA[Returns a copy of the string, with leading and trailing whitespace
 omitted.
 
 If this String object represents an empty character
 sequence, or the first and last characters of character sequence
 represented by this String object both have codes
 greater than '\u0020' (the space character), then a
 reference to this String object is returned.
 
 Otherwise, if there is no character with a code greater than
 '\u0020' in the string, then a new
 String object representing an empty string is created
 and returned.
 
 Otherwise, let k be the index of the first character in the
 string whose code is greater than '\u0020', and let
 m be the index of the last character in the string whose code
 is greater than '\u0020'. A new String
 object is created, representing the substring of this string that
 begins with the character at index k and ends with the
 character at index m-that is, the result of
 this.substring(k, m+1).
 
 This method may be used to trim whitespace (as defined above) from
 the beginning and end of a string.<dl><dt><span class="strong">Returns:</span></dt><dd>A copy of this string with leading and trailing white
          space removed, or this string if it has no leading or
          trailing white space.</dd></dl>]]></description>
        </method>
        <method>
            <name>toString</name>
            <signature><![CDATA[public String toString()]]></signature>
            <description><![CDATA[This object (which is already a string!) is itself returned.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">toString</a></code> in interface <code><a href="#">CharSequence</a></code></dd>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">toString</a></code> in class <code><a href="#">Object</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the string itself.</dd></dl>]]></description>
        </method>
        <method>
            <name>toCharArray</name>
            <signature><![CDATA[public char[] toCharArray()]]></signature>
            <description><![CDATA[Converts this string to a new character array.<dl><dt><span class="strong">Returns:</span></dt><dd>a newly allocated character array whose length is the length
          of this string and whose contents are initialized to contain
          the character sequence represented by this string.</dd></dl>]]></description>
        </method>
        <method>
            <name>format</name>
            <signature><![CDATA[public static String format(String format,
            Object... args)]]></signature>
            <description><![CDATA[Returns a formatted string using the specified format string and
 arguments.

  The locale always used is the one returned by Locale.getDefault().<dl><dt><span class="strong">Parameters:</span></dt><dd><code>format</code> - A <a href="#">format string</a></dd><dd><code>args</code> - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         <cite>The Java™ Virtual Machine Specification</cite>.
         The behaviour on a
         <tt>null</tt> argument depends on the <a
         href="../util/Formatter.html#syntax">conversion</a>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>A formatted string</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code>IllegalFormatException</code> - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the <a
          href="../util/Formatter.html#detail">Details</a> section of the
          formatter class specification.</dd>
<dd><code><a href="#">NullPointerException</a></code> - If the <tt>format</tt> is <tt>null</tt></dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Formatter</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>format</name>
            <signature><![CDATA[public static String format(Locale l,
            String format,
            Object... args)]]></signature>
            <description><![CDATA[Returns a formatted string using the specified locale, format string,
 and arguments.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>l</code> - The <a href="#">locale</a> to apply during
         formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
         is applied.</dd><dd><code>format</code> - A <a href="#">format string</a></dd><dd><code>args</code> - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         <cite>The Java™ Virtual Machine Specification</cite>.
         The behaviour on a
         <tt>null</tt> argument depends on the <a
         href="../util/Formatter.html#syntax">conversion</a>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>A formatted string</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code>IllegalFormatException</code> - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the <a
          href="../util/Formatter.html#detail">Details</a> section of the
          formatter class specification</dd>
<dd><code><a href="#">NullPointerException</a></code> - If the <tt>format</tt> is <tt>null</tt></dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Formatter</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>valueOf</name>
            <signature><![CDATA[public static String valueOf(Object obj)]]></signature>
            <description><![CDATA[Returns the string representation of the Object argument.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>obj</code> - an <code>Object</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>if the argument is <code>null</code>, then a string equal to
          <code>"null"</code>; otherwise, the value of
          <code>obj.toString()</code> is returned.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Object.toString()</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>valueOf</name>
            <signature><![CDATA[public static String valueOf(char[] data)]]></signature>
            <description><![CDATA[Returns the string representation of the char array
 argument. The contents of the character array are copied; subsequent
 modification of the character array does not affect the newly
 created string.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>data</code> - a <code>char</code> array.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a newly allocated string representing the same sequence of
          characters contained in the character array argument.</dd></dl>]]></description>
        </method>
        <method>
            <name>valueOf</name>
            <signature><![CDATA[public static String valueOf(char[] data,
             int offset,
             int count)]]></signature>
            <description><![CDATA[Returns the string representation of a specific subarray of the
 char array argument.
 
 The offset argument is the index of the first
 character of the subarray. The count argument
 specifies the length of the subarray. The contents of the subarray
 are copied; subsequent modification of the character array does not
 affect the newly created string.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>data</code> - the character array.</dd><dd><code>offset</code> - the initial offset into the value of the
                  <code>String</code>.</dd><dd><code>count</code> - the length of the value of the <code>String</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a string representing the sequence of characters contained
          in the subarray of the character array argument.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if <code>offset</code> is
          negative, or <code>count</code> is negative, or
          <code>offset+count</code> is larger than
          <code>data.length</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>copyValueOf</name>
            <signature><![CDATA[public static String copyValueOf(char[] data,
                 int offset,
                 int count)]]></signature>
            <description><![CDATA[Returns a String that represents the character sequence in the
 array specified.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>data</code> - the character array.</dd><dd><code>offset</code> - initial offset of the subarray.</dd><dd><code>count</code> - length of the subarray.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a <code>String</code> that contains the characters of the
          specified subarray of the character array.</dd></dl>]]></description>
        </method>
        <method>
            <name>copyValueOf</name>
            <signature><![CDATA[public static String copyValueOf(char[] data)]]></signature>
            <description><![CDATA[Returns a String that represents the character sequence in the
 array specified.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>data</code> - the character array.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a <code>String</code> that contains the characters of the
          character array.</dd></dl>]]></description>
        </method>
        <method>
            <name>valueOf</name>
            <signature><![CDATA[public static String valueOf(boolean b)]]></signature>
            <description><![CDATA[Returns the string representation of the boolean argument.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>b</code> - a <code>boolean</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>if the argument is <code>true</code>, a string equal to
          <code>"true"</code> is returned; otherwise, a string equal to
          <code>"false"</code> is returned.</dd></dl>]]></description>
        </method>
        <method>
            <name>valueOf</name>
            <signature><![CDATA[public static String valueOf(char c)]]></signature>
            <description><![CDATA[Returns the string representation of the char
 argument.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>c</code> - a <code>char</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a string of length <code>1</code> containing
          as its single character the argument <code>c</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>valueOf</name>
            <signature><![CDATA[public static String valueOf(int i)]]></signature>
            <description><![CDATA[Returns the string representation of the int argument.
 
 The representation is exactly the one returned by the
 Integer.toString method of one argument.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>i</code> - an <code>int</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a string representation of the <code>int</code> argument.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Integer.toString(int, int)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>valueOf</name>
            <signature><![CDATA[public static String valueOf(long l)]]></signature>
            <description><![CDATA[Returns the string representation of the long argument.
 
 The representation is exactly the one returned by the
 Long.toString method of one argument.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>l</code> - a <code>long</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a string representation of the <code>long</code> argument.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Long.toString(long)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>valueOf</name>
            <signature><![CDATA[public static String valueOf(float f)]]></signature>
            <description><![CDATA[Returns the string representation of the float argument.
 
 The representation is exactly the one returned by the
 Float.toString method of one argument.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>f</code> - a <code>float</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a string representation of the <code>float</code> argument.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Float.toString(float)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>valueOf</name>
            <signature><![CDATA[public static String valueOf(double d)]]></signature>
            <description><![CDATA[Returns the string representation of the double argument.
 
 The representation is exactly the one returned by the
 Double.toString method of one argument.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>d</code> - a <code>double</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a  string representation of the <code>double</code> argument.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Double.toString(double)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>intern</name>
            <signature><![CDATA[public String intern()]]></signature>
            <description><![CDATA[Returns a canonical representation for the string object.
 
 A pool of strings, initially empty, is maintained privately by the
 class String.
 
 When the intern method is invoked, if the pool already contains a
 string equal to this String object as determined by
 the equals(Object) method, then the string from the pool is
 returned. Otherwise, this String object is added to the
 pool and a reference to this String object is returned.
 
 It follows that for any two strings s and t,
 s.intern() == t.intern() is true
 if and only if s.equals(t) is true.
 
 All literal strings and string-valued constant expressions are
 interned. String literals are defined in section 3.10.5 of the
 The Java™ Language Specification.<dl><dt><span class="strong">Returns:</span></dt><dd>a string that has the same contents as this string, but is
          guaranteed to be from a pool of unique strings.</dd></dl>]]></description>
        </method>
    </methods>
</Root>

<?xml version="1.0" encoding="UTF-8"?>
<Root name="java.util.Date">
    <constructors>
        <constructor>
            <name>Date</name>
            <signature><![CDATA[public Date()]]></signature>
            <description><![CDATA[Allocates a Date object and initializes it so that
 it represents the time at which it was allocated, measured to the
 nearest millisecond.<dl><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>System.currentTimeMillis()</code></a></dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Date</name>
            <signature><![CDATA[public Date(long date)]]></signature>
            <description><![CDATA[Allocates a Date object and initializes it to
 represent the specified number of milliseconds since the
 standard base time known as "the epoch", namely January 1,
 1970, 00:00:00 GMT.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>date</code> - the milliseconds since January 1, 1970, 00:00:00 GMT.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>System.currentTimeMillis()</code></a></dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Date</name>
            <signature><![CDATA[@Deprecated
public Date(int year,
               int month,
               int date)]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.set(year + 1900, month, date)
 or GregorianCalendar(year + 1900, month, date).Allocates a Date object and initializes it so that
 it represents midnight, local time, at the beginning of the day
 specified by the year, month, and
 date arguments.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>year</code> - the year minus 1900.</dd><dd><code>month</code> - the month between 0-11.</dd><dd><code>date</code> - the day of the month between 1-31.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Date</name>
            <signature><![CDATA[@Deprecated
public Date(int year,
               int month,
               int date,
               int hrs,
               int min)]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.set(year + 1900, month, date,
 hrs, min) or GregorianCalendar(year + 1900,
 month, date, hrs, min).Allocates a Date object and initializes it so that
 it represents the instant at the start of the minute specified by
 the year, month, date,
 hrs, and min arguments, in the local
 time zone.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>year</code> - the year minus 1900.</dd><dd><code>month</code> - the month between 0-11.</dd><dd><code>date</code> - the day of the month between 1-31.</dd><dd><code>hrs</code> - the hours between 0-23.</dd><dd><code>min</code> - the minutes between 0-59.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Date</name>
            <signature><![CDATA[@Deprecated
public Date(int year,
               int month,
               int date,
               int hrs,
               int min,
               int sec)]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.set(year + 1900, month, date,
 hrs, min, sec) or GregorianCalendar(year + 1900,
 month, date, hrs, min, sec).Allocates a Date object and initializes it so that
 it represents the instant at the start of the second specified
 by the year, month, date,
 hrs, min, and sec arguments,
 in the local time zone.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>year</code> - the year minus 1900.</dd><dd><code>month</code> - the month between 0-11.</dd><dd><code>date</code> - the day of the month between 1-31.</dd><dd><code>hrs</code> - the hours between 0-23.</dd><dd><code>min</code> - the minutes between 0-59.</dd><dd><code>sec</code> - the seconds between 0-59.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>Date</name>
            <signature><![CDATA[@Deprecated
public Date(String s)]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by DateFormat.parse(String s).Allocates a Date object and initializes it so that
 it represents the date and time indicated by the string
 s, which is interpreted as if by the
 parse(java.lang.String) method.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - a string representation of the date.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>DateFormat</code></a>, 
<a href="#"><code>parse(java.lang.String)</code></a></dd></dl>]]></description>
        </constructor>
    </constructors>
    <methods>
        <method>
            <name>clone</name>
            <signature><![CDATA[public Object clone()]]></signature>
            <description><![CDATA[Return a copy of this object.<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">clone</a></code> in class <code><a href="#">Object</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>a clone of this instance.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Cloneable</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>UTC</name>
            <signature><![CDATA[@Deprecated
public static long UTC(int year,
                  int month,
                  int date,
                  int hrs,
                  int min,
                  int sec)]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.set(year + 1900, month, date,
 hrs, min, sec) or GregorianCalendar(year + 1900,
 month, date, hrs, min, sec), using a UTC
 TimeZone, followed by Calendar.getTime().getTime().Determines the date and time based on the arguments. The
 arguments are interpreted as a year, month, day of the month,
 hour of the day, minute within the hour, and second within the
 minute, exactly as for the Date constructor with six
 arguments, except that the arguments are interpreted relative
 to UTC rather than to the local time zone. The time indicated is
 returned represented as the distance, measured in milliseconds,
 of that time from the epoch (00:00:00 GMT on January 1, 1970).<dl><dt><span class="strong">Parameters:</span></dt><dd><code>year</code> - the year minus 1900.</dd><dd><code>month</code> - the month between 0-11.</dd><dd><code>date</code> - the day of the month between 1-31.</dd><dd><code>hrs</code> - the hours between 0-23.</dd><dd><code>min</code> - the minutes between 0-59.</dd><dd><code>sec</code> - the seconds between 0-59.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the number of milliseconds since January 1, 1970, 00:00:00 GMT for
          the date and time specified by the arguments.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>parse</name>
            <signature><![CDATA[@Deprecated
public static long parse(String s)]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by DateFormat.parse(String s).Attempts to interpret the string s as a representation
 of a date and time. If the attempt is successful, the time
 indicated is returned represented as the distance, measured in
 milliseconds, of that time from the epoch (00:00:00 GMT on
 January 1, 1970). If the attempt fails, an
 IllegalArgumentException is thrown.
 
 It accepts many syntaxes; in particular, it recognizes the IETF
 standard date syntax: "Sat, 12 Aug 1995 13:30:00 GMT". It also
 understands the continental U.S. time-zone abbreviations, but for
 general use, a time-zone offset should be used: "Sat, 12 Aug 1995
 13:30:00 GMT+0430" (4 hours, 30 minutes west of the Greenwich
 meridian). If no time zone is specified, the local time zone is
 assumed. GMT and UTC are considered equivalent.
 
 The string s is processed from left to right, looking for
 data of interest. Any material in s that is within the
 ASCII parenthesis characters ( and ) is ignored.
 Parentheses may be nested. Otherwise, the only characters permitted
 within s are these ASCII characters:
 
 abcdefghijklmnopqrstuvwxyz
 ABCDEFGHIJKLMNOPQRSTUVWXYZ
 0123456789,+-:/
 and whitespace characters.
 A consecutive sequence of decimal digits is treated as a decimal
 number:
 If a number is preceded by + or - and a year
     has already been recognized, then the number is a time-zone
     offset. If the number is less than 24, it is an offset measured
     in hours. Otherwise, it is regarded as an offset in minutes,
     expressed in 24-hour time format without punctuation. A
     preceding - means a westward offset. Time zone offsets
     are always relative to UTC (Greenwich). Thus, for example,
     -5 occurring in the string would mean "five hours west
     of Greenwich" and +0430 would mean "four hours and
     thirty minutes east of Greenwich." It is permitted for the
     string to specify GMT, UT, or UTC
     redundantly-for example, GMT-5 or utc+0430.
 The number is regarded as a year number if one of the
     following conditions is true:
 
     The number is equal to or greater than 70 and followed by a
         space, comma, slash, or end of string
     The number is less than 70, and both a month and a day of
         the month have already been recognized
 
     If the recognized year number is less than 100, it is
     interpreted as an abbreviated year relative to a century of
     which dates are within 80 years before and 19 years after
     the time when the Date class is initialized.
     After adjusting the year number, 1900 is subtracted from
     it. For example, if the current year is 1999 then years in
     the range 19 to 99 are assumed to mean 1919 to 1999, while
     years from 0 to 18 are assumed to mean 2000 to 2018.  Note
     that this is slightly different from the interpretation of
     years less than 100 that is used in SimpleDateFormat.
 If the number is followed by a colon, it is regarded as an hour,
     unless an hour has already been recognized, in which case it is
     regarded as a minute.
 If the number is followed by a slash, it is regarded as a month
     (it is decreased by 1 to produce a number in the range 0
     to 11), unless a month has already been recognized, in
     which case it is regarded as a day of the month.
 If the number is followed by whitespace, a comma, a hyphen, or
     end of string, then if an hour has been recognized but not a
     minute, it is regarded as a minute; otherwise, if a minute has
     been recognized but not a second, it is regarded as a second;
     otherwise, it is regarded as a day of the month. 
 A consecutive sequence of letters is regarded as a word and treated
 as follows:
 A word that matches AM, ignoring case, is ignored (but
     the parse fails if an hour has not been recognized or is less
     than 1 or greater than 12).
 A word that matches PM, ignoring case, adds 12
     to the hour (but the parse fails if an hour has not been
     recognized or is less than 1 or greater than 12).
 Any word that matches any prefix of SUNDAY, MONDAY, TUESDAY,
     WEDNESDAY, THURSDAY, FRIDAY, or SATURDAY, ignoring
     case, is ignored. For example, sat, Friday, TUE, and
     Thurs are ignored.
 Otherwise, any word that matches any prefix of JANUARY,
     FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER,
     OCTOBER, NOVEMBER, or DECEMBER, ignoring case, and
     considering them in the order given here, is recognized as
     specifying a month and is converted to a number (0 to
     11). For example, aug, Sept, april, and
     NOV are recognized as months. So is Ma, which
     is recognized as MARCH, not MAY.
 Any word that matches GMT, UT, or UTC, ignoring
     case, is treated as referring to UTC.
 Any word that matches EST, CST, MST, or PST,
     ignoring case, is recognized as referring to the time zone in
     North America that is five, six, seven, or eight hours west of
     Greenwich, respectively. Any word that matches EDT, CDT,
     MDT, or PDT, ignoring case, is recognized as
     referring to the same time zone, respectively, during daylight
     saving time.
 Once the entire string s has been scanned, it is converted to a time
 result in one of two ways. If a time zone or time-zone offset has been
 recognized, then the year, month, day of month, hour, minute, and
 second are interpreted in UTC and then the time-zone offset is
 applied. Otherwise, the year, month, day of month, hour, minute, and
 second are interpreted in the local time zone.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - a string to be parsed as a date.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the number of milliseconds since January 1, 1970, 00:00:00 GMT
          represented by the string argument.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>DateFormat</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>getYear</name>
            <signature><![CDATA[@Deprecated
public int getYear()]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.get(Calendar.YEAR) - 1900.Returns a value that is the result of subtracting 1900 from the
 year that contains or begins with the instant in time represented
 by this Date object, as interpreted in the local
 time zone.<dl><dt><span class="strong">Returns:</span></dt><dd>the year represented by this date, minus 1900.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>setYear</name>
            <signature><![CDATA[@Deprecated
public void setYear(int year)]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.set(Calendar.YEAR, year + 1900).Sets the year of this Date object to be the specified
 value plus 1900. This Date object is modified so
 that it represents a point in time within the specified year,
 with the month, date, hour, minute, and second the same as
 before, as interpreted in the local time zone. (Of course, if
 the date was February 29, for example, and the year is set to a
 non-leap year, then the new date will be treated as if it were
 on March 1.)<dl><dt><span class="strong">Parameters:</span></dt><dd><code>year</code> - the year value.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>getMonth</name>
            <signature><![CDATA[@Deprecated
public int getMonth()]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.get(Calendar.MONTH).Returns a number representing the month that contains or begins
 with the instant in time represented by this Date object.
 The value returned is between 0 and 11,
 with the value 0 representing January.<dl><dt><span class="strong">Returns:</span></dt><dd>the month represented by this date.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>setMonth</name>
            <signature><![CDATA[@Deprecated
public void setMonth(int month)]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.set(Calendar.MONTH, int month).Sets the month of this date to the specified value. This
 Date object is modified so that it represents a point
 in time within the specified month, with the year, date, hour,
 minute, and second the same as before, as interpreted in the
 local time zone. If the date was October 31, for example, and
 the month is set to June, then the new date will be treated as
 if it were on July 1, because June has only 30 days.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>month</code> - the month value between 0-11.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>getDate</name>
            <signature><![CDATA[@Deprecated
public int getDate()]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.get(Calendar.DAY_OF_MONTH).Returns the day of the month represented by this Date object.
 The value returned is between 1 and 31
 representing the day of the month that contains or begins with the
 instant in time represented by this Date object, as
 interpreted in the local time zone.<dl><dt><span class="strong">Returns:</span></dt><dd>the day of the month represented by this date.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>setDate</name>
            <signature><![CDATA[@Deprecated
public void setDate(int date)]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.set(Calendar.DAY_OF_MONTH, int date).Sets the day of the month of this Date object to the
 specified value. This Date object is modified so that
 it represents a point in time within the specified day of the
 month, with the year, month, hour, minute, and second the same
 as before, as interpreted in the local time zone. If the date
 was April 30, for example, and the date is set to 31, then it
 will be treated as if it were on May 1, because April has only
 30 days.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>date</code> - the day of the month value between 1-31.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>getDay</name>
            <signature><![CDATA[@Deprecated
public int getDay()]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.get(Calendar.DAY_OF_WEEK).Returns the day of the week represented by this date. The
 returned value (0 = Sunday, 1 = Monday,
 2 = Tuesday, 3 = Wednesday, 4 =
 Thursday, 5 = Friday, 6 = Saturday)
 represents the day of the week that contains or begins with
 the instant in time represented by this Date object,
 as interpreted in the local time zone.<dl><dt><span class="strong">Returns:</span></dt><dd>the day of the week represented by this date.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>getHours</name>
            <signature><![CDATA[@Deprecated
public int getHours()]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.get(Calendar.HOUR_OF_DAY).Returns the hour represented by this Date object. The
 returned value is a number (0 through 23)
 representing the hour within the day that contains or begins
 with the instant in time represented by this Date
 object, as interpreted in the local time zone.<dl><dt><span class="strong">Returns:</span></dt><dd>the hour represented by this date.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>setHours</name>
            <signature><![CDATA[@Deprecated
public void setHours(int hours)]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.set(Calendar.HOUR_OF_DAY, int hours).Sets the hour of this Date object to the specified value.
 This Date object is modified so that it represents a point
 in time within the specified hour of the day, with the year, month,
 date, minute, and second the same as before, as interpreted in the
 local time zone.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>hours</code> - the hour value.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>getMinutes</name>
            <signature><![CDATA[@Deprecated
public int getMinutes()]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.get(Calendar.MINUTE).Returns the number of minutes past the hour represented by this date,
 as interpreted in the local time zone.
 The value returned is between 0 and 59.<dl><dt><span class="strong">Returns:</span></dt><dd>the number of minutes past the hour represented by this date.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>setMinutes</name>
            <signature><![CDATA[@Deprecated
public void setMinutes(int minutes)]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.set(Calendar.MINUTE, int minutes).Sets the minutes of this Date object to the specified value.
 This Date object is modified so that it represents a point
 in time within the specified minute of the hour, with the year, month,
 date, hour, and second the same as before, as interpreted in the
 local time zone.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>minutes</code> - the value of the minutes.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>getSeconds</name>
            <signature><![CDATA[@Deprecated
public int getSeconds()]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.get(Calendar.SECOND).Returns the number of seconds past the minute represented by this date.
 The value returned is between 0 and 61. The
 values 60 and 61 can only occur on those
 Java Virtual Machines that take leap seconds into account.<dl><dt><span class="strong">Returns:</span></dt><dd>the number of seconds past the minute represented by this date.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>setSeconds</name>
            <signature><![CDATA[@Deprecated
public void setSeconds(int seconds)]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by Calendar.set(Calendar.SECOND, int seconds).Sets the seconds of this Date to the specified value.
 This Date object is modified so that it represents a
 point in time within the specified second of the minute, with
 the year, month, date, hour, and minute the same as before, as
 interpreted in the local time zone.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>seconds</code> - the seconds value.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>getTime</name>
            <signature><![CDATA[public long getTime()]]></signature>
            <description><![CDATA[Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT
 represented by this Date object.<dl><dt><span class="strong">Returns:</span></dt><dd>the number of milliseconds since January 1, 1970, 00:00:00 GMT
          represented by this date.</dd></dl>]]></description>
        </method>
        <method>
            <name>setTime</name>
            <signature><![CDATA[public void setTime(long time)]]></signature>
            <description><![CDATA[Sets this Date object to represent a point in time that is
 time milliseconds after January 1, 1970 00:00:00 GMT.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>time</code> - the number of milliseconds.</dd></dl>]]></description>
        </method>
        <method>
            <name>before</name>
            <signature><![CDATA[public boolean before(Date when)]]></signature>
            <description><![CDATA[Tests if this date is before the specified date.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>when</code> - a date.</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if and only if the instant of time
            represented by this <tt>Date</tt> object is strictly
            earlier than the instant represented by <tt>when</tt>;
          <code>false</code> otherwise.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if <code>when</code> is null.</dd></dl>]]></description>
        </method>
        <method>
            <name>after</name>
            <signature><![CDATA[public boolean after(Date when)]]></signature>
            <description><![CDATA[Tests if this date is after the specified date.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>when</code> - a date.</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if and only if the instant represented
          by this <tt>Date</tt> object is strictly later than the
          instant represented by <tt>when</tt>;
          <code>false</code> otherwise.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if <code>when</code> is null.</dd></dl>]]></description>
        </method>
        <method>
            <name>equals</name>
            <signature><![CDATA[public boolean equals(Object obj)]]></signature>
            <description><![CDATA[Compares two dates for equality.
 The result is true if and only if the argument is
 not null and is a Date object that
 represents the same point in time, to the millisecond, as this object.
 
 Thus, two Date objects are equal if and only if the
 getTime method returns the same long
 value for both.<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">equals</a></code> in class <code><a href="#">Object</a></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>obj</code> - the object to compare with.</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if the objects are the same;
          <code>false</code> otherwise.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>getTime()</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>compareTo</name>
            <signature><![CDATA[public int compareTo(Date anotherDate)]]></signature>
            <description><![CDATA[Compares two Dates for ordering.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">compareTo</a></code> in interface <code><a href="#">Comparable</a><<a href="#">Date</a>></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>anotherDate</code> - the <code>Date</code> to be compared.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the value <code>0</code> if the argument Date is equal to
          this Date; a value less than <code>0</code> if this Date
          is before the Date argument; and a value greater than
      <code>0</code> if this Date is after the Date argument.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if <code>anotherDate</code> is null.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.2</dd></dl>]]></description>
        </method>
        <method>
            <name>hashCode</name>
            <signature><![CDATA[public int hashCode()]]></signature>
            <description><![CDATA[Returns a hash code value for this object. The result is the
 exclusive OR of the two halves of the primitive long
 value returned by the getTime()
 method. That is, the hash code is the value of the expression:
 
 (int)(this.getTime()^(this.getTime() >>> 32))<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">hashCode</a></code> in class <code><a href="#">Object</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>a hash code value for this object.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Object.equals(java.lang.Object)</code></a>, 
<a href="#"><code>System.identityHashCode(java.lang.Object)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>toString</name>
            <signature><![CDATA[public String toString()]]></signature>
            <description><![CDATA[Converts this Date object to a String
 of the form:
 
 dow mon dd hh:mm:ss zzz yyyy
 where:
 dow is the day of the week (Sun, Mon, Tue, Wed,
     Thu, Fri, Sat).
 mon is the month (Jan, Feb, Mar, Apr, May, Jun,
     Jul, Aug, Sep, Oct, Nov, Dec).
 dd is the day of the month (01 through
     31), as two decimal digits.
 hh is the hour of the day (00 through
     23), as two decimal digits.
 mm is the minute within the hour (00 through
     59), as two decimal digits.
 ss is the second within the minute (00 through
     61, as two decimal digits.
 zzz is the time zone (and may reflect daylight saving
     time). Standard time zone abbreviations include those
     recognized by the method parse. If time zone
     information is not available, then zzz is empty -
     that is, it consists of no characters at all.
 yyyy is the year, as four decimal digits.
 <dl>
<dt><strong>Overrides:</strong></dt>
<dd><code><a href="#">toString</a></code> in class <code><a href="#">Object</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>a string representation of this date.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>toLocaleString()</code></a>, 
<a href="#"><code>toGMTString()</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>toLocaleString</name>
            <signature><![CDATA[@Deprecated
public String toLocaleString()]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by DateFormat.format(Date date).Creates a string representation of this Date object in an
 implementation-dependent form. The intent is that the form should
 be familiar to the user of the Java application, wherever it may
 happen to be running. The intent is comparable to that of the
 "%c" format supported by the strftime()
 function of ISO C.<dl><dt><span class="strong">Returns:</span></dt><dd>a string representation of this date, using the locale
          conventions.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>DateFormat</code></a>, 
<a href="#"><code>toString()</code></a>, 
<a href="#"><code>toGMTString()</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>toGMTString</name>
            <signature><![CDATA[@Deprecated
public String toGMTString()]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by DateFormat.format(Date date), using a
 GMT TimeZone.Creates a string representation of this Date object of
 the form:
 
 d mon yyyy hh:mm:ss GMT
 where:
 d is the day of the month (1 through 31),
     as one or two decimal digits.
 mon is the month (Jan, Feb, Mar, Apr, May, Jun, Jul,
     Aug, Sep, Oct, Nov, Dec).
 yyyy is the year, as four decimal digits.
 hh is the hour of the day (00 through 23),
     as two decimal digits.
 mm is the minute within the hour (00 through
     59), as two decimal digits.
 ss is the second within the minute (00 through
     61), as two decimal digits.
 GMT is exactly the ASCII letters "GMT" to indicate
     Greenwich Mean Time.
 
 The result does not depend on the local time zone.<dl><dt><span class="strong">Returns:</span></dt><dd>a string representation of this date, using the Internet GMT
          conventions.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>DateFormat</code></a>, 
<a href="#"><code>toString()</code></a>, 
<a href="#"><code>toLocaleString()</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>getTimezoneOffset</name>
            <signature><![CDATA[@Deprecated
public int getTimezoneOffset()]]></signature>
            <description><![CDATA[Deprecated. As of JDK version 1.1,
 replaced by -(Calendar.get(Calendar.ZONE_OFFSET) +
 Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000).Returns the offset, measured in minutes, for the local time zone
 relative to UTC that is appropriate for the time represented by
 this Date object.
 
 For example, in Massachusetts, five time zones west of Greenwich:
 
 new Date(96, 1, 14).getTimezoneOffset() returns 300
 because on February 14, 1996, standard time (Eastern Standard Time)
 is in use, which is offset five hours from UTC; but:
 
 new Date(96, 5, 1).getTimezoneOffset() returns 240
 because on June 1, 1996, daylight saving time (Eastern Daylight Time)
 is in use, which is offset only four hours from UTC.
 This method produces the same result as if it computed:
 
 (this.getTime() - UTC(this.getYear(),
                       this.getMonth(),
                       this.getDate(),
                       this.getHours(),
                       this.getMinutes(),
                       this.getSeconds())) / (60 * 1000)
 <dl><dt><span class="strong">Returns:</span></dt><dd>the time-zone offset, in minutes, for the current time zone.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Calendar.ZONE_OFFSET</code></a>, 
<a href="#"><code>Calendar.DST_OFFSET</code></a>, 
<a href="#"><code>TimeZone.getDefault()</code></a></dd></dl>]]></description>
        </method>
    </methods>
</Root>

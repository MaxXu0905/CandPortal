<?xml version="1.0" encoding="UTF-8"?>
<Root name="java.lang.StringBuilder">
    <constructors>
        <constructor>
            <name>StringBuilder</name>
            <signature><![CDATA[public StringBuilder()]]></signature>
            <description><![CDATA[Constructs a string builder with no characters in it and an
 initial capacity of 16 characters.]]></description>
        </constructor>
        <constructor>
            <name>StringBuilder</name>
            <signature><![CDATA[public StringBuilder(int capacity)]]></signature>
            <description><![CDATA[Constructs a string builder with no characters in it and an
 initial capacity specified by the capacity argument.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>capacity</code> - the initial capacity.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NegativeArraySizeException</a></code> - if the <code>capacity</code>
               argument is less than <code>0</code>.</dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>StringBuilder</name>
            <signature><![CDATA[public StringBuilder(String str)]]></signature>
            <description><![CDATA[Constructs a string builder initialized to the contents of the
 specified string. The initial capacity of the string builder is
 16 plus the length of the string argument.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>str</code> - the initial contents of the buffer.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if <code>str</code> is <code>null</code></dd></dl>]]></description>
        </constructor>
        <constructor>
            <name>StringBuilder</name>
            <signature><![CDATA[public StringBuilder(CharSequence seq)]]></signature>
            <description><![CDATA[Constructs a string builder that contains the same characters
 as the specified CharSequence. The initial capacity of
 the string builder is 16 plus the length of the
 CharSequence argument.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>seq</code> - the sequence to copy.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if <code>seq</code> is <code>null</code></dd></dl>]]></description>
        </constructor>
    </constructors>
    <methods>
        <method>
            <name>append</name>
            <signature><![CDATA[public StringBuilder append(Object obj)]]></signature>
            <description><![CDATA[Appends the string representation of the Object argument.
 
 The overall effect is exactly as if the argument were converted
 to a string by the method String.valueOf(Object),
 and the characters of that string were then
 appended to this character sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>obj</code> - an <code>Object</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd></dl>]]></description>
        </method>
        <method>
            <name>append</name>
            <signature><![CDATA[public StringBuilder append(String str)]]></signature>
            <description><![CDATA[Appends the specified string to this character sequence.
 
 The characters of the String argument are appended, in
 order, increasing the length of this sequence by the length of the
 argument. If str is null, then the four
 characters "null" are appended.
 
 Let n be the length of this character sequence just prior to
 execution of the append method. Then the character at
 index k in the new character sequence is equal to the character
 at index k in the old character sequence, if k is less
 than n; otherwise, it is equal to the character at index
 k-n in the argument str.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>str</code> - a string.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd></dl>]]></description>
        </method>
        <method>
            <name>append</name>
            <signature><![CDATA[public StringBuilder append(StringBuffer sb)]]></signature>
            <description><![CDATA[Appends the specified StringBuffer to this sequence.
 
 The characters of the StringBuffer argument are appended,
 in order, to this sequence, increasing the
 length of this sequence by the length of the argument.
 If sb is null, then the four characters
 "null" are appended to this sequence.
 
 Let n be the length of this character sequence just prior to
 execution of the append method. Then the character at index
 k in the new character sequence is equal to the character at
 index k in the old character sequence, if k is less than
 n; otherwise, it is equal to the character at index k-n
 in the argument sb.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>sb</code> - the <tt>StringBuffer</tt> to append.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd></dl>]]></description>
        </method>
        <method>
            <name>append</name>
            <signature><![CDATA[public StringBuilder append(CharSequence s)]]></signature>
            <description><![CDATA[Description copied from interface: AppendableAppends the specified character sequence to this Appendable.

  Depending on which class implements the character sequence
 csq, the entire sequence may not be appended.  For
 instance, if csq is a CharBuffer then
 the subsequence to append is defined by the buffer's position and limit.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">append</a></code> in interface <code><a href="#">Appendable</a></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - The character sequence to append.  If <tt>csq</tt> is
         <tt>null</tt>, then the four characters <tt>"null"</tt> are
         appended to this Appendable.</dd>
<dt><span class="strong">Returns:</span></dt><dd>A reference to this <tt>Appendable</tt></dd></dl>]]></description>
        </method>
        <method>
            <name>append</name>
            <signature><![CDATA[public StringBuilder append(CharSequence s,
                   int start,
                   int end)]]></signature>
            <description><![CDATA[Appends a subsequence of the specified CharSequence to this
 sequence.
 
 Characters of the argument s, starting at
 index start, are appended, in order, to the contents of
 this sequence up to the (exclusive) index end. The length
 of this sequence is increased by the value of end - start.
 
 Let n be the length of this character sequence just prior to
 execution of the append method. Then the character at
 index k in this character sequence becomes equal to the
 character at index k in this sequence, if k is less than
 n; otherwise, it is equal to the character at index
 k+start-n in the argument s.
 
 If s is null, then this method appends
 characters as if the s parameter was a sequence containing the four
 characters "null".<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">append</a></code> in interface <code><a href="#">Appendable</a></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - the sequence to append.</dd><dd><code>start</code> - the starting index of the subsequence to be appended.</dd><dd><code>end</code> - the end index of the subsequence to be appended.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if
             <code>start</code> is negative, or
             <code>start</code> is greater than <code>end</code> or
             <code>end</code> is greater than <code>s.length()</code></dd></dl>]]></description>
        </method>
        <method>
            <name>append</name>
            <signature><![CDATA[public StringBuilder append(char[] str)]]></signature>
            <description><![CDATA[Appends the string representation of the char array
 argument to this sequence.
 
 The characters of the array argument are appended, in order, to
 the contents of this sequence. The length of this sequence
 increases by the length of the argument.
 
 The overall effect is exactly as if the argument were converted
 to a string by the method String.valueOf(char[]),
 and the characters of that string were then
 appended to this character sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>str</code> - the characters to be appended.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd></dl>]]></description>
        </method>
        <method>
            <name>append</name>
            <signature><![CDATA[public StringBuilder append(char[] str,
                   int offset,
                   int len)]]></signature>
            <description><![CDATA[Appends the string representation of a subarray of the
 char array argument to this sequence.
 
 Characters of the char array str, starting at
 index offset, are appended, in order, to the contents
 of this sequence. The length of this sequence increases
 by the value of len.
 
 The overall effect is exactly as if the arguments were converted
 to a string by the method String.valueOf(char[],int,int),
 and the characters of that string were then
 appended to this character sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>str</code> - the characters to be appended.</dd><dd><code>offset</code> - the index of the first <code>char</code> to append.</dd><dd><code>len</code> - the number of <code>char</code>s to append.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if <code>offset < 0</code> or <code>len < 0</code>
         or <code>offset+len > str.length</code></dd></dl>]]></description>
        </method>
        <method>
            <name>append</name>
            <signature><![CDATA[public StringBuilder append(boolean b)]]></signature>
            <description><![CDATA[Appends the string representation of the boolean
 argument to the sequence.
 
 The overall effect is exactly as if the argument were converted
 to a string by the method String.valueOf(boolean),
 and the characters of that string were then
 appended to this character sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>b</code> - a <code>boolean</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd></dl>]]></description>
        </method>
        <method>
            <name>append</name>
            <signature><![CDATA[public StringBuilder append(char c)]]></signature>
            <description><![CDATA[Appends the string representation of the char
 argument to this sequence.
 
 The argument is appended to the contents of this sequence.
 The length of this sequence increases by 1.
 
 The overall effect is exactly as if the argument were converted
 to a string by the method String.valueOf(char),
 and the character in that string were then
 appended to this character sequence.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">append</a></code> in interface <code><a href="#">Appendable</a></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>c</code> - a <code>char</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd></dl>]]></description>
        </method>
        <method>
            <name>append</name>
            <signature><![CDATA[public StringBuilder append(int i)]]></signature>
            <description><![CDATA[Appends the string representation of the int
 argument to this sequence.
 
 The overall effect is exactly as if the argument were converted
 to a string by the method String.valueOf(int),
 and the characters of that string were then
 appended to this character sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>i</code> - an <code>int</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd></dl>]]></description>
        </method>
        <method>
            <name>append</name>
            <signature><![CDATA[public StringBuilder append(long lng)]]></signature>
            <description><![CDATA[Appends the string representation of the long
 argument to this sequence.
 
 The overall effect is exactly as if the argument were converted
 to a string by the method String.valueOf(long),
 and the characters of that string were then
 appended to this character sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>lng</code> - a <code>long</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd></dl>]]></description>
        </method>
        <method>
            <name>append</name>
            <signature><![CDATA[public StringBuilder append(float f)]]></signature>
            <description><![CDATA[Appends the string representation of the float
 argument to this sequence.
 
 The overall effect is exactly as if the argument were converted
 to a string by the method String.valueOf(float),
 and the characters of that string were then
 appended to this character sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>f</code> - a <code>float</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd></dl>]]></description>
        </method>
        <method>
            <name>append</name>
            <signature><![CDATA[public StringBuilder append(double d)]]></signature>
            <description><![CDATA[Appends the string representation of the double
 argument to this sequence.
 
 The overall effect is exactly as if the argument were converted
 to a string by the method String.valueOf(double),
 and the characters of that string were then
 appended to this character sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>d</code> - a <code>double</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd></dl>]]></description>
        </method>
        <method>
            <name>appendCodePoint</name>
            <signature><![CDATA[public StringBuilder appendCodePoint(int codePoint)]]></signature>
            <description><![CDATA[Appends the string representation of the codePoint
 argument to this sequence.

  The argument is appended to the contents of this sequence.
 The length of this sequence increases by
 Character.charCount(codePoint).

  The overall effect is exactly as if the argument were
 converted to a char array by the method
 Character.toChars(int) and the character in that array
 were then appended to this character
 sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>codePoint</code> - a Unicode code point</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>delete</name>
            <signature><![CDATA[public StringBuilder delete(int start,
                   int end)]]></signature>
            <description><![CDATA[Removes the characters in a substring of this sequence.
 The substring begins at the specified start and extends to
 the character at index end - 1 or to the end of the
 sequence if no such character exists. If
 start is equal to end, no changes are made.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - The beginning index, inclusive.</dd><dd><code>end</code> - The ending index, exclusive.</dd>
<dt><span class="strong">Returns:</span></dt><dd>This object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">StringIndexOutOfBoundsException</a></code> - if <code>start</code>
             is negative, greater than <code>length()</code>, or
             greater than <code>end</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>deleteCharAt</name>
            <signature><![CDATA[public StringBuilder deleteCharAt(int index)]]></signature>
            <description><![CDATA[Removes the char at the specified position in this
 sequence. This sequence is shortened by one char.

 Note: If the character at the given index is a supplementary
 character, this method does not remove the entire character. If
 correct handling of supplementary characters is required,
 determine the number of chars to remove by calling
 Character.charCount(thisSequence.codePointAt(index)),
 where thisSequence is this sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - Index of <code>char</code> to remove</dd>
<dt><span class="strong">Returns:</span></dt><dd>This object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">StringIndexOutOfBoundsException</a></code> - if the <code>index</code>
              is negative or greater than or equal to
              <code>length()</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>replace</name>
            <signature><![CDATA[public StringBuilder replace(int start,
                    int end,
                    String str)]]></signature>
            <description><![CDATA[Replaces the characters in a substring of this sequence
 with characters in the specified String. The substring
 begins at the specified start and extends to the character
 at index end - 1 or to the end of the
 sequence if no such character exists. First the
 characters in the substring are removed and then the specified
 String is inserted at start. (This
 sequence will be lengthened to accommodate the
 specified String if necessary.)<dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - The beginning index, inclusive.</dd><dd><code>end</code> - The ending index, exclusive.</dd><dd><code>str</code> - String that will replace previous contents.</dd>
<dt><span class="strong">Returns:</span></dt><dd>This object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">StringIndexOutOfBoundsException</a></code> - if <code>start</code>
             is negative, greater than <code>length()</code>, or
             greater than <code>end</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>insert</name>
            <signature><![CDATA[public StringBuilder insert(int index,
                   char[] str,
                   int offset,
                   int len)]]></signature>
            <description><![CDATA[Inserts the string representation of a subarray of the str
 array argument into this sequence. The subarray begins at the
 specified offset and extends len chars.
 The characters of the subarray are inserted into this sequence at
 the position indicated by index. The length of this
 sequence increases by len chars.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - position at which to insert subarray.</dd><dd><code>str</code> - A <code>char</code> array.</dd><dd><code>offset</code> - the index of the first <code>char</code> in subarray to
             be inserted.</dd><dd><code>len</code> - the number of <code>char</code>s in the subarray to
             be inserted.</dd>
<dt><span class="strong">Returns:</span></dt><dd>This object</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">StringIndexOutOfBoundsException</a></code> - if <code>index</code>
             is negative or greater than <code>length()</code>, or
             <code>offset</code> or <code>len</code> are negative, or
             <code>(offset+len)</code> is greater than
             <code>str.length</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>insert</name>
            <signature><![CDATA[public StringBuilder insert(int offset,
                   Object obj)]]></signature>
            <description><![CDATA[Inserts the string representation of the Object
 argument into this character sequence.
 
 The overall effect is exactly as if the second argument were
 converted to a string by the method String.valueOf(Object),
 and the characters of that string were then
 inserted into this character
 sequence at the indicated offset.
 
 The offset argument must be greater than or equal to
 0, and less than or equal to the length
 of this sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>offset</code> - the offset.</dd><dd><code>obj</code> - an <code>Object</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">StringIndexOutOfBoundsException</a></code> - if the offset is invalid.</dd></dl>]]></description>
        </method>
        <method>
            <name>insert</name>
            <signature><![CDATA[public StringBuilder insert(int offset,
                   String str)]]></signature>
            <description><![CDATA[Inserts the string into this character sequence.
 
 The characters of the String argument are inserted, in
 order, into this sequence at the indicated offset, moving up any
 characters originally above that position and increasing the length
 of this sequence by the length of the argument. If
 str is null, then the four characters
 "null" are inserted into this sequence.
 
 The character at index k in the new character sequence is
 equal to:
 
 the character at index k in the old character sequence, if
 k is less than offset
 the character at index k-offset in the
 argument str, if k is not less than
 offset but is less than offset+str.length()
 the character at index k-str.length() in the
 old character sequence, if k is not less than
 offset+str.length()
 
 The offset argument must be greater than or equal to
 0, and less than or equal to the length
 of this sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>offset</code> - the offset.</dd><dd><code>str</code> - a string.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">StringIndexOutOfBoundsException</a></code> - if the offset is invalid.</dd></dl>]]></description>
        </method>
        <method>
            <name>insert</name>
            <signature><![CDATA[public StringBuilder insert(int offset,
                   char[] str)]]></signature>
            <description><![CDATA[Inserts the string representation of the char array
 argument into this sequence.
 
 The characters of the array argument are inserted into the
 contents of this sequence at the position indicated by
 offset. The length of this sequence increases by
 the length of the argument.
 
 The overall effect is exactly as if the second argument were
 converted to a string by the method String.valueOf(char[]),
 and the characters of that string were then
 inserted into this character
 sequence at the indicated offset.
 
 The offset argument must be greater than or equal to
 0, and less than or equal to the length
 of this sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>offset</code> - the offset.</dd><dd><code>str</code> - a character array.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">StringIndexOutOfBoundsException</a></code> - if the offset is invalid.</dd></dl>]]></description>
        </method>
        <method>
            <name>insert</name>
            <signature><![CDATA[public StringBuilder insert(int dstOffset,
                   CharSequence s)]]></signature>
            <description><![CDATA[Inserts the specified CharSequence into this sequence.
 
 The characters of the CharSequence argument are inserted,
 in order, into this sequence at the indicated offset, moving up
 any characters originally above that position and increasing the length
 of this sequence by the length of the argument s.
 
 The result of this method is exactly the same as if it were an
 invocation of this object's
 insert(dstOffset, s, 0, s.length())
 method.

 If s is null, then the four characters
 "null" are inserted into this sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>dstOffset</code> - the offset.</dd><dd><code>s</code> - the sequence to be inserted</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the offset is invalid.</dd></dl>]]></description>
        </method>
        <method>
            <name>insert</name>
            <signature><![CDATA[public StringBuilder insert(int dstOffset,
                   CharSequence s,
                   int start,
                   int end)]]></signature>
            <description><![CDATA[Inserts a subsequence of the specified CharSequence into
 this sequence.
 
 The subsequence of the argument s specified by
 start and end are inserted,
 in order, into this sequence at the specified destination offset, moving
 up any characters originally above that position. The length of this
 sequence is increased by end - start.
 
 The character at index k in this sequence becomes equal to:
 
 the character at index k in this sequence, if
 k is less than dstOffset
 the character at index k+start-dstOffset in
 the argument s, if k is greater than or equal to
 dstOffset but is less than dstOffset+end-start
 the character at index k-(end-start) in this
 sequence, if k is greater than or equal to
 dstOffset+end-start
 
 The dstOffset argument must be greater than or equal to
 0, and less than or equal to the length
 of this sequence.
 The start argument must be nonnegative, and not greater than
 end.
 The end argument must be greater than or equal to
 start, and less than or equal to the length of s.

 If s is null, then this method inserts
 characters as if the s parameter was a sequence containing the four
 characters "null".<dl><dt><span class="strong">Parameters:</span></dt><dd><code>dstOffset</code> - the offset in this sequence.</dd><dd><code>s</code> - the sequence to be inserted.</dd><dd><code>start</code> - the starting index of the subsequence to be inserted.</dd><dd><code>end</code> - the end index of the subsequence to be inserted.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if <code>dstOffset</code>
             is negative or greater than <code>this.length()</code>, or
              <code>start</code> or <code>end</code> are negative, or
              <code>start</code> is greater than <code>end</code> or
              <code>end</code> is greater than <code>s.length()</code></dd></dl>]]></description>
        </method>
        <method>
            <name>insert</name>
            <signature><![CDATA[public StringBuilder insert(int offset,
                   boolean b)]]></signature>
            <description><![CDATA[Inserts the string representation of the boolean
 argument into this sequence.
 
 The overall effect is exactly as if the second argument were
 converted to a string by the method String.valueOf(boolean),
 and the characters of that string were then
 inserted into this character
 sequence at the indicated offset.
 
 The offset argument must be greater than or equal to
 0, and less than or equal to the length
 of this sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>offset</code> - the offset.</dd><dd><code>b</code> - a <code>boolean</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">StringIndexOutOfBoundsException</a></code> - if the offset is invalid.</dd></dl>]]></description>
        </method>
        <method>
            <name>insert</name>
            <signature><![CDATA[public StringBuilder insert(int offset,
                   char c)]]></signature>
            <description><![CDATA[Inserts the string representation of the char
 argument into this sequence.
 
 The overall effect is exactly as if the second argument were
 converted to a string by the method String.valueOf(char),
 and the character in that string were then
 inserted into this character
 sequence at the indicated offset.
 
 The offset argument must be greater than or equal to
 0, and less than or equal to the length
 of this sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>offset</code> - the offset.</dd><dd><code>c</code> - a <code>char</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the offset is invalid.</dd></dl>]]></description>
        </method>
        <method>
            <name>insert</name>
            <signature><![CDATA[public StringBuilder insert(int offset,
                   int i)]]></signature>
            <description><![CDATA[Inserts the string representation of the second int
 argument into this sequence.
 
 The overall effect is exactly as if the second argument were
 converted to a string by the method String.valueOf(int),
 and the characters of that string were then
 inserted into this character
 sequence at the indicated offset.
 
 The offset argument must be greater than or equal to
 0, and less than or equal to the length
 of this sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>offset</code> - the offset.</dd><dd><code>i</code> - an <code>int</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">StringIndexOutOfBoundsException</a></code> - if the offset is invalid.</dd></dl>]]></description>
        </method>
        <method>
            <name>insert</name>
            <signature><![CDATA[public StringBuilder insert(int offset,
                   long l)]]></signature>
            <description><![CDATA[Inserts the string representation of the long
 argument into this sequence.
 
 The overall effect is exactly as if the second argument were
 converted to a string by the method String.valueOf(long),
 and the characters of that string were then
 inserted into this character
 sequence at the indicated offset.
 
 The offset argument must be greater than or equal to
 0, and less than or equal to the length
 of this sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>offset</code> - the offset.</dd><dd><code>l</code> - a <code>long</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">StringIndexOutOfBoundsException</a></code> - if the offset is invalid.</dd></dl>]]></description>
        </method>
        <method>
            <name>insert</name>
            <signature><![CDATA[public StringBuilder insert(int offset,
                   float f)]]></signature>
            <description><![CDATA[Inserts the string representation of the float
 argument into this sequence.
 
 The overall effect is exactly as if the second argument were
 converted to a string by the method String.valueOf(float),
 and the characters of that string were then
 inserted into this character
 sequence at the indicated offset.
 
 The offset argument must be greater than or equal to
 0, and less than or equal to the length
 of this sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>offset</code> - the offset.</dd><dd><code>f</code> - a <code>float</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">StringIndexOutOfBoundsException</a></code> - if the offset is invalid.</dd></dl>]]></description>
        </method>
        <method>
            <name>insert</name>
            <signature><![CDATA[public StringBuilder insert(int offset,
                   double d)]]></signature>
            <description><![CDATA[Inserts the string representation of the double
 argument into this sequence.
 
 The overall effect is exactly as if the second argument were
 converted to a string by the method String.valueOf(double),
 and the characters of that string were then
 inserted into this character
 sequence at the indicated offset.
 
 The offset argument must be greater than or equal to
 0, and less than or equal to the length
 of this sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>offset</code> - the offset.</dd><dd><code>d</code> - a <code>double</code>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">StringIndexOutOfBoundsException</a></code> - if the offset is invalid.</dd></dl>]]></description>
        </method>
        <method>
            <name>indexOf</name>
            <signature><![CDATA[public int indexOf(String str)]]></signature>
            <description><![CDATA[Returns the index within this string of the first occurrence of the
 specified substring. The integer returned is the smallest value
 k such that:
 
 this.toString().startsWith(str, k)
 
 is true.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>str</code> - any string.</dd>
<dt><span class="strong">Returns:</span></dt><dd>if the string argument occurs as a substring within this
          object, then the index of the first character of the first
          such substring is returned; if it does not occur as a
          substring, <code>-1</code> is returned.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if <code>str</code> is
          <code>null</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>indexOf</name>
            <signature><![CDATA[public int indexOf(String str,
          int fromIndex)]]></signature>
            <description><![CDATA[Returns the index within this string of the first occurrence of the
 specified substring, starting at the specified index.  The integer
 returned is the smallest value k for which:
 
     k >= Math.min(fromIndex, str.length()) &&
                   this.toString().startsWith(str, k)
 
 If no such value of k exists, then -1 is returned.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>str</code> - the substring for which to search.</dd><dd><code>fromIndex</code> - the index from which to start the search.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index within this string of the first occurrence of the
          specified substring, starting at the specified index.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if <code>str</code> is
            <code>null</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>lastIndexOf</name>
            <signature><![CDATA[public int lastIndexOf(String str)]]></signature>
            <description><![CDATA[Returns the index within this string of the rightmost occurrence
 of the specified substring.  The rightmost empty string "" is
 considered to occur at the index value this.length().
 The returned index is the largest value k such that
 
 this.toString().startsWith(str, k)
 
 is true.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>str</code> - the substring to search for.</dd>
<dt><span class="strong">Returns:</span></dt><dd>if the string argument occurs one or more times as a substring
          within this object, then the index of the first character of
          the last such substring is returned. If it does not occur as
          a substring, <code>-1</code> is returned.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if <code>str</code> is
          <code>null</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>lastIndexOf</name>
            <signature><![CDATA[public int lastIndexOf(String str,
              int fromIndex)]]></signature>
            <description><![CDATA[Returns the index within this string of the last occurrence of the
 specified substring. The integer returned is the largest value k
 such that:
 
     k <= Math.min(fromIndex, str.length()) &&
                   this.toString().startsWith(str, k)
 
 If no such value of k exists, then -1 is returned.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>str</code> - the substring to search for.</dd><dd><code>fromIndex</code> - the index to start the search from.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index within this sequence of the last occurrence of the
          specified substring.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if <code>str</code> is
          <code>null</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>reverse</name>
            <signature><![CDATA[public StringBuilder reverse()]]></signature>
            <description><![CDATA[Causes this character sequence to be replaced by the reverse of
 the sequence. If there are any surrogate pairs included in the
 sequence, these are treated as single characters for the
 reverse operation. Thus, the order of the high-low surrogates
 is never reversed.

 Let n be the character length of this character sequence
 (not the length in char values) just prior to
 execution of the reverse method. Then the
 character at index k in the new character sequence is
 equal to the character at index n-k-1 in the old
 character sequence.

 Note that the reverse operation may result in producing
 surrogate pairs that were unpaired low-surrogates and
 high-surrogates before the operation. For example, reversing
 "\uDC00\uD800" produces "\uD800\uDC00" which is
 a valid surrogate pair.<dl><dt><span class="strong">Returns:</span></dt><dd>a reference to this object.</dd></dl>]]></description>
        </method>
        <method>
            <name>toString</name>
            <signature><![CDATA[public String toString()]]></signature>
            <description><![CDATA[Returns a string representing the data in this sequence.
 A new String object is allocated and initialized to
 contain the character sequence currently represented by this
 object. This String is then returned. Subsequent
 changes to this sequence do not affect the contents of the
 String.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">toString</a></code> in interface <code><a href="#">CharSequence</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>a string representation of this sequence of characters.</dd></dl>]]></description>
        </method>
        <method>
            <name>length</name>
            <signature><![CDATA[public int length()]]></signature>
            <description><![CDATA[Returns the length (character count).<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">length</a></code> in interface <code><a href="#">CharSequence</a></code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the length of the sequence of characters currently
          represented by this object</dd></dl>]]></description>
        </method>
        <method>
            <name>capacity</name>
            <signature><![CDATA[public int capacity()]]></signature>
            <description><![CDATA[Returns the current capacity. The capacity is the amount of storage
 available for newly inserted characters, beyond which an allocation
 will occur.<dl><dt><span class="strong">Returns:</span></dt><dd>the current capacity</dd></dl>]]></description>
        </method>
        <method>
            <name>ensureCapacity</name>
            <signature><![CDATA[public void ensureCapacity(int minimumCapacity)]]></signature>
            <description><![CDATA[Ensures that the capacity is at least equal to the specified minimum.
 If the current capacity is less than the argument, then a new internal
 array is allocated with greater capacity. The new capacity is the
 larger of:
 
 The minimumCapacity argument.
 Twice the old capacity, plus 2.
 
 If the minimumCapacity argument is nonpositive, this
 method takes no action and simply returns.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>minimumCapacity</code> - the minimum desired capacity.</dd></dl>]]></description>
        </method>
        <method>
            <name>trimToSize</name>
            <signature><![CDATA[public void trimToSize()]]></signature>
            <description><![CDATA[Attempts to reduce storage used for the character sequence.
 If the buffer is larger than necessary to hold its current sequence of
 characters, then it may be resized to become more space efficient.
 Calling this method may, but is not required to, affect the value
 returned by a subsequent call to the capacity() method.]]></description>
        </method>
        <method>
            <name>setLength</name>
            <signature><![CDATA[public void setLength(int newLength)]]></signature>
            <description><![CDATA[Sets the length of the character sequence.
 The sequence is changed to a new character sequence
 whose length is specified by the argument. For every nonnegative
 index k less than newLength, the character at
 index k in the new character sequence is the same as the
 character at index k in the old sequence if k is less
 than the length of the old character sequence; otherwise, it is the
 null character '\u0000'.

 In other words, if the newLength argument is less than
 the current length, the length is changed to the specified length.
 
 If the newLength argument is greater than or equal
 to the current length, sufficient null characters
 ('\u0000') are appended so that
 length becomes the newLength argument.
 
 The newLength argument must be greater than or equal
 to 0.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>newLength</code> - the new length</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the
               <code>newLength</code> argument is negative.</dd></dl>]]></description>
        </method>
        <method>
            <name>charAt</name>
            <signature><![CDATA[public char charAt(int index)]]></signature>
            <description><![CDATA[Returns the char value in this sequence at the specified index.
 The first char value is at index 0, the next at index
 1, and so on, as in array indexing.
 
 The index argument must be greater than or equal to
 0, and less than the length of this sequence.

 If the char value specified by the index is a
 surrogate, the surrogate
 value is returned.<dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">charAt</a></code> in interface <code><a href="#">CharSequence</a></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - the index of the desired <code>char</code> value.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the <code>char</code> value at the specified index.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if <code>index</code> is
             negative or greater than or equal to <code>length()</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>codePointAt</name>
            <signature><![CDATA[public int codePointAt(int index)]]></signature>
            <description><![CDATA[Returns the character (Unicode code point) at the specified
 index. The index refers to char values
 (Unicode code units) and ranges from 0 to
 length() - 1.

  If the char value specified at the given index
 is in the high-surrogate range, the following index is less
 than the length of this sequence, and the
 char value at the following index is in the
 low-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the char value at the given index is returned.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - the index to the <code>char</code> values</dd>
<dt><span class="strong">Returns:</span></dt><dd>the code point value of the character at the
             <code>index</code></dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the <code>index</code>
             argument is negative or not less than the length of this
             sequence.</dd></dl>]]></description>
        </method>
        <method>
            <name>codePointBefore</name>
            <signature><![CDATA[public int codePointBefore(int index)]]></signature>
            <description><![CDATA[Returns the character (Unicode code point) before the specified
 index. The index refers to char values
 (Unicode code units) and ranges from 1 to length().

  If the char value at (index - 1)
 is in the low-surrogate range, (index - 2) is not
 negative, and the char value at (index -
 2) is in the high-surrogate range, then the
 supplementary code point value of the surrogate pair is
 returned. If the char value at index -
 1 is an unpaired low-surrogate or a high-surrogate, the
 surrogate value is returned.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - the index following the code point that should be returned</dd>
<dt><span class="strong">Returns:</span></dt><dd>the Unicode code point value before the given index.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the <code>index</code>
            argument is less than 1 or greater than the length
            of this sequence.</dd></dl>]]></description>
        </method>
        <method>
            <name>codePointCount</name>
            <signature><![CDATA[public int codePointCount(int beginIndex,
                 int endIndex)]]></signature>
            <description><![CDATA[Returns the number of Unicode code points in the specified text
 range of this sequence. The text range begins at the specified
 beginIndex and extends to the char at
 index endIndex - 1. Thus the length (in
 chars) of the text range is
 endIndex-beginIndex. Unpaired surrogates within
 this sequence count as one code point each.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>beginIndex</code> - the index to the first <code>char</code> of
 the text range.</dd><dd><code>endIndex</code> - the index after the last <code>char</code> of
 the text range.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the number of Unicode code points in the specified text
 range</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the
 <code>beginIndex</code> is negative, or <code>endIndex</code>
 is larger than the length of this sequence, or
 <code>beginIndex</code> is larger than <code>endIndex</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>offsetByCodePoints</name>
            <signature><![CDATA[public int offsetByCodePoints(int index,
                     int codePointOffset)]]></signature>
            <description><![CDATA[Returns the index within this sequence that is offset from the
 given index by codePointOffset code
 points. Unpaired surrogates within the text range given by
 index and codePointOffset count as
 one code point each.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - the index to be offset</dd><dd><code>codePointOffset</code> - the offset in code points</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index within this sequence</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if <code>index</code>
   is negative or larger then the length of this sequence,
   or if <code>codePointOffset</code> is positive and the subsequence
   starting with <code>index</code> has fewer than
   <code>codePointOffset</code> code points,
   or if <code>codePointOffset</code> is negative and the subsequence
   before <code>index</code> has fewer than the absolute value of
   <code>codePointOffset</code> code points.</dd></dl>]]></description>
        </method>
        <method>
            <name>getChars</name>
            <signature><![CDATA[public void getChars(int srcBegin,
            int srcEnd,
            char[] dst,
            int dstBegin)]]></signature>
            <description><![CDATA[Characters are copied from this sequence into the
 destination character array dst. The first character to
 be copied is at index srcBegin; the last character to
 be copied is at index srcEnd-1. The total number of
 characters to be copied is srcEnd-srcBegin. The
 characters are copied into the subarray of dst starting
 at index dstBegin and ending at index:
 
 dstbegin + (srcEnd-srcBegin) - 1
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>srcBegin</code> - start copying at this offset.</dd><dd><code>srcEnd</code> - stop copying at this offset.</dd><dd><code>dst</code> - the array to copy the data into.</dd><dd><code>dstBegin</code> - offset into <code>dst</code>.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if <code>dst</code> is
             <code>null</code>.</dd>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if any of the following is true:
             <ul>
             <li><code>srcBegin</code> is negative
             </li><li><code>dstBegin</code> is negative
             </li><li>the <code>srcBegin</code> argument is greater than
             the <code>srcEnd</code> argument.
             </li><li><code>srcEnd</code> is greater than
             <code>this.length()</code>.
             </li><li><code>dstBegin+srcEnd-srcBegin</code> is greater than
             <code>dst.length</code>
             </li></ul></dd></dl>]]></description>
        </method>
        <method>
            <name>setCharAt</name>
            <signature><![CDATA[public void setCharAt(int index,
             char ch)]]></signature>
            <description><![CDATA[The character at the specified index is set to ch. This
 sequence is altered to represent a new character sequence that is
 identical to the old character sequence, except that it contains the
 character ch at position index.
 
 The index argument must be greater than or equal to
 0, and less than the length of this sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>index</code> - the index of the character to modify.</dd><dd><code>ch</code> - the new character.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if <code>index</code> is
             negative or greater than or equal to <code>length()</code>.</dd></dl>]]></description>
        </method>
        <method>
            <name>substring</name>
            <signature><![CDATA[public String substring(int start)]]></signature>
            <description><![CDATA[Returns a new String that contains a subsequence of
 characters currently contained in this character sequence. The
 substring begins at the specified index and extends to the end of
 this sequence.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - The beginning index, inclusive.</dd>
<dt><span class="strong">Returns:</span></dt><dd>The new string.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">StringIndexOutOfBoundsException</a></code> - if <code>start</code> is
             less than zero, or greater than the length of this object.</dd></dl>]]></description>
        </method>
        <method>
            <name>subSequence</name>
            <signature><![CDATA[public CharSequence subSequence(int start,
                       int end)]]></signature>
            <description><![CDATA[Returns a new character sequence that is a subsequence of this sequence.

  An invocation of this method of the form

 
 sb.subSequence(begin, end)

 behaves in exactly the same way as the invocation

 
 sb.substring(begin, end)

 This method is provided so that this class can
 implement the CharSequence interface. <dl>
<dt><strong>Specified by:</strong></dt>
<dd><code><a href="#">subSequence</a></code> in interface <code><a href="#">CharSequence</a></code></dd>
<dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - the start index, inclusive.</dd><dd><code>end</code> - the end index, exclusive.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the specified subsequence.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if <tt>start</tt> or <tt>end</tt> are negative,
          if <tt>end</tt> is greater than <tt>length()</tt>,
          or if <tt>start</tt> is greater than <tt>end</tt></dd></dl>]]></description>
        </method>
        <method>
            <name>substring</name>
            <signature><![CDATA[public String substring(int start,
               int end)]]></signature>
            <description><![CDATA[Returns a new String that contains a subsequence of
 characters currently contained in this sequence. The
 substring begins at the specified start and
 extends to the character at index end - 1.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - The beginning index, inclusive.</dd><dd><code>end</code> - The ending index, exclusive.</dd>
<dt><span class="strong">Returns:</span></dt><dd>The new string.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">StringIndexOutOfBoundsException</a></code> - if <code>start</code>
             or <code>end</code> are negative or greater than
             <code>length()</code>, or <code>start</code> is
             greater than <code>end</code>.</dd></dl>]]></description>
        </method>
    </methods>
</Root>

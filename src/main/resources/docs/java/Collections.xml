<?xml version="1.0" encoding="UTF-8"?>
<Root name="java.util.Collections">
    <fields>
        <field>
            <name>EMPTY_SET</name>
            <signature><![CDATA[public static final Set EMPTY_SET]]></signature>
            <description><![CDATA[The empty set (immutable).  This set is serializable.<dl><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>emptySet()</code></a></dd></dl>]]></description>
        </field>
        <field>
            <name>EMPTY_LIST</name>
            <signature><![CDATA[public static final List EMPTY_LIST]]></signature>
            <description><![CDATA[The empty list (immutable).  This list is serializable.<dl><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>emptyList()</code></a></dd></dl>]]></description>
        </field>
        <field>
            <name>EMPTY_MAP</name>
            <signature><![CDATA[public static final Map EMPTY_MAP]]></signature>
            <description><![CDATA[The empty map (immutable).  This map is serializable.<dl><dt><span class="strong">Since:</span></dt>
  <dd>1.3</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>emptyMap()</code></a></dd></dl>]]></description>
        </field>
    </fields>
    <methods>
        <method>
            <name>sort</name>
            <signature><![CDATA[public static <T extends Comparable<? super T>> void sort(List<T> list)]]></signature>
            <description><![CDATA[Sorts the specified list into ascending order, according to the
 natural ordering of its elements.
 All elements in the list must implement the Comparable
 interface.  Furthermore, all elements in the list must be
 mutually comparable (that is, e1.compareTo(e2)
 must not throw a ClassCastException for any elements
 e1 and e2 in the list).

 This sort is guaranteed to be stable:  equal elements will
 not be reordered as a result of the sort.

 The specified list must be modifiable, but need not be resizable.

 Implementation note: This implementation is a stable, adaptive,
 iterative mergesort that requires far fewer than n lg(n) comparisons
 when the input array is partially sorted, while offering the
 performance of a traditional mergesort when the input array is
 randomly ordered.  If the input array is nearly sorted, the
 implementation requires approximately n comparisons.  Temporary
 storage requirements vary from a small constant for nearly sorted
 input arrays to n/2 object references for randomly ordered input
 arrays.

 The implementation takes equal advantage of ascending and
 descending order in its input array, and can take advantage of
 ascending and descending order in different parts of the same
 input array.  It is well-suited to merging two or more sorted arrays:
 simply concatenate the arrays and sort the resulting array.

 The implementation was adapted from Tim Peters's list sort for Python
 (
 TimSort).  It uses techiques from Peter McIlroy's "Optimistic
 Sorting and Information Theoretic Complexity", in Proceedings of the
 Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,
 January 1993.

 This implementation dumps the specified list into an array, sorts
 the array, and iterates over the list resetting each element
 from the corresponding position in the array.  This avoids the
 n2 log(n) performance that would result from attempting
 to sort a linked list in place.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>list</code> - the list to be sorted.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">ClassCastException</a></code> - if the list contains elements that are not
         <i>mutually comparable</i> (for example, strings and integers).</dd>
<dd><code><a href="#">UnsupportedOperationException</a></code> - if the specified list's
         list-iterator does not support the <code>set</code> operation.</dd>
<dd><code><a href="#">IllegalArgumentException</a></code> - (optional) if the implementation
         detects that the natural ordering of the list elements is
         found to violate the <a href="#"><code>Comparable</code></a> contract</dd></dl>]]></description>
        </method>
        <method>
            <name>sort</name>
            <signature><![CDATA[public static <T> void sort(List<T> list,
            Comparator<? super T> c)]]></signature>
            <description><![CDATA[Sorts the specified list according to the order induced by the
 specified comparator.  All elements in the list must be mutually
 comparable using the specified comparator (that is,
 c.compare(e1, e2) must not throw a ClassCastException
 for any elements e1 and e2 in the list).

 This sort is guaranteed to be stable:  equal elements will
 not be reordered as a result of the sort.

 The specified list must be modifiable, but need not be resizable.

 Implementation note: This implementation is a stable, adaptive,
 iterative mergesort that requires far fewer than n lg(n) comparisons
 when the input array is partially sorted, while offering the
 performance of a traditional mergesort when the input array is
 randomly ordered.  If the input array is nearly sorted, the
 implementation requires approximately n comparisons.  Temporary
 storage requirements vary from a small constant for nearly sorted
 input arrays to n/2 object references for randomly ordered input
 arrays.

 The implementation takes equal advantage of ascending and
 descending order in its input array, and can take advantage of
 ascending and descending order in different parts of the same
 input array.  It is well-suited to merging two or more sorted arrays:
 simply concatenate the arrays and sort the resulting array.

 The implementation was adapted from Tim Peters's list sort for Python
 (
 TimSort).  It uses techiques from Peter McIlroy's "Optimistic
 Sorting and Information Theoretic Complexity", in Proceedings of the
 Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,
 January 1993.

 This implementation dumps the specified list into an array, sorts
 the array, and iterates over the list resetting each element
 from the corresponding position in the array.  This avoids the
 n2 log(n) performance that would result from attempting
 to sort a linked list in place.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>list</code> - the list to be sorted.</dd><dd><code>c</code> - the comparator to determine the order of the list.  A
        <code>null</code> value indicates that the elements' <i>natural
        ordering</i> should be used.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">ClassCastException</a></code> - if the list contains elements that are not
         <i>mutually comparable</i> using the specified comparator.</dd>
<dd><code><a href="#">UnsupportedOperationException</a></code> - if the specified list's
         list-iterator does not support the <code>set</code> operation.</dd>
<dd><code><a href="#">IllegalArgumentException</a></code> - (optional) if the comparator is
         found to violate the <a href="#"><code>Comparator</code></a> contract</dd></dl>]]></description>
        </method>
        <method>
            <name>binarySearch</name>
            <signature><![CDATA[public static <T> int binarySearch(List<? extends Comparable<? super T>> list,
                   T key)]]></signature>
            <description><![CDATA[Searches the specified list for the specified object using the binary
 search algorithm.  The list must be sorted into ascending order
 according to the natural ordering of its
 elements (as by the sort(List) method) prior to making this
 call.  If it is not sorted, the results are undefined.  If the list
 contains multiple elements equal to the specified object, there is no
 guarantee which one will be found.

 This method runs in log(n) time for a "random access" list (which
 provides near-constant-time positional access).  If the specified list
 does not implement the RandomAccess interface and is large,
 this method will do an iterator-based binary search that performs
 O(n) link traversals and O(log n) element comparisons.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>list</code> - the list to be searched.</dd><dd><code>key</code> - the key to be searched for.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index of the search key, if it is contained in the list;
         otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
         <i>insertion point</i> is defined as the point at which the
         key would be inserted into the list: the index of the first
         element greater than the key, or <tt>list.size()</tt> if all
         elements in the list are less than the specified key.  Note
         that this guarantees that the return value will be >= 0 if
         and only if the key is found.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">ClassCastException</a></code> - if the list contains elements that are not
         <i>mutually comparable</i> (for example, strings and
         integers), or the search key is not mutually comparable
         with the elements of the list.</dd></dl>]]></description>
        </method>
        <method>
            <name>binarySearch</name>
            <signature><![CDATA[public static <T> int binarySearch(List<? extends T> list,
                   T key,
                   Comparator<? super T> c)]]></signature>
            <description><![CDATA[Searches the specified list for the specified object using the binary
 search algorithm.  The list must be sorted into ascending order
 according to the specified comparator (as by the
 sort(List, Comparator)
 method), prior to making this call.  If it is
 not sorted, the results are undefined.  If the list contains multiple
 elements equal to the specified object, there is no guarantee which one
 will be found.

 This method runs in log(n) time for a "random access" list (which
 provides near-constant-time positional access).  If the specified list
 does not implement the RandomAccess interface and is large,
 this method will do an iterator-based binary search that performs
 O(n) link traversals and O(log n) element comparisons.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>list</code> - the list to be searched.</dd><dd><code>key</code> - the key to be searched for.</dd><dd><code>c</code> - the comparator by which the list is ordered.
         A <tt>null</tt> value indicates that the elements'
         <a href="#">natural ordering</a> should be used.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index of the search key, if it is contained in the list;
         otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
         <i>insertion point</i> is defined as the point at which the
         key would be inserted into the list: the index of the first
         element greater than the key, or <tt>list.size()</tt> if all
         elements in the list are less than the specified key.  Note
         that this guarantees that the return value will be >= 0 if
         and only if the key is found.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">ClassCastException</a></code> - if the list contains elements that are not
         <i>mutually comparable</i> using the specified comparator,
         or the search key is not mutually comparable with the
         elements of the list using this comparator.</dd></dl>]]></description>
        </method>
        <method>
            <name>reverse</name>
            <signature><![CDATA[public static void reverse(List<?> list)]]></signature>
            <description><![CDATA[Reverses the order of the elements in the specified list.

 This method runs in linear time.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>list</code> - the list whose elements are to be reversed.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">UnsupportedOperationException</a></code> - if the specified list or
         its list-iterator does not support the <tt>set</tt> operation.</dd></dl>]]></description>
        </method>
        <method>
            <name>shuffle</name>
            <signature><![CDATA[public static void shuffle(List<?> list)]]></signature>
            <description><![CDATA[Randomly permutes the specified list using a default source of
 randomness.  All permutations occur with approximately equal
 likelihood.

 The hedge "approximately" is used in the foregoing description because
 default source of randomness is only approximately an unbiased source
 of independently chosen bits. If it were a perfect source of randomly
 chosen bits, then the algorithm would choose permutations with perfect
 uniformity.

 This implementation traverses the list backwards, from the last element
 up to the second, repeatedly swapping a randomly selected element into
 the "current position".  Elements are randomly selected from the
 portion of the list that runs from the first element to the current
 position, inclusive.

 This method runs in linear time.  If the specified list does not
 implement the RandomAccess interface and is large, this
 implementation dumps the specified list into an array before shuffling
 it, and dumps the shuffled array back into the list.  This avoids the
 quadratic behavior that would result from shuffling a "sequential
 access" list in place.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>list</code> - the list to be shuffled.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">UnsupportedOperationException</a></code> - if the specified list or
         its list-iterator does not support the <tt>set</tt> operation.</dd></dl>]]></description>
        </method>
        <method>
            <name>shuffle</name>
            <signature><![CDATA[public static void shuffle(List<?> list,
           Random rnd)]]></signature>
            <description><![CDATA[Randomly permute the specified list using the specified source of
 randomness.  All permutations occur with equal likelihood
 assuming that the source of randomness is fair.

 This implementation traverses the list backwards, from the last element
 up to the second, repeatedly swapping a randomly selected element into
 the "current position".  Elements are randomly selected from the
 portion of the list that runs from the first element to the current
 position, inclusive.

 This method runs in linear time.  If the specified list does not
 implement the RandomAccess interface and is large, this
 implementation dumps the specified list into an array before shuffling
 it, and dumps the shuffled array back into the list.  This avoids the
 quadratic behavior that would result from shuffling a "sequential
 access" list in place.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>list</code> - the list to be shuffled.</dd><dd><code>rnd</code> - the source of randomness to use to shuffle the list.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">UnsupportedOperationException</a></code> - if the specified list or its
         list-iterator does not support the <tt>set</tt> operation.</dd></dl>]]></description>
        </method>
        <method>
            <name>swap</name>
            <signature><![CDATA[public static void swap(List<?> list,
        int i,
        int j)]]></signature>
            <description><![CDATA[Swaps the elements at the specified positions in the specified list.
 (If the specified positions are equal, invoking this method leaves
 the list unchanged.)<dl><dt><span class="strong">Parameters:</span></dt><dd><code>list</code> - The list in which to swap elements.</dd><dd><code>i</code> - the index of one element to be swapped.</dd><dd><code>j</code> - the index of the other element to be swapped.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if either <tt>i</tt> or <tt>j</tt>
         is out of range (i < 0 || i >= list.size()
         || j < 0 || j >= list.size()).</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.4</dd></dl>]]></description>
        </method>
        <method>
            <name>fill</name>
            <signature><![CDATA[public static <T> void fill(List<? super T> list,
            T obj)]]></signature>
            <description><![CDATA[Replaces all of the elements of the specified list with the specified
 element. 

 This method runs in linear time.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>list</code> - the list to be filled with the specified element.</dd><dd><code>obj</code> - The element with which to fill the specified list.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">UnsupportedOperationException</a></code> - if the specified list or its
         list-iterator does not support the <tt>set</tt> operation.</dd></dl>]]></description>
        </method>
        <method>
            <name>copy</name>
            <signature><![CDATA[public static <T> void copy(List<? super T> dest,
            List<? extends T> src)]]></signature>
            <description><![CDATA[Copies all of the elements from one list into another.  After the
 operation, the index of each copied element in the destination list
 will be identical to its index in the source list.  The destination
 list must be at least as long as the source list.  If it is longer, the
 remaining elements in the destination list are unaffected. 

 This method runs in linear time.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>dest</code> - The destination list.</dd><dd><code>src</code> - The source list.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IndexOutOfBoundsException</a></code> - if the destination list is too small
         to contain the entire source List.</dd>
<dd><code><a href="#">UnsupportedOperationException</a></code> - if the destination list's
         list-iterator does not support the <tt>set</tt> operation.</dd></dl>]]></description>
        </method>
        <method>
            <name>min</name>
            <signature><![CDATA[public static <T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll)]]></signature>
            <description><![CDATA[Returns the minimum element of the given collection, according to the
 natural ordering of its elements.  All elements in the
 collection must implement the Comparable interface.
 Furthermore, all elements in the collection must be mutually
 comparable (that is, e1.compareTo(e2) must not throw a
 ClassCastException for any elements e1 and
 e2 in the collection).

 This method iterates over the entire collection, hence it requires
 time proportional to the size of the collection.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>coll</code> - the collection whose minimum element is to be determined.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the minimum element of the given collection, according
         to the <i>natural ordering</i> of its elements.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">ClassCastException</a></code> - if the collection contains elements that are
         not <i>mutually comparable</i> (for example, strings and
         integers).</dd>
<dd><code><a href="#">NoSuchElementException</a></code> - if the collection is empty.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Comparable</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>min</name>
            <signature><![CDATA[public static <T> T min(Collection<? extends T> coll,
        Comparator<? super T> comp)]]></signature>
            <description><![CDATA[Returns the minimum element of the given collection, according to the
 order induced by the specified comparator.  All elements in the
 collection must be mutually comparable by the specified
 comparator (that is, comp.compare(e1, e2) must not throw a
 ClassCastException for any elements e1 and
 e2 in the collection).

 This method iterates over the entire collection, hence it requires
 time proportional to the size of the collection.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>coll</code> - the collection whose minimum element is to be determined.</dd><dd><code>comp</code> - the comparator with which to determine the minimum element.
         A <tt>null</tt> value indicates that the elements' <i>natural
         ordering</i> should be used.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the minimum element of the given collection, according
         to the specified comparator.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">ClassCastException</a></code> - if the collection contains elements that are
         not <i>mutually comparable</i> using the specified comparator.</dd>
<dd><code><a href="#">NoSuchElementException</a></code> - if the collection is empty.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Comparable</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>max</name>
            <signature><![CDATA[public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll)]]></signature>
            <description><![CDATA[Returns the maximum element of the given collection, according to the
 natural ordering of its elements.  All elements in the
 collection must implement the Comparable interface.
 Furthermore, all elements in the collection must be mutually
 comparable (that is, e1.compareTo(e2) must not throw a
 ClassCastException for any elements e1 and
 e2 in the collection).

 This method iterates over the entire collection, hence it requires
 time proportional to the size of the collection.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>coll</code> - the collection whose maximum element is to be determined.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the maximum element of the given collection, according
         to the <i>natural ordering</i> of its elements.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">ClassCastException</a></code> - if the collection contains elements that are
         not <i>mutually comparable</i> (for example, strings and
         integers).</dd>
<dd><code><a href="#">NoSuchElementException</a></code> - if the collection is empty.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Comparable</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>max</name>
            <signature><![CDATA[public static <T> T max(Collection<? extends T> coll,
        Comparator<? super T> comp)]]></signature>
            <description><![CDATA[Returns the maximum element of the given collection, according to the
 order induced by the specified comparator.  All elements in the
 collection must be mutually comparable by the specified
 comparator (that is, comp.compare(e1, e2) must not throw a
 ClassCastException for any elements e1 and
 e2 in the collection).

 This method iterates over the entire collection, hence it requires
 time proportional to the size of the collection.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>coll</code> - the collection whose maximum element is to be determined.</dd><dd><code>comp</code> - the comparator with which to determine the maximum element.
         A <tt>null</tt> value indicates that the elements' <i>natural
        ordering</i> should be used.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the maximum element of the given collection, according
         to the specified comparator.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">ClassCastException</a></code> - if the collection contains elements that are
         not <i>mutually comparable</i> using the specified comparator.</dd>
<dd><code><a href="#">NoSuchElementException</a></code> - if the collection is empty.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Comparable</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>rotate</name>
            <signature><![CDATA[public static void rotate(List<?> list,
          int distance)]]></signature>
            <description><![CDATA[Rotates the elements in the specified list by the specified distance.
 After calling this method, the element at index i will be
 the element previously at index (i - distance) mod
 list.size(), for all values of i between 0
 and list.size()-1, inclusive.  (This method has no effect on
 the size of the list.)

 For example, suppose list comprises [t, a, n, k, s].
 After invoking Collections.rotate(list, 1) (or
 Collections.rotate(list, -4)), list will comprise
 [s, t, a, n, k].

 Note that this method can usefully be applied to sublists to
 move one or more elements within a list while preserving the
 order of the remaining elements.  For example, the following idiom
 moves the element at index j forward to position
 k (which must be greater than or equal to j):
 
     Collections.rotate(list.subList(j, k+1), -1);
 
 To make this concrete, suppose list comprises
 [a, b, c, d, e].  To move the element at index 1
 (b) forward two positions, perform the following invocation:
 
     Collections.rotate(l.subList(1, 4), -1);
 
 The resulting list is [a, c, d, b, e].

 To move more than one element forward, increase the absolute value
 of the rotation distance.  To move elements backward, use a positive
 shift distance.

 If the specified list is small or implements the RandomAccess interface, this implementation exchanges the first
 element into the location it should go, and then repeatedly exchanges
 the displaced element into the location it should go until a displaced
 element is swapped into the first element.  If necessary, the process
 is repeated on the second and successive elements, until the rotation
 is complete.  If the specified list is large and doesn't implement the
 RandomAccess interface, this implementation breaks the
 list into two sublist views around index -distance mod size.
 Then the reverse(List) method is invoked on each sublist view,
 and finally it is invoked on the entire list.  For a more complete
 description of both algorithms, see Section 2.3 of Jon Bentley's
 Programming Pearls (Addison-Wesley, 1986).<dl><dt><span class="strong">Parameters:</span></dt><dd><code>list</code> - the list to be rotated.</dd><dd><code>distance</code> - the distance to rotate the list.  There are no
        constraints on this value; it may be zero, negative, or
        greater than <tt>list.size()</tt>.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">UnsupportedOperationException</a></code> - if the specified list or
         its list-iterator does not support the <tt>set</tt> operation.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.4</dd></dl>]]></description>
        </method>
        <method>
            <name>replaceAll</name>
            <signature><![CDATA[public static <T> boolean replaceAll(List<T> list,
                     T oldVal,
                     T newVal)]]></signature>
            <description><![CDATA[Replaces all occurrences of one specified value in a list with another.
 More formally, replaces with newVal each element e
 in list such that
 (oldVal==null ? e==null : oldVal.equals(e)).
 (This method has no effect on the size of the list.)<dl><dt><span class="strong">Parameters:</span></dt><dd><code>list</code> - the list in which replacement is to occur.</dd><dd><code>oldVal</code> - the old value to be replaced.</dd><dd><code>newVal</code> - the new value with which <tt>oldVal</tt> is to be
        replaced.</dd>
<dt><span class="strong">Returns:</span></dt><dd><tt>true</tt> if <tt>list</tt> contained one or more elements
         <tt>e</tt> such that
         <tt>(oldVal==null ?  e==null : oldVal.equals(e))</tt>.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">UnsupportedOperationException</a></code> - if the specified list or
         its list-iterator does not support the <tt>set</tt> operation.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.4</dd></dl>]]></description>
        </method>
        <method>
            <name>indexOfSubList</name>
            <signature><![CDATA[public static int indexOfSubList(List<?> source,
                 List<?> target)]]></signature>
            <description><![CDATA[Returns the starting position of the first occurrence of the specified
 target list within the specified source list, or -1 if there is no
 such occurrence.  More formally, returns the lowest index i
 such that source.subList(i, i+target.size()).equals(target),
 or -1 if there is no such index.  (Returns -1 if
 target.size() > source.size().)

 This implementation uses the "brute force" technique of scanning
 over the source list, looking for a match with the target at each
 location in turn.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>source</code> - the list in which to search for the first occurrence
        of <tt>target</tt>.</dd><dd><code>target</code> - the list to search for as a subList of <tt>source</tt>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the starting position of the first occurrence of the specified
         target list within the specified source list, or -1 if there
         is no such occurrence.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.4</dd></dl>]]></description>
        </method>
        <method>
            <name>lastIndexOfSubList</name>
            <signature><![CDATA[public static int lastIndexOfSubList(List<?> source,
                     List<?> target)]]></signature>
            <description><![CDATA[Returns the starting position of the last occurrence of the specified
 target list within the specified source list, or -1 if there is no such
 occurrence.  More formally, returns the highest index i
 such that source.subList(i, i+target.size()).equals(target),
 or -1 if there is no such index.  (Returns -1 if
 target.size() > source.size().)

 This implementation uses the "brute force" technique of iterating
 over the source list, looking for a match with the target at each
 location in turn.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>source</code> - the list in which to search for the last occurrence
        of <tt>target</tt>.</dd><dd><code>target</code> - the list to search for as a subList of <tt>source</tt>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the starting position of the last occurrence of the specified
         target list within the specified source list, or -1 if there
         is no such occurrence.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.4</dd></dl>]]></description>
        </method>
        <method>
            <name>unmodifiableCollection</name>
            <signature><![CDATA[public static <T> Collection<T> unmodifiableCollection(Collection<? extends T> c)]]></signature>
            <description><![CDATA[Returns an unmodifiable view of the specified collection.  This method
 allows modules to provide users with "read-only" access to internal
 collections.  Query operations on the returned collection "read through"
 to the specified collection, and attempts to modify the returned
 collection, whether direct or via its iterator, result in an
 UnsupportedOperationException.

 The returned collection does not pass the hashCode and equals
 operations through to the backing collection, but relies on
 Object's equals and hashCode methods.  This
 is necessary to preserve the contracts of these operations in the case
 that the backing collection is a set or a list.

 The returned collection will be serializable if the specified collection
 is serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>c</code> - the collection for which an unmodifiable view is to be
         returned.</dd>
<dt><span class="strong">Returns:</span></dt><dd>an unmodifiable view of the specified collection.</dd></dl>]]></description>
        </method>
        <method>
            <name>unmodifiableSet</name>
            <signature><![CDATA[public static <T> Set<T> unmodifiableSet(Set<? extends T> s)]]></signature>
            <description><![CDATA[Returns an unmodifiable view of the specified set.  This method allows
 modules to provide users with "read-only" access to internal sets.
 Query operations on the returned set "read through" to the specified
 set, and attempts to modify the returned set, whether direct or via its
 iterator, result in an UnsupportedOperationException.

 The returned set will be serializable if the specified set
 is serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - the set for which an unmodifiable view is to be returned.</dd>
<dt><span class="strong">Returns:</span></dt><dd>an unmodifiable view of the specified set.</dd></dl>]]></description>
        </method>
        <method>
            <name>unmodifiableSortedSet</name>
            <signature><![CDATA[public static <T> SortedSet<T> unmodifiableSortedSet(SortedSet<T> s)]]></signature>
            <description><![CDATA[Returns an unmodifiable view of the specified sorted set.  This method
 allows modules to provide users with "read-only" access to internal
 sorted sets.  Query operations on the returned sorted set "read
 through" to the specified sorted set.  Attempts to modify the returned
 sorted set, whether direct, via its iterator, or via its
 subSet, headSet, or tailSet views, result in
 an UnsupportedOperationException.

 The returned sorted set will be serializable if the specified sorted set
 is serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - the sorted set for which an unmodifiable view is to be
        returned.</dd>
<dt><span class="strong">Returns:</span></dt><dd>an unmodifiable view of the specified sorted set.</dd></dl>]]></description>
        </method>
        <method>
            <name>unmodifiableList</name>
            <signature><![CDATA[public static <T> List<T> unmodifiableList(List<? extends T> list)]]></signature>
            <description><![CDATA[Returns an unmodifiable view of the specified list.  This method allows
 modules to provide users with "read-only" access to internal
 lists.  Query operations on the returned list "read through" to the
 specified list, and attempts to modify the returned list, whether
 direct or via its iterator, result in an
 UnsupportedOperationException.

 The returned list will be serializable if the specified list
 is serializable. Similarly, the returned list will implement
 RandomAccess if the specified list does.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>list</code> - the list for which an unmodifiable view is to be returned.</dd>
<dt><span class="strong">Returns:</span></dt><dd>an unmodifiable view of the specified list.</dd></dl>]]></description>
        </method>
        <method>
            <name>unmodifiableMap</name>
            <signature><![CDATA[public static <K,V> Map<K,V> unmodifiableMap(Map<? extends K,? extends V> m)]]></signature>
            <description><![CDATA[Returns an unmodifiable view of the specified map.  This method
 allows modules to provide users with "read-only" access to internal
 maps.  Query operations on the returned map "read through"
 to the specified map, and attempts to modify the returned
 map, whether direct or via its collection views, result in an
 UnsupportedOperationException.

 The returned map will be serializable if the specified map
 is serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>m</code> - the map for which an unmodifiable view is to be returned.</dd>
<dt><span class="strong">Returns:</span></dt><dd>an unmodifiable view of the specified map.</dd></dl>]]></description>
        </method>
        <method>
            <name>unmodifiableSortedMap</name>
            <signature><![CDATA[public static <K,V> SortedMap<K,V> unmodifiableSortedMap(SortedMap<K,? extends V> m)]]></signature>
            <description><![CDATA[Returns an unmodifiable view of the specified sorted map.  This method
 allows modules to provide users with "read-only" access to internal
 sorted maps.  Query operations on the returned sorted map "read through"
 to the specified sorted map.  Attempts to modify the returned
 sorted map, whether direct, via its collection views, or via its
 subMap, headMap, or tailMap views, result in
 an UnsupportedOperationException.

 The returned sorted map will be serializable if the specified sorted map
 is serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>m</code> - the sorted map for which an unmodifiable view is to be
        returned.</dd>
<dt><span class="strong">Returns:</span></dt><dd>an unmodifiable view of the specified sorted map.</dd></dl>]]></description>
        </method>
        <method>
            <name>synchronizedCollection</name>
            <signature><![CDATA[public static <T> Collection<T> synchronizedCollection(Collection<T> c)]]></signature>
            <description><![CDATA[Returns a synchronized (thread-safe) collection backed by the specified
 collection.  In order to guarantee serial access, it is critical that
 all access to the backing collection is accomplished
 through the returned collection.

 It is imperative that the user manually synchronize on the returned
 collection when iterating over it:
 
  Collection c = Collections.synchronizedCollection(myCollection);
     ...
  synchronized (c) {
      Iterator i = c.iterator(); // Must be in the synchronized block
      while (i.hasNext())
         foo(i.next());
  }
 
 Failure to follow this advice may result in non-deterministic behavior.

 The returned collection does not pass the hashCode
 and equals operations through to the backing collection, but
 relies on Object's equals and hashCode methods.  This is
 necessary to preserve the contracts of these operations in the case
 that the backing collection is a set or a list.

 The returned collection will be serializable if the specified collection
 is serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>c</code> - the collection to be "wrapped" in a synchronized collection.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a synchronized view of the specified collection.</dd></dl>]]></description>
        </method>
        <method>
            <name>synchronizedSet</name>
            <signature><![CDATA[public static <T> Set<T> synchronizedSet(Set<T> s)]]></signature>
            <description><![CDATA[Returns a synchronized (thread-safe) set backed by the specified
 set.  In order to guarantee serial access, it is critical that
 all access to the backing set is accomplished
 through the returned set.

 It is imperative that the user manually synchronize on the returned
 set when iterating over it:
 
  Set s = Collections.synchronizedSet(new HashSet());
      ...
  synchronized (s) {
      Iterator i = s.iterator(); // Must be in the synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 
 Failure to follow this advice may result in non-deterministic behavior.

 The returned set will be serializable if the specified set is
 serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - the set to be "wrapped" in a synchronized set.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a synchronized view of the specified set.</dd></dl>]]></description>
        </method>
        <method>
            <name>synchronizedSortedSet</name>
            <signature><![CDATA[public static <T> SortedSet<T> synchronizedSortedSet(SortedSet<T> s)]]></signature>
            <description><![CDATA[Returns a synchronized (thread-safe) sorted set backed by the specified
 sorted set.  In order to guarantee serial access, it is critical that
 all access to the backing sorted set is accomplished
 through the returned sorted set (or its views).

 It is imperative that the user manually synchronize on the returned
 sorted set when iterating over it or any of its subSet,
 headSet, or tailSet views.
 
  SortedSet s = Collections.synchronizedSortedSet(new TreeSet());
      ...
  synchronized (s) {
      Iterator i = s.iterator(); // Must be in the synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 
 or:
 
  SortedSet s = Collections.synchronizedSortedSet(new TreeSet());
  SortedSet s2 = s.headSet(foo);
      ...
  synchronized (s) {  // Note: s, not s2!!!
      Iterator i = s2.iterator(); // Must be in the synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 
 Failure to follow this advice may result in non-deterministic behavior.

 The returned sorted set will be serializable if the specified
 sorted set is serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - the sorted set to be "wrapped" in a synchronized sorted set.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a synchronized view of the specified sorted set.</dd></dl>]]></description>
        </method>
        <method>
            <name>synchronizedList</name>
            <signature><![CDATA[public static <T> List<T> synchronizedList(List<T> list)]]></signature>
            <description><![CDATA[Returns a synchronized (thread-safe) list backed by the specified
 list.  In order to guarantee serial access, it is critical that
 all access to the backing list is accomplished
 through the returned list.

 It is imperative that the user manually synchronize on the returned
 list when iterating over it:
 
  List list = Collections.synchronizedList(new ArrayList());
      ...
  synchronized (list) {
      Iterator i = list.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 
 Failure to follow this advice may result in non-deterministic behavior.

 The returned list will be serializable if the specified list is
 serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>list</code> - the list to be "wrapped" in a synchronized list.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a synchronized view of the specified list.</dd></dl>]]></description>
        </method>
        <method>
            <name>synchronizedMap</name>
            <signature><![CDATA[public static <K,V> Map<K,V> synchronizedMap(Map<K,V> m)]]></signature>
            <description><![CDATA[Returns a synchronized (thread-safe) map backed by the specified
 map.  In order to guarantee serial access, it is critical that
 all access to the backing map is accomplished
 through the returned map.

 It is imperative that the user manually synchronize on the returned
 map when iterating over any of its collection views:
 
  Map m = Collections.synchronizedMap(new HashMap());
      ...
  Set s = m.keySet();  // Needn't be in synchronized block
      ...
  synchronized (m) {  // Synchronizing on m, not s!
      Iterator i = s.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 
 Failure to follow this advice may result in non-deterministic behavior.

 The returned map will be serializable if the specified map is
 serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>m</code> - the map to be "wrapped" in a synchronized map.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a synchronized view of the specified map.</dd></dl>]]></description>
        </method>
        <method>
            <name>synchronizedSortedMap</name>
            <signature><![CDATA[public static <K,V> SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V> m)]]></signature>
            <description><![CDATA[Returns a synchronized (thread-safe) sorted map backed by the specified
 sorted map.  In order to guarantee serial access, it is critical that
 all access to the backing sorted map is accomplished
 through the returned sorted map (or its views).

 It is imperative that the user manually synchronize on the returned
 sorted map when iterating over any of its collection views, or the
 collections views of any of its subMap, headMap or
 tailMap views.
 
  SortedMap m = Collections.synchronizedSortedMap(new TreeMap());
      ...
  Set s = m.keySet();  // Needn't be in synchronized block
      ...
  synchronized (m) {  // Synchronizing on m, not s!
      Iterator i = s.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 
 or:
 
  SortedMap m = Collections.synchronizedSortedMap(new TreeMap());
  SortedMap m2 = m.subMap(foo, bar);
      ...
  Set s2 = m2.keySet();  // Needn't be in synchronized block
      ...
  synchronized (m) {  // Synchronizing on m, not m2 or s2!
      Iterator i = s.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 
 Failure to follow this advice may result in non-deterministic behavior.

 The returned sorted map will be serializable if the specified
 sorted map is serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>m</code> - the sorted map to be "wrapped" in a synchronized sorted map.</dd>
<dt><span class="strong">Returns:</span></dt><dd>a synchronized view of the specified sorted map.</dd></dl>]]></description>
        </method>
        <method>
            <name>checkedCollection</name>
            <signature><![CDATA[public static <E> Collection<E> checkedCollection(Collection<E> c,
                                  Class<E> type)]]></signature>
            <description><![CDATA[Returns a dynamically typesafe view of the specified collection.
 Any attempt to insert an element of the wrong type will result in an
 immediate ClassCastException.  Assuming a collection
 contains no incorrectly typed elements prior to the time a
 dynamically typesafe view is generated, and that all subsequent
 access to the collection takes place through the view, it is
 guaranteed that the collection cannot contain an incorrectly
 typed element.

 The generics mechanism in the language provides compile-time
 (static) type checking, but it is possible to defeat this mechanism
 with unchecked casts.  Usually this is not a problem, as the compiler
 issues warnings on all such unchecked operations.  There are, however,
 times when static type checking alone is not sufficient.  For example,
 suppose a collection is passed to a third-party library and it is
 imperative that the library code not corrupt the collection by
 inserting an element of the wrong type.

 Another use of dynamically typesafe views is debugging.  Suppose a
 program fails with a ClassCastException, indicating that an
 incorrectly typed element was put into a parameterized collection.
 Unfortunately, the exception can occur at any time after the erroneous
 element is inserted, so it typically provides little or no information
 as to the real source of the problem.  If the problem is reproducible,
 one can quickly determine its source by temporarily modifying the
 program to wrap the collection with a dynamically typesafe view.
 For example, this declaration:
   Collection<String> c = new HashSet<String>();
 
 may be replaced temporarily by this one:
   Collection<String> c = Collections.checkedCollection(
         new HashSet<String>(), String.class);
 
 Running the program again will cause it to fail at the point where
 an incorrectly typed element is inserted into the collection, clearly
 identifying the source of the problem.  Once the problem is fixed, the
 modified declaration may be reverted back to the original.

 The returned collection does not pass the hashCode and equals
 operations through to the backing collection, but relies on
 Object's equals and hashCode methods.  This
 is necessary to preserve the contracts of these operations in the case
 that the backing collection is a set or a list.

 The returned collection will be serializable if the specified
 collection is serializable.

 Since null is considered to be a value of any reference
 type, the returned collection permits insertion of null elements
 whenever the backing collection does.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>c</code> - the collection for which a dynamically typesafe view is to be
          returned</dd><dd><code>type</code> - the type of element that <code>c</code> is permitted to hold</dd>
<dt><span class="strong">Returns:</span></dt><dd>a dynamically typesafe view of the specified collection</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>checkedSet</name>
            <signature><![CDATA[public static <E> Set<E> checkedSet(Set<E> s,
                    Class<E> type)]]></signature>
            <description><![CDATA[Returns a dynamically typesafe view of the specified set.
 Any attempt to insert an element of the wrong type will result in
 an immediate ClassCastException.  Assuming a set contains
 no incorrectly typed elements prior to the time a dynamically typesafe
 view is generated, and that all subsequent access to the set
 takes place through the view, it is guaranteed that the
 set cannot contain an incorrectly typed element.

 A discussion of the use of dynamically typesafe views may be
 found in the documentation for the checkedCollection method.

 The returned set will be serializable if the specified set is
 serializable.

 Since null is considered to be a value of any reference
 type, the returned set permits insertion of null elements whenever
 the backing set does.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - the set for which a dynamically typesafe view is to be
          returned</dd><dd><code>type</code> - the type of element that <code>s</code> is permitted to hold</dd>
<dt><span class="strong">Returns:</span></dt><dd>a dynamically typesafe view of the specified set</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>checkedSortedSet</name>
            <signature><![CDATA[public static <E> SortedSet<E> checkedSortedSet(SortedSet<E> s,
                                Class<E> type)]]></signature>
            <description><![CDATA[Returns a dynamically typesafe view of the specified sorted set.
 Any attempt to insert an element of the wrong type will result in an
 immediate ClassCastException.  Assuming a sorted set
 contains no incorrectly typed elements prior to the time a
 dynamically typesafe view is generated, and that all subsequent
 access to the sorted set takes place through the view, it is
 guaranteed that the sorted set cannot contain an incorrectly
 typed element.

 A discussion of the use of dynamically typesafe views may be
 found in the documentation for the checkedCollection method.

 The returned sorted set will be serializable if the specified sorted
 set is serializable.

 Since null is considered to be a value of any reference
 type, the returned sorted set permits insertion of null elements
 whenever the backing sorted set does.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - the sorted set for which a dynamically typesafe view is to be
          returned</dd><dd><code>type</code> - the type of element that <code>s</code> is permitted to hold</dd>
<dt><span class="strong">Returns:</span></dt><dd>a dynamically typesafe view of the specified sorted set</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>checkedList</name>
            <signature><![CDATA[public static <E> List<E> checkedList(List<E> list,
                      Class<E> type)]]></signature>
            <description><![CDATA[Returns a dynamically typesafe view of the specified list.
 Any attempt to insert an element of the wrong type will result in
 an immediate ClassCastException.  Assuming a list contains
 no incorrectly typed elements prior to the time a dynamically typesafe
 view is generated, and that all subsequent access to the list
 takes place through the view, it is guaranteed that the
 list cannot contain an incorrectly typed element.

 A discussion of the use of dynamically typesafe views may be
 found in the documentation for the checkedCollection method.

 The returned list will be serializable if the specified list
 is serializable.

 Since null is considered to be a value of any reference
 type, the returned list permits insertion of null elements whenever
 the backing list does.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>list</code> - the list for which a dynamically typesafe view is to be
             returned</dd><dd><code>type</code> - the type of element that <code>list</code> is permitted to hold</dd>
<dt><span class="strong">Returns:</span></dt><dd>a dynamically typesafe view of the specified list</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>checkedMap</name>
            <signature><![CDATA[public static <K,V> Map<K,V> checkedMap(Map<K,V> m,
                        Class<K> keyType,
                        Class<V> valueType)]]></signature>
            <description><![CDATA[Returns a dynamically typesafe view of the specified map.
 Any attempt to insert a mapping whose key or value have the wrong
 type will result in an immediate ClassCastException.
 Similarly, any attempt to modify the value currently associated with
 a key will result in an immediate ClassCastException,
 whether the modification is attempted directly through the map
 itself, or through a Map.Entry instance obtained from the
 map's entry set view.

 Assuming a map contains no incorrectly typed keys or values
 prior to the time a dynamically typesafe view is generated, and
 that all subsequent access to the map takes place through the view
 (or one of its collection views), it is guaranteed that the
 map cannot contain an incorrectly typed key or value.

 A discussion of the use of dynamically typesafe views may be
 found in the documentation for the checkedCollection method.

 The returned map will be serializable if the specified map is
 serializable.

 Since null is considered to be a value of any reference
 type, the returned map permits insertion of null keys or values
 whenever the backing map does.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>m</code> - the map for which a dynamically typesafe view is to be
          returned</dd><dd><code>keyType</code> - the type of key that <code>m</code> is permitted to hold</dd><dd><code>valueType</code> - the type of value that <code>m</code> is permitted to hold</dd>
<dt><span class="strong">Returns:</span></dt><dd>a dynamically typesafe view of the specified map</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>checkedSortedMap</name>
            <signature><![CDATA[public static <K,V> SortedMap<K,V> checkedSortedMap(SortedMap<K,V> m,
                                    Class<K> keyType,
                                    Class<V> valueType)]]></signature>
            <description><![CDATA[Returns a dynamically typesafe view of the specified sorted map.
 Any attempt to insert a mapping whose key or value have the wrong
 type will result in an immediate ClassCastException.
 Similarly, any attempt to modify the value currently associated with
 a key will result in an immediate ClassCastException,
 whether the modification is attempted directly through the map
 itself, or through a Map.Entry instance obtained from the
 map's entry set view.

 Assuming a map contains no incorrectly typed keys or values
 prior to the time a dynamically typesafe view is generated, and
 that all subsequent access to the map takes place through the view
 (or one of its collection views), it is guaranteed that the
 map cannot contain an incorrectly typed key or value.

 A discussion of the use of dynamically typesafe views may be
 found in the documentation for the checkedCollection method.

 The returned map will be serializable if the specified map is
 serializable.

 Since null is considered to be a value of any reference
 type, the returned map permits insertion of null keys or values
 whenever the backing map does.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>m</code> - the map for which a dynamically typesafe view is to be
          returned</dd><dd><code>keyType</code> - the type of key that <code>m</code> is permitted to hold</dd><dd><code>valueType</code> - the type of value that <code>m</code> is permitted to hold</dd>
<dt><span class="strong">Returns:</span></dt><dd>a dynamically typesafe view of the specified map</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>emptyIterator</name>
            <signature><![CDATA[public static <T> Iterator<T> emptyIterator()]]></signature>
            <description><![CDATA[Returns an iterator that has no elements.  More precisely,

 

 hasNext always returns false.

 next always throws NoSuchElementException.

 remove always throws IllegalStateException.

 

 Implementations of this method are permitted, but not
 required, to return the same object from multiple invocations.<dl><dt><span class="strong">Returns:</span></dt><dd>an empty iterator</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.7</dd></dl>]]></description>
        </method>
        <method>
            <name>emptyListIterator</name>
            <signature><![CDATA[public static <T> ListIterator<T> emptyListIterator()]]></signature>
            <description><![CDATA[Returns a list iterator that has no elements.  More precisely,

 

 hasNext and hasPrevious always return false.

 next and previous always throw NoSuchElementException.

 remove and set always throw IllegalStateException.

 add always throws UnsupportedOperationException.

 nextIndex always returns
 0 .

 previousIndex always
 returns -1.

 

 Implementations of this method are permitted, but not
 required, to return the same object from multiple invocations.<dl><dt><span class="strong">Returns:</span></dt><dd>an empty list iterator</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.7</dd></dl>]]></description>
        </method>
        <method>
            <name>emptyEnumeration</name>
            <signature><![CDATA[public static <T> Enumeration<T> emptyEnumeration()]]></signature>
            <description><![CDATA[Returns an enumeration that has no elements.  More precisely,

 

 hasMoreElements always
 returns false.

  nextElement always throws
 NoSuchElementException.

 

 Implementations of this method are permitted, but not
 required, to return the same object from multiple invocations.<dl><dt><span class="strong">Returns:</span></dt><dd>an empty enumeration</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.7</dd></dl>]]></description>
        </method>
        <method>
            <name>emptySet</name>
            <signature><![CDATA[public static final <T> Set<T> emptySet()]]></signature>
            <description><![CDATA[Returns the empty set (immutable).  This set is serializable.
 Unlike the like-named field, this method is parameterized.

 This example illustrates the type-safe way to obtain an empty set:
 
     Set<String> s = Collections.emptySet();
 
 Implementation note:  Implementations of this method need not
 create a separate Set object for each call.   Using this
 method is likely to have comparable cost to using the like-named
 field.  (Unlike this method, the field does not provide type safety.)<dl><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>EMPTY_SET</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>emptyList</name>
            <signature><![CDATA[public static final <T> List<T> emptyList()]]></signature>
            <description><![CDATA[Returns the empty list (immutable).  This list is serializable.

 This example illustrates the type-safe way to obtain an empty list:
 
     List<String> s = Collections.emptyList();
 
 Implementation note:  Implementations of this method need not
 create a separate List object for each call.   Using this
 method is likely to have comparable cost to using the like-named
 field.  (Unlike this method, the field does not provide type safety.)<dl><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>EMPTY_LIST</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>emptyMap</name>
            <signature><![CDATA[public static final <K,V> Map<K,V> emptyMap()]]></signature>
            <description><![CDATA[Returns the empty map (immutable).  This map is serializable.

 This example illustrates the type-safe way to obtain an empty set:
 
     Map<String, Date> s = Collections.emptyMap();
 
 Implementation note:  Implementations of this method need not
 create a separate Map object for each call.   Using this
 method is likely to have comparable cost to using the like-named
 field.  (Unlike this method, the field does not provide type safety.)<dl><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>EMPTY_MAP</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>singleton</name>
            <signature><![CDATA[public static <T> Set<T> singleton(T o)]]></signature>
            <description><![CDATA[Returns an immutable set containing only the specified object.
 The returned set is serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>o</code> - the sole object to be stored in the returned set.</dd>
<dt><span class="strong">Returns:</span></dt><dd>an immutable set containing only the specified object.</dd></dl>]]></description>
        </method>
        <method>
            <name>singletonList</name>
            <signature><![CDATA[public static <T> List<T> singletonList(T o)]]></signature>
            <description><![CDATA[Returns an immutable list containing only the specified object.
 The returned list is serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>o</code> - the sole object to be stored in the returned list.</dd>
<dt><span class="strong">Returns:</span></dt><dd>an immutable list containing only the specified object.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.3</dd></dl>]]></description>
        </method>
        <method>
            <name>singletonMap</name>
            <signature><![CDATA[public static <K,V> Map<K,V> singletonMap(K key,
                          V value)]]></signature>
            <description><![CDATA[Returns an immutable map, mapping only the specified key to the
 specified value.  The returned map is serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>key</code> - the sole key to be stored in the returned map.</dd><dd><code>value</code> - the value to which the returned map maps <tt>key</tt>.</dd>
<dt><span class="strong">Returns:</span></dt><dd>an immutable map containing only the specified key-value
         mapping.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.3</dd></dl>]]></description>
        </method>
        <method>
            <name>nCopies</name>
            <signature><![CDATA[public static <T> List<T> nCopies(int n,
                  T o)]]></signature>
            <description><![CDATA[Returns an immutable list consisting of n copies of the
 specified object.  The newly allocated data object is tiny (it contains
 a single reference to the data object).  This method is useful in
 combination with the List.addAll method to grow lists.
 The returned list is serializable.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - the number of elements in the returned list.</dd><dd><code>o</code> - the element to appear repeatedly in the returned list.</dd>
<dt><span class="strong">Returns:</span></dt><dd>an immutable list consisting of <tt>n</tt> copies of the
         specified object.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IllegalArgumentException</a></code> - if <code>n < 0</code></dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>List.addAll(Collection)</code></a>, 
<a href="#"><code>List.addAll(int, Collection)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>reverseOrder</name>
            <signature><![CDATA[public static <T> Comparator<T> reverseOrder()]]></signature>
            <description><![CDATA[Returns a comparator that imposes the reverse of the natural
 ordering on a collection of objects that implement the
 Comparable interface.  (The natural ordering is the ordering
 imposed by the objects' own compareTo method.)  This enables a
 simple idiom for sorting (or maintaining) collections (or arrays) of
 objects that implement the Comparable interface in
 reverse-natural-order.  For example, suppose a is an array of
 strings. Then: 
          Arrays.sort(a, Collections.reverseOrder());
  sorts the array in reverse-lexicographic (alphabetical) order.

 The returned comparator is serializable.<dl><dt><span class="strong">Returns:</span></dt><dd>A comparator that imposes the reverse of the <i>natural
         ordering</i> on a collection of objects that implement
         the <tt>Comparable</tt> interface.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Comparable</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>reverseOrder</name>
            <signature><![CDATA[public static <T> Comparator<T> reverseOrder(Comparator<T> cmp)]]></signature>
            <description><![CDATA[Returns a comparator that imposes the reverse ordering of the specified
 comparator.  If the specified comparator is null, this method is
 equivalent to reverseOrder() (in other words, it returns a
 comparator that imposes the reverse of the natural ordering on
 a collection of objects that implement the Comparable interface).

 The returned comparator is serializable (assuming the specified
 comparator is also serializable or null).<dl><dt><span class="strong">Parameters:</span></dt><dd><code>cmp</code> - a comparator who's ordering is to be reversed by the returned
 comparator or <code>null</code></dd>
<dt><span class="strong">Returns:</span></dt><dd>A comparator that imposes the reverse ordering of the
         specified comparator.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>enumeration</name>
            <signature><![CDATA[public static <T> Enumeration<T> enumeration(Collection<T> c)]]></signature>
            <description><![CDATA[Returns an enumeration over the specified collection.  This provides
 interoperability with legacy APIs that require an enumeration
 as input.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>c</code> - the collection for which an enumeration is to be returned.</dd>
<dt><span class="strong">Returns:</span></dt><dd>an enumeration over the specified collection.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Enumeration</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>list</name>
            <signature><![CDATA[public static <T> ArrayList<T> list(Enumeration<T> e)]]></signature>
            <description><![CDATA[Returns an array list containing the elements returned by the
 specified enumeration in the order they are returned by the
 enumeration.  This method provides interoperability between
 legacy APIs that return enumerations and new APIs that require
 collections.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>e</code> - enumeration providing elements for the returned
          array list</dd>
<dt><span class="strong">Returns:</span></dt><dd>an array list containing the elements returned
         by the specified enumeration.</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.4</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Enumeration</code></a>, 
<a href="#"><code>ArrayList</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>frequency</name>
            <signature><![CDATA[public static int frequency(Collection<?> c,
            Object o)]]></signature>
            <description><![CDATA[Returns the number of elements in the specified collection equal to the
 specified object.  More formally, returns the number of elements
 e in the collection such that
 (o == null ? e == null : o.equals(e)).<dl><dt><span class="strong">Parameters:</span></dt><dd><code>c</code> - the collection in which to determine the frequency
     of <tt>o</tt></dd><dd><code>o</code> - the object whose frequency is to be determined</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if <tt>c</tt> is null</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>disjoint</name>
            <signature><![CDATA[public static boolean disjoint(Collection<?> c1,
               Collection<?> c2)]]></signature>
            <description><![CDATA[Returns true if the two specified collections have no
 elements in common.

 Care must be exercised if this method is used on collections that
 do not comply with the general contract for Collection.
 Implementations may elect to iterate over either collection and test
 for containment in the other collection (or to perform any equivalent
 computation).  If either collection uses a nonstandard equality test
 (as does a SortedSet whose ordering is not compatible with
 equals, or the key set of an IdentityHashMap), both
 collections must use the same nonstandard equality test, or the
 result of this method is undefined.

 Care must also be exercised when using collections that have
 restrictions on the elements that they may contain. Collection
 implementations are allowed to throw exceptions for any operation
 involving elements they deem ineligible. For absolute safety the
 specified collections should contain only elements which are
 eligible elements for both collections.

 Note that it is permissible to pass the same collection in both
 parameters, in which case the method will return true if and
 only if the collection is empty.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>c1</code> - a collection</dd><dd><code>c2</code> - a collection</dd>
<dt><span class="strong">Returns:</span></dt><dd><code>true</code> if the two specified collections have no
 elements in common.</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">NullPointerException</a></code> - if either collection is <code>null</code>.</dd>
<dd><code><a href="#">NullPointerException</a></code> - if one collection contains a <code>null</code>
 element and <code>null</code> is not an eligible element for the other collection.
 (<a href="#">optional</a>)</dd>
<dd><code><a href="#">ClassCastException</a></code> - if one collection contains an element that is
 of a type which is ineligible for the other collection.
 (<a href="#">optional</a>)</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd></dl>]]></description>
        </method>
        <method>
            <name>addAll</name>
            <signature><![CDATA[@SafeVarargs
public static <T> boolean addAll(Collection<? super T> c,
                             T... elements)]]></signature>
            <description><![CDATA[Adds all of the specified elements to the specified collection.
 Elements to be added may be specified individually or as an array.
 The behavior of this convenience method is identical to that of
 c.addAll(Arrays.asList(elements)), but this method is likely
 to run significantly faster under most implementations.

 When elements are specified individually, this method provides a
 convenient way to add a few elements to an existing collection:
 
     Collections.addAll(flavors, "Peaches 'n Plutonium", "Rocky Racoon");
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>c</code> - the collection into which <tt>elements</tt> are to be inserted</dd><dd><code>elements</code> - the elements to insert into <tt>c</tt></dd>
<dt><span class="strong">Returns:</span></dt><dd><tt>true</tt> if the collection changed as a result of the call</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">UnsupportedOperationException</a></code> - if <tt>c</tt> does not support
         the <tt>add</tt> operation</dd>
<dd><code><a href="#">NullPointerException</a></code> - if <tt>elements</tt> contains one or more
         null values and <tt>c</tt> does not permit null elements, or
         if <tt>c</tt> or <tt>elements</tt> are <tt>null</tt></dd>
<dd><code><a href="#">IllegalArgumentException</a></code> - if some property of a value in
         <tt>elements</tt> prevents it from being added to <tt>c</tt></dd><dt><span class="strong">Since:</span></dt>
  <dd>1.5</dd>
<dt><span class="strong">See Also:</span></dt><dd><a href="#"><code>Collection.addAll(Collection)</code></a></dd></dl>]]></description>
        </method>
        <method>
            <name>newSetFromMap</name>
            <signature><![CDATA[public static <E> Set<E> newSetFromMap(Map<E,Boolean> map)]]></signature>
            <description><![CDATA[Returns a set backed by the specified map.  The resulting set displays
 the same ordering, concurrency, and performance characteristics as the
 backing map.  In essence, this factory method provides a Set
 implementation corresponding to any Map implementation.  There
 is no need to use this method on a Map implementation that
 already has a corresponding Set implementation (such as HashMap or TreeMap).

 Each method invocation on the set returned by this method results in
 exactly one method invocation on the backing map or its keySet
 view, with one exception.  The addAll method is implemented
 as a sequence of put invocations on the backing map.

 The specified map must be empty at the time this method is invoked,
 and should not be accessed directly after this method returns.  These
 conditions are ensured if the map is created empty, passed directly
 to this method, and no reference to the map is retained, as illustrated
 in the following code fragment:
 
    Set<Object> weakHashSet = Collections.newSetFromMap(
        new WeakHashMap<Object, Boolean>());
 <dl><dt><span class="strong">Parameters:</span></dt><dd><code>map</code> - the backing map</dd>
<dt><span class="strong">Returns:</span></dt><dd>the set backed by the map</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="#">IllegalArgumentException</a></code> - if <tt>map</tt> is not empty</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
        <method>
            <name>asLifoQueue</name>
            <signature><![CDATA[public static <T> Queue<T> asLifoQueue(Deque<T> deque)]]></signature>
            <description><![CDATA[Returns a view of a Deque as a Last-in-first-out (Lifo)
 Queue. Method add is mapped to push,
 remove is mapped to pop and so on. This
 view can be useful when you would like to use a method
 requiring a Queue but you need Lifo ordering.

 Each method invocation on the queue returned by this method
 results in exactly one method invocation on the backing deque, with
 one exception.  The addAll method is
 implemented as a sequence of addFirst
 invocations on the backing deque.<dl><dt><span class="strong">Parameters:</span></dt><dd><code>deque</code> - the deque</dd>
<dt><span class="strong">Returns:</span></dt><dd>the queue</dd><dt><span class="strong">Since:</span></dt>
  <dd>1.6</dd></dl>]]></description>
        </method>
    </methods>
</Root>
